🗃️ Documentation Toolchain:
  stage: 📖 Documentation
  script:
    # Clone Wiki > Inject Core > Copy out wiki folder to Wiki 
    - git rebase origin/$CI_DEFAULT_BRANCH #Allows to pull latest mutation if there are
    - git clone $TIDE_WIKI_ACCESS
    
    # Inject Core
    - cp -rf $TIDE_CORE_REPO ./$TIDE_WIKI/
    # Generate Index in new location
    - cd $TIDE_WIKI/$TIDE_CORE_REPO/Engines/indexing/
    - export GENERATE_INDEX_FILE=True
    - python ./indexer.py #Staging Index generates in the root of the repo
    - cd ../../ #Back within the Core Root directory
    - cd /$TIDE_CORE_REPO/Orchestration
    - python document.py
    - cd ../../ #Back within the Core Root directory
    - cp -fr wiki/. ../ #Copy content of wiki to top level directory
    - git add -A
    #Graceful exit when there is nothing to commit
    - if ! git diff-index --quiet HEAD; then
    -   git commit -m "$CI_COMMIT_MESSAGE"
    -   git rebase
    -   git push $TIDE_WIKI_ACCESS
    - fi
  rules:
    - if: $TIDE_WIKI_GENERATION != "GITLAB_WIKI"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - 🔮 Validation Toolchain
  resource_group: wiki

🚧 MDR Staging Documentation:
  stage: 📖 Documentation
  script:
    # Generate Index in new location
    - cd $TIDE_CORE_REPO/Engines/indexing/
    - export GENERATE_INDEX_FILE=True
    - python ./staging_indexer.py #Staging Index generates in the root of the repo
    - cd ../../ #Back within the Core Root directory
    - echo $TIDE_WIKI
    - git clone $TIDE_WIKI_ACCESS
    # Inject Index and CoreTIDE into the wiki for generation
    - cp -rf stg_index.json ./$TIDE_WIKI/stg_index.json
    - cd $TIDE_WIKI
    - git clone $TIDE_CORE_ACCESS

    - cd $TIDE_CORE_REPO/Orchestration
    - python document.py
    - cd ../../
    - cp -fr wiki/. ../ #Copy content of wiki to top level directory
    - git add -A
    #Graceful exit when there is nothing to commit
    - if ! git diff-index --quiet HEAD; then
    -   git commit -m "$CI_COMMIT_MESSAGE"
    -   git rebase
    -   git push $TIDE_WIKI_ACCESS
    - fi
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /🛑 Do Not Deploy/'
      when: never
    - if: $TIDE_WIKI_GENERATION != "GITLAB_WIKI"
      when: never
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      changes: 
        - Models Library/Managed Detection Rules/*.yaml
  needs:
    - 🔮 Staging Validation Toolchain
  retry: 1
  variables:
    FF_USE_NEW_BASH_EVAL_STRATEGY: "true"
  resource_group: wiki
