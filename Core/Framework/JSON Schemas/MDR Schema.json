{
    "title": "MDR Schema validator",
    "description": "A Managed Detection Rule is ...",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "required": [
        "name",
        "uuid",
        "response",
        "description",
        "configurations"
    ],
    "anyOf": [
        {
            "required": [
                "metadata"
            ]
        },
        {
            "required": [
                "meta"
            ]
        }
    ],
    "properties": {
        "name": {
            "title": "\ud83c\udfab Display name",
            "type": "string",
            "description": "Verbose, human readable name for the detection rule",
            "example": "New Abnormal Credentials added to Azure AD"
        },
        "uuid": {
            "title": "\ud83d\udd11 Unique identifier for the use-case",
            "type": "string",
            "format": "uuid",
            "description": "This an UUID Gen 4 (you can use https://www.uuidgenerator.net/version4 to generate UUIDs) or ALT+SHIFT+U under Visual Studio Code",
            "example": "323d548d-17ca-46fa-a7c7-de43302456a1"
        },
        "references": {
            "title": "\ud83d\udd17 References to information sources",
            "type": [
                "object",
                "array"
            ],
            "description": "Schema for new references",
            "anyOf": [
                {
                    "required": [
                        "public"
                    ]
                },
                {
                    "required": [
                        "internal"
                    ]
                },
                {
                    "required": [
                        "reports"
                    ]
                }
            ],
            "properties": {
                "public": {
                    "title": "\ud83d\udd4a\ufe0f Publicly available resources",
                    "description": "Resources freely available on internet",
                    "icon": "\ud83d\udd4a\ufe0f",
                    "type": "object",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "example": 1,
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "additionalProperties": false
                },
                "internal": {
                    "title": "\ud83c\udfe6 Private references",
                    "icon": "\ud83c\udfe6",
                    "description": "Propriatary, sensible and confidential data belonging to the owner of the TIDeMEC instance\nwhere the object was modelled on, and which cannot be shared.\n",
                    "type": "object",
                    "patternProperties": {
                        "^[a-z]$": {
                            "example": "a",
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "additionalProperties": false
                },
                "restricted": {
                    "title": "\ud83d\udd10 Pro",
                    "icon": "\ud83d\udd10",
                    "description": "Properties propriatary to the owner of the TIDeMEC instance where the object was created,\nbut which may be shared with a defined list of approved counterparts.\n",
                    "type": "object",
                    "patternProperties": {
                        "^[A-Z]$": {
                            "example": "A",
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "additionalProperties": false
                },
                "reports": {
                    "title": "\ud83d\udca1 Intelligence Reports",
                    "icon": "\ud83d\udcc4",
                    "description": "Registry of reports uploaded to this TIDeMEC instance",
                    "type": "array",
                    "items": {
                        "enum": [
                            "RPT0001",
                            "RPT0002",
                            "RPT0001 #Test File Cyber Security Brief (June 2023)",
                            "RPT0002 #TA-24-006_-_Persistent-campaign-delivering-Async..."
                        ],
                        "markdownEnumDescriptions": [
                            "\n### \ud83d\udca1 Test File Cyber Security Brief (June 2023)\n\n\ud83d\udd11 **Identifier** : `RPT0001`\n\n  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n\n\n---\n\nCyber Security Brief (June 2023)July 3, 2023 - Version: 1.0TLP:CLEARDisclosure is not limited.TLP:CLEAR information may be distributed freely.Executive summaryWe analysed 312 open source reports for this Cyber Security Brief.1Relating to cyber policy and law enforcement, in the EU, large online platforms risk fines fornot marking deepfakes, the EU\u2019s Artificial Intelligence Act bans high-risk AI practices and therewere fines for breaching user data access rights. In the rest of the world, the US ...\n",
                            "\n### \ud83d\udca1 TA-24-006_-_Persistent-campaign-delivering-AsyncRAT-loader\n\n\ud83d\udd11 **Identifier** : `RPT0002`\n\n  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n\n\n---\n\nThreat Alert - TA 24-006Persistent campaign deliveringAsyncRAT malwareJanuary 8, 2023 - Version: 1.0TLP:AMBER+STRICTCategory Type ThreatLevelDomain(s) Sector(s) ConfidenceFORACTIONCybercrime Top MalwareSpearphishingLow World Criticalinfrastructure, AnyA1Key PointsAn ongoing sophisticated campaign aims at delivering AsyncRAT malware to specific victims.The campaign has been persistent since at least 11 months, updating frequently its obfuscationtechniques.At least one EUIBA detected attempts to d...\n",
                            "\n### \ud83d\udca1 Test File Cyber Security Brief (June 2023)\n\n\ud83d\udd11 **Identifier** : `RPT0001`\n\n  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n\n\n---\n\nCyber Security Brief (June 2023)July 3, 2023 - Version: 1.0TLP:CLEARDisclosure is not limited.TLP:CLEAR information may be distributed freely.Executive summaryWe analysed 312 open source reports for this Cyber Security Brief.1Relating to cyber policy and law enforcement, in the EU, large online platforms risk fines fornot marking deepfakes, the EU\u2019s Artificial Intelligence Act bans high-risk AI practices and therewere fines for breaching user data access rights. In the rest of the world, the US ...\n",
                            "\n### \ud83d\udca1 TA-24-006_-_Persistent-campaign-delivering-AsyncRAT-loader\n\n\ud83d\udd11 **Identifier** : `RPT0002`\n\n  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n\n\n---\n\nThreat Alert - TA 24-006Persistent campaign deliveringAsyncRAT malwareJanuary 8, 2023 - Version: 1.0TLP:AMBER+STRICTCategory Type ThreatLevelDomain(s) Sector(s) ConfidenceFORACTIONCybercrime Top MalwareSpearphishingLow World Criticalinfrastructure, AnyA1Key PointsAn ongoing sophisticated campaign aims at delivering AsyncRAT malware to specific victims.The campaign has been persistent since at least 11 months, updating frequently its obfuscationtechniques.At least one EUIBA detected attempts to d...\n"
                        ]
                    },
                    "uniqueItems": true
                }
            }
        },
        "meta": {
            "title": "\u270d \u26a0\ufe0f DEPRECATION WARNING",
            "type": "object",
            "description": "\u26a0\ufe0f DEPRECATED : Use metadata keyword instead",
            "required": [
                "tlp",
                "version",
                "created",
                "modified",
                "author"
            ],
            "properties": {
                "version": {
                    "title": "\ud83c\udff7\ufe0f Version",
                    "type": "integer",
                    "description": "Latest revision of the model object, always in integer",
                    "example": 3
                },
                "created": {
                    "title": "\ud83d\uddd3\ufe0f Creation Date",
                    "type": "string",
                    "format": "date",
                    "description": "Creation date of initial version",
                    "example": "2022-09-12"
                },
                "modified": {
                    "title": "\ud83d\uddd3\ufe0f Last Modification",
                    "type": "string",
                    "format": "date",
                    "description": "Creation date of the latest version",
                    "example": "2022-09-13"
                },
                "tlp": {
                    "title": "\ud83d\udea6 Traffic Light Protocol",
                    "type": "string",
                    "description": "The Traffic Light Protocol - or short: TLP - was designed with the objective to create a favorable classification scheme for sharing sensitive information while keeping the control over its distribution at the same time.",
                    "example": "green",
                    "enum": [
                        "clear",
                        "green",
                        "amber",
                        "amber+strict",
                        "red"
                    ],
                    "markdownEnumDescriptions": [
                        "\n### \u26aa clear\n\n\ud83d\udd11 **Identifier** : `TLP:CLEAR`\n\n \n\n\n\n\n\n\n\n---\n\nRecipients can spread this to the world, there is no limit on disclosure.\n",
                        "\n### \ud83d\udfe2 green\n\n\ud83d\udd11 **Identifier** : `TLP:GREEN`\n\n \n\n\n\n\n\n\n\n---\n\nLimited disclosure, recipients can spread this within their community. Sources may use TLP:GREEN when information is useful to increase awareness within their wider community.\n",
                        "\n### \ud83d\udfe0 amber\n\n\ud83d\udd11 **Identifier** : `TLP:AMBER`\n\n \n\n\n\n\n\n\n\n---\n\nLimited disclosure, recipients can only spread this on a need-to-know basis within their organization and its clients.\n",
                        "\n### \ud83d\udfe0 amber+strict\n\n\ud83d\udd11 **Identifier** : `TLP:AMBER+STRICT`\n\n \n\n\n\n\n\n\n\n---\n\nSimilar to TLP:AMBER, but restricts sharing to the organization only.\n",
                        "\n### \ud83d\udd34 red\n\n\ud83d\udd11 **Identifier** : `TLP:RED`\n\n \n\n\n\n\n\n\n\n---\n\nFor the eyes and ears of individual recipients only, no further disclosure.\n"
                    ]
                },
                "classification": {
                    "title": "\ud83d\udca1 Data Classification Marking",
                    "type": "string",
                    "description": "Information Security classification for the data contained within the TIDeMEC object.",
                    "example": "SECRET UE/EU SECRET",
                    "enum": [
                        "RESTREINT UE/EU RESTRICTED",
                        "CONFIDENTIEL UE/EU CONFIDENTIAL",
                        "SECRET UE/EU SECRET",
                        "TR\u00c8S SECRET UE/EU TOP SECRET",
                        "NATO Unclassified",
                        "NATO RESTRICTED",
                        "NATO CONFIDENTIAL",
                        "NATO CONFIDENTIAL ATOMAL",
                        "NATO SECRET",
                        "NATO SECRET ATOMAL",
                        "COSMIC TOP SECRET",
                        "COSMIC TOP SECRET ATOMAL"
                    ],
                    "markdownEnumDescriptions": [
                        "\n### \ud83d\udca1 RESTREINT UE/EU RESTRICTED\n\n\ud83d\udd11 **Identifier** : `DCM0001`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could be disadvantageous to the interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 CONFIDENTIEL UE/EU CONFIDENTIAL\n\n\ud83d\udd11 **Identifier** : `DCM0002`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could cause exceptionally grave prejudice to the essential interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 SECRET UE/EU SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0003`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could seriously harm the essential interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 TR\u00c8S SECRET UE/EU TOP SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0004`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could cause exceptionally grave prejudice to the essential interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 NATO Unclassified\n\n\ud83d\udd11 **Identifier** : `DCM0006`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nThis is applied to official information that is the property of NATO but \ndoes not meet the criteria for classification. Access to this information \nby non-NATO entities is permitted when such access would not be \ndetrimental to NATO.\n\n",
                        "\n### \ud83d\udca1 NATO RESTRICTED\n\n\ud83d\udd11 **Identifier** : `DCM0007`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would be \ndisadvantageous to the interests of NATO. Though similar safeguards \nare applied to FOR OFFICIAL USE ONLY, OFFICIAL USE ONLY, or \nSENSITIVE, BUT UNCLASSIFIED information, NATO RESTRICTED \nis a security classification.\n\n",
                        "\n### \ud83d\udca1 NATO CONFIDENTIAL\n\n\ud83d\udd11 **Identifier** : `DCM0008`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would be \ndamaging to NATO interests.\n\n",
                        "\n### \ud83d\udca1 NATO CONFIDENTIAL ATOMAL\n\n\ud83d\udd11 **Identifier** : `DCM0009`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would be \ndamaging to NATO interests.\n\nThis designation is added to the NATO security classification when \napplicable. For example, COSMIC TOP SECRET ATOMAL (CTS-A).\nATOMAL information applies to U.S. RESTRICTED DATA or \nFORMERLY RESTRICTED DATA or United Kingdom Atomic \nInformation released to NATO. \n\n",
                        "\n### \ud83d\udca1 NATO SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0010`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nserious damage to NATO.\n\n",
                        "\n### \ud83d\udca1 NATO SECRET ATOMAL\n\n\ud83d\udd11 **Identifier** : `DCM0011`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nserious damage to NATO.\n\nThis designation is added to the NATO security classification when \napplicable. For example, COSMIC TOP SECRET ATOMAL (CTS-A).\nATOMAL information applies to U.S. RESTRICTED DATA or \nFORMERLY RESTRICTED DATA or United Kingdom Atomic \nInformation released to NATO. \n\n",
                        "\n### \ud83d\udca1 COSMIC TOP SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0012`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nexceptionally grave damage to NATO. COSMIC is applied to Top \nSecret material to signify it belongs to NATO. The term NATO TOP \nSECRET is not used.\n\n",
                        "\n### \ud83d\udca1 COSMIC TOP SECRET ATOMAL\n\n\ud83d\udd11 **Identifier** : `DCM0013`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nexceptionally grave damage to NATO. COSMIC is applied to Top \nSecret material to signify it belongs to NATO. The term NATO TOP \nSECRET is not used.\n\nThis designation is added to the NATO security classification when \napplicable. For example, COSMIC TOP SECRET ATOMAL (CTS-A).\nATOMAL information applies to U.S. RESTRICTED DATA or \nFORMERLY RESTRICTED DATA or United Kingdom Atomic \nInformation released to NATO. \n"
                    ]
                },
                "author": {
                    "title": "\ud83d\udc69\u200d\ud83d\udcbb Model author",
                    "type": "string",
                    "format": "email",
                    "description": "Creator of latest version",
                    "example": "amine.besson@ext.ec.europa.eu"
                },
                "contributors": {
                    "title": "\ud83d\udc65 Research Contributors",
                    "type": "array",
                    "description": "Individuals who supported creating, enriching or informing the information contained in the document.",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                }
            },
            "additionalProperties": false
        },
        "metadata": {
            "title": "\ud83d\uddc3\ufe0f Metadata",
            "type": "object",
            "description": "Non technical indicators helping with overall data management",
            "required": [
                "tlp",
                "version",
                "created",
                "modified",
                "author"
            ],
            "properties": {
                "version": {
                    "title": "\ud83c\udff7\ufe0f Version",
                    "type": "integer",
                    "description": "Latest revision of the model object, always in integer",
                    "example": 3
                },
                "created": {
                    "title": "\ud83d\uddd3\ufe0f Creation Date",
                    "type": "string",
                    "format": "date",
                    "description": "Creation date of initial version",
                    "example": "2022-09-12"
                },
                "modified": {
                    "title": "\ud83d\uddd3\ufe0f Last Modification",
                    "type": "string",
                    "format": "date",
                    "description": "Creation date of the latest version",
                    "example": "2022-09-13"
                },
                "tlp": {
                    "title": "\ud83d\udea6 Traffic Light Protocol",
                    "type": "string",
                    "description": "The Traffic Light Protocol - or short: TLP - was designed with the objective to create a favorable classification scheme for sharing sensitive information while keeping the control over its distribution at the same time.",
                    "example": "green",
                    "enum": [
                        "clear",
                        "green",
                        "amber",
                        "amber+strict",
                        "red"
                    ],
                    "markdownEnumDescriptions": [
                        "\n### \u26aa clear\n\n\ud83d\udd11 **Identifier** : `TLP:CLEAR`\n\n \n\n\n\n\n\n\n\n---\n\nRecipients can spread this to the world, there is no limit on disclosure.\n",
                        "\n### \ud83d\udfe2 green\n\n\ud83d\udd11 **Identifier** : `TLP:GREEN`\n\n \n\n\n\n\n\n\n\n---\n\nLimited disclosure, recipients can spread this within their community. Sources may use TLP:GREEN when information is useful to increase awareness within their wider community.\n",
                        "\n### \ud83d\udfe0 amber\n\n\ud83d\udd11 **Identifier** : `TLP:AMBER`\n\n \n\n\n\n\n\n\n\n---\n\nLimited disclosure, recipients can only spread this on a need-to-know basis within their organization and its clients.\n",
                        "\n### \ud83d\udfe0 amber+strict\n\n\ud83d\udd11 **Identifier** : `TLP:AMBER+STRICT`\n\n \n\n\n\n\n\n\n\n---\n\nSimilar to TLP:AMBER, but restricts sharing to the organization only.\n",
                        "\n### \ud83d\udd34 red\n\n\ud83d\udd11 **Identifier** : `TLP:RED`\n\n \n\n\n\n\n\n\n\n---\n\nFor the eyes and ears of individual recipients only, no further disclosure.\n"
                    ]
                },
                "classification": {
                    "title": "\ud83d\udca1 Data Classification Marking",
                    "type": "string",
                    "description": "Information Security classification for the data contained within the TIDeMEC object.",
                    "example": "SECRET UE/EU SECRET",
                    "enum": [
                        "RESTREINT UE/EU RESTRICTED",
                        "CONFIDENTIEL UE/EU CONFIDENTIAL",
                        "SECRET UE/EU SECRET",
                        "TR\u00c8S SECRET UE/EU TOP SECRET",
                        "NATO Unclassified",
                        "NATO RESTRICTED",
                        "NATO CONFIDENTIAL",
                        "NATO CONFIDENTIAL ATOMAL",
                        "NATO SECRET",
                        "NATO SECRET ATOMAL",
                        "COSMIC TOP SECRET",
                        "COSMIC TOP SECRET ATOMAL"
                    ],
                    "markdownEnumDescriptions": [
                        "\n### \ud83d\udca1 RESTREINT UE/EU RESTRICTED\n\n\ud83d\udd11 **Identifier** : `DCM0001`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could be disadvantageous to the interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 CONFIDENTIEL UE/EU CONFIDENTIAL\n\n\ud83d\udd11 **Identifier** : `DCM0002`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could cause exceptionally grave prejudice to the essential interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 SECRET UE/EU SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0003`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could seriously harm the essential interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 TR\u00c8S SECRET UE/EU TOP SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0004`\n\n \n\n\n\n\ud83d\udcb6 **European Union Classified Information** : _In order for the Council to be able to work in all areas which require the use of EU classified information (EUCI),\nit needs to have a comprehensive security system to protect this information. The Council decision on the security\nrules for protecting EU classified information lays down the basic pr..._\n\n\n\n\n\n---\n\nThe unauthorised disclosure of this information could cause exceptionally grave prejudice to the essential interests of the EU or one or more of the member states.\n",
                        "\n### \ud83d\udca1 NATO Unclassified\n\n\ud83d\udd11 **Identifier** : `DCM0006`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nThis is applied to official information that is the property of NATO but \ndoes not meet the criteria for classification. Access to this information \nby non-NATO entities is permitted when such access would not be \ndetrimental to NATO.\n\n",
                        "\n### \ud83d\udca1 NATO RESTRICTED\n\n\ud83d\udd11 **Identifier** : `DCM0007`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would be \ndisadvantageous to the interests of NATO. Though similar safeguards \nare applied to FOR OFFICIAL USE ONLY, OFFICIAL USE ONLY, or \nSENSITIVE, BUT UNCLASSIFIED information, NATO RESTRICTED \nis a security classification.\n\n",
                        "\n### \ud83d\udca1 NATO CONFIDENTIAL\n\n\ud83d\udd11 **Identifier** : `DCM0008`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would be \ndamaging to NATO interests.\n\n",
                        "\n### \ud83d\udca1 NATO CONFIDENTIAL ATOMAL\n\n\ud83d\udd11 **Identifier** : `DCM0009`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would be \ndamaging to NATO interests.\n\nThis designation is added to the NATO security classification when \napplicable. For example, COSMIC TOP SECRET ATOMAL (CTS-A).\nATOMAL information applies to U.S. RESTRICTED DATA or \nFORMERLY RESTRICTED DATA or United Kingdom Atomic \nInformation released to NATO. \n\n",
                        "\n### \ud83d\udca1 NATO SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0010`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nserious damage to NATO.\n\n",
                        "\n### \ud83d\udca1 NATO SECRET ATOMAL\n\n\ud83d\udd11 **Identifier** : `DCM0011`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nserious damage to NATO.\n\nThis designation is added to the NATO security classification when \napplicable. For example, COSMIC TOP SECRET ATOMAL (CTS-A).\nATOMAL information applies to U.S. RESTRICTED DATA or \nFORMERLY RESTRICTED DATA or United Kingdom Atomic \nInformation released to NATO. \n\n",
                        "\n### \ud83d\udca1 COSMIC TOP SECRET\n\n\ud83d\udd11 **Identifier** : `DCM0012`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nexceptionally grave damage to NATO. COSMIC is applied to Top \nSecret material to signify it belongs to NATO. The term NATO TOP \nSECRET is not used.\n\n",
                        "\n### \ud83d\udca1 COSMIC TOP SECRET ATOMAL\n\n\ud83d\udd11 **Identifier** : `DCM0013`\n\n \n\n\n\n\ud83e\ude96 **NATO CLASSIFICATION MARKINGS** : _NATO information is information that has been generated by or for NATO, or member nation \noriginated-information that has been released into the NATO security system. Information marked \n\u201cNATO\u201d is the property of NATO. NATO classified information contributed by a member nation \nremains the property ..._\n\n\n\n\n\n---\n\nApplied to information whose unauthorized disclosure would cause \nexceptionally grave damage to NATO. COSMIC is applied to Top \nSecret material to signify it belongs to NATO. The term NATO TOP \nSECRET is not used.\n\nThis designation is added to the NATO security classification when \napplicable. For example, COSMIC TOP SECRET ATOMAL (CTS-A).\nATOMAL information applies to U.S. RESTRICTED DATA or \nFORMERLY RESTRICTED DATA or United Kingdom Atomic \nInformation released to NATO. \n"
                    ]
                },
                "author": {
                    "title": "\ud83d\udc69\u200d\ud83d\udcbb Model author",
                    "type": "string",
                    "format": "email",
                    "description": "Creator of latest version",
                    "example": "amine.besson@ext.ec.europa.eu"
                },
                "contributors": {
                    "title": "\ud83d\udc65 Research Contributors",
                    "type": "array",
                    "description": "Individuals who supported creating, enriching or informing the information contained in the document.",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                }
            },
            "additionalProperties": false
        },
        "description": {
            "title": "\ud83d\udd2c Detection description",
            "description": "Explanation of what the detection rule is detecting, in order to give context to alerts receivers.",
            "type": "string",
            "tide.template.multiline": true
        },
        "detection_model": {
            "title": "\ud83d\udee1\ufe0f Cyber Detection Models",
            "type": "string",
            "description": "Internal Reference to TIDeMEC existing cyber detection models",
            "example": "CDM0016",
            "enum": [
                "CDM0001",
                "CDM0002",
                "CDM0003",
                "CDM0004",
                "CDM0005",
                "CDM0006",
                "CDM0007",
                "CDM0008",
                "CDM0009",
                "CDM0010",
                "CDM0011",
                "CDM0012",
                "CDM0013",
                "CDM0014",
                "CDM0015",
                "CDM0016",
                "CDM0017",
                "CDM0018",
                "CDM0019",
                "CDM0020",
                "CDM0021",
                "CDM0022",
                "CDM0023",
                "CDM0024",
                "CDM0025",
                "CDM0026",
                "CDM0027",
                "CDM0028",
                "CDM0029",
                "CDM0030",
                "CDM0031",
                "CDM0032",
                "CDM0033",
                "CDM0034",
                "CDM0035",
                "CDM0036",
                "CDM0037",
                "CDM0038",
                "CDM0039",
                "CDM0040",
                "CDM0041",
                "CDM0042",
                "CDM0043",
                "CDM0044",
                "CDM0045",
                "CDM0046",
                "CDM0047",
                "CDM0048",
                "CDM0049",
                "CDM0050",
                "CDM0051",
                "CDM0052",
                "CDM0053",
                "CDM0054",
                "CDM0055",
                "CDM0056",
                "CDM0057",
                "CDM0058",
                "CDM0059",
                "CDM0060",
                "CDM0061",
                "CDM0062",
                "CDM0063",
                "CDM0064",
                "CDM0065",
                "CDM0066",
                "CDM0067",
                "CDM0068",
                "CDM0069",
                "CDM0070",
                "CDM0071",
                "CDM0072",
                "CDM0073",
                "CDM0074",
                "CDM0075",
                "CDM0076",
                "CDM0077",
                "CDM0078",
                "CDM0079",
                "CDM0080",
                "CDM0081",
                "CDM0082",
                "CDM0083",
                "CDM0084",
                "CDM0085",
                "CDM0086",
                "CDM0087",
                "CDM0088",
                "CDM0089",
                "CDM0090",
                "BDR0001",
                "BDR0002",
                "BDR0003",
                "BDR0004",
                "BDR0005",
                "BDR0006",
                "BDR0007",
                "BDR0008",
                "BDR0009",
                "BDR0010",
                "BDR0011",
                "BDR0012",
                "BDR0013",
                "BDR0014",
                "BDR0015",
                "BDR0016",
                "CDM0001 #Account manipulation in AD",
                "CDM0002 #Track M365 for high risk role creation",
                "CDM0003 #Identify critical partner operations w/ delegate...",
                "CDM0004 #Detect adversary signed SAML Tokens",
                "CDM0005 #Malicious ADFS trust modification",
                "CDM0006 #Detect Abuse of trusted third-party services",
                "CDM0007 #Detect malicious scripts hiding in registry",
                "CDM0008 #Detect malicious execution of rundll32",
                "CDM0009 #Compromised FaaS instances",
                "CDM0010 #Signins from VPN Providers",
                "CDM0011 #EC2 Instances using IMDSv1",
                "CDM0012 #EC2 Credential Exfiltration",
                "CDM0013 #External IMDS Requests",
                "CDM0014 #Compromised cloud accounts",
                "CDM0015 #Cloud network plane lateral movement",
                "CDM0016 #Monitor Actions performed w/ recently assumed ro...",
                "CDM0017 #Monitor for Web Shell Attacks",
                "CDM0018 #Detect non-approved container image deployed",
                "CDM0019 #Detect Cryptominer running in container",
                "CDM0020 #Changes in SSH authorized_key file",
                "CDM0021 #Identify Emotet Trojan Artefacts",
                "CDM0022 #Detection IIS extensions quietly open persistent...",
                "CDM0023 #SQL Commands in Web Request",
                "CDM0024 #Detect Suspicious Redirections in URL",
                "CDM0025 #Identify Path Traversal in Web Requests",
                "CDM0026 #Detect Confluence RCE (CVE-2021-26084)",
                "CDM0027 #Detect Abnormal Traffic to Web Servers",
                "CDM0028 #Monitor Web Vulnerability Scanner Behaviours",
                "CDM0029 #Obfuscated Query String in Web Request",
                "CDM0030 #Suspicious Requests URL",
                "CDM0031 #Detect brute-force attacks against EULOGIN IdP",
                "CDM0032 #(CVE-2020-0688) Confluence VIEWSTATE query param...",
                "CDM0033 #XSS Payload in Web Request",
                "CDM0034 #Detect creation of a new AWS Amplify website",
                "CDM0035 #Detect changes to existing AWS Amplify website",
                "CDM0036 #Monitor  r & Machine Active Directory Certificat...",
                "CDM0037 #CrackMapExec related artifacts on endpoints",
                "CDM0038 #Traffic to customervoice.microsoft.com",
                "CDM0039 #Accepted AWS VPC peering requests",
                "CDM0040 #Detect running container images w/ exploitable v...",
                "CDM0041 #Windows environment lateral movement via SMB pro...",
                "CDM0042 #Sentinel connector impaired",
                "CDM0043 #Detection for duplication access token in new pr...",
                "CDM0044 #Azure Microsoft.GuestConfiguration resource prov...",
                "CDM0045 #Detection of Linux kernel module loading",
                "CDM0046 #VPC peering requests received from inside own AW...",
                "CDM0047 #Detect Container Breakout Exploit via runc vulne...",
                "CDM0048 #Detect secrets embedded in container images",
                "CDM0049 #Public AWS S3 bucket",
                "CDM0050 #DNS activity related to potential malicious server",
                "CDM0051 #TCP or UDP outbound traffic unusual destination ...",
                "CDM0052 #Customervoice.microsoft.com link in email or oth...",
                "CDM0053 #Honeytoken accessed from private AWS S3 bucket",
                "CDM0054 #Azure infrastructure modifications different res...",
                "CDM0055 #Changes in Azure to Microsoft Policy Remediations",
                "CDM0056 #Detect protocol DDoS",
                "CDM0057 #Detect use msiexec establish remote connection o...",
                "CDM0058 #SMB connection attempt unusual or external SMB s...",
                "CDM0059 #SSH access attempt to C3 ESXi console",
                "CDM0060 #unusual SSH connections on server",
                "CDM0061 #Hashicorp vault admin connects from unexpected c...",
                "CDM0062 #Hashicorp vault admin reads secrets",
                "CDM0063 #Detect changes to repository visibility",
                "CDM0064 #Changes in the build plan",
                "CDM0065 #Detect modified branch protection",
                "CDM0066 #Detect non-authorized access security or network...",
                "CDM0067 #Disabling or modifying security tools",
                "CDM0068 #Detect fake SSL certificates",
                "CDM0069 #Detect non-authorized access endpoint management...",
                "CDM0070 #Script interpreters launched via office applicat...",
                "CDM0071 #LOLBins Execution Related Accounts or Group Disc...",
                "CDM0072 #Outbound HTTP Proxy traffic from user endpoint t...",
                "CDM0073 #Spyware app detected on mobile device",
                "CDM0074 #Abnormal Scheduled Tasks Activity on Windows",
                "CDM0075 #Hashicorp vault admin changes policy",
                "CDM0076 #Detect ransomware running on devices",
                "CDM0077 #Detection M365 illicit application consent grant...",
                "CDM0078 #Detect email attachments that could be linked sp...",
                "CDM0079 #Detect spear phishing campaign using specific pa...",
                "CDM0080 #Detect AWS Cross-Account IAM Activity",
                "CDM0081 #Scheduled Tasks and COM Hijacking",
                "CDM0082 #Application connecting to a SMB network share",
                "CDM0083 #Detect unusual web requests that could be relate...",
                "CDM0084 #RDP sessions outside PAM or Central Helpdesk ser...",
                "CDM0085 #detect ICS activity restricted resources not lin...",
                "CDM0086 #ICS detect outbound network activity",
                "CDM0087 #ICS logging tampering",
                "CDM0088 #ICS detect path traversal requests",
                "CDM0089 #Detect command injection on ICS Ivanti Connect S...",
                "CDM0090 #Detect Ivanti Connect Secure ICS system modifica...",
                "BDR0001 #EC Central Logging and Monitoring Standard",
                "BDR0002 #DIGIT C3 PAM service - access policy for RDP ses...",
                "BDR0003 #DIGIT C3 PAM service - access policy for SSH ses...",
                "BDR0004 #ESS CBC activity initiated from outside EC or ve...",
                "BDR0005 #ESS CBC High Privileged activity",
                "BDR0006 #JRC IES top failed Windows authentication reporting",
                "BDR0007 #SHS CLIMA - Non compliance monitoring & alerting...",
                "BDR0008 #ESS CBC User not signed in for the last 6 months",
                "BDR0009 #DIGIT S2 CATCH CSOC integrations via ES_SPLUNK",
                "BDR0010 #ESS CBC lack of CBC audit logs",
                "BDR0011 #ESS EDRT integration settings changed",
                "BDR0012 #ESS CBC lack of CBC alerts",
                "BDR0013 #DIGIT C3 PAM service - access policy for Super  ...",
                "BDR0014 #DIGIT protected RPM - access policy violation",
                "BDR0015 #EC-related ServiceNow local account advanced mon...",
                "BDR0016 #Forensic data configuration for mobile devices"
            ],
            "markdownEnumDescriptions": [
                "\n### \ud83d\udee1\ufe0f Account manipulation in AD\n\n\ud83d\udd11 **Identifier** : `CDM0001`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0001%5D-Account-manipulation-in-AD)\n\n---\n\nMonitor Azure Activity Logs (Azure) or Windows Security Logs (AD) for Service Principal and Application modifications. Detect when new rights are being granted to an existing account and when new high priviledge roles are created from a single, trusted one within a short span of time, especially when it is followed by a high rate of subsequent resource access and modification. \n",
                "\n### \ud83d\udee1\ufe0f Track M365 for high risk role creation\n\n\ud83d\udd11 **Identifier** : `CDM0002`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0002%5D-Track-M365-for-high-risk-role-creation)\n\n---\n\nMonitor the Microsoft 365 tenant for the creation of new Management Role  Assignments. This can be done by creating rules to alert on the  New-ManagementRoleAssignment operation and further filter for the  assignment of the ApplicationImpersonation role.  \n",
                "\n### \ud83d\udee1\ufe0f Identify critical partner operations with delegated permissions\n\n\ud83d\udd11 **Identifier** : `CDM0003`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0003%5D-Identify-critical-partner-operations-with-delegated-permissions)\n\n---\n\nThe Azure AD sign-in logs record sign-ins by partners who have been delegated  administrative permissions. For enhanced visibility of sign-in events initiated  by partner organizations, the logs can be filtered specific to the property of  \"crossTenantAccessType\" matching \"serviceProvider\". Track activities from 3rd particularly regarding if they start to accumulate privileges or do critical  actions and operations on key infrastructure. \n",
                "\n### \ud83d\udee1\ufe0f Detect adversary signed SAML Tokens\n\n\ud83d\udd11 **Identifier** : `CDM0004`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0004%5D-Detect-adversary-signed-SAML-Tokens)\n\n---\n\nSearch for any logins to service providers using SAML SSO, which do not have corresponding Windows Security Log events 4769, 1200 and 1202  in the Domain, and would indicate a forged response as the only event is the login to the service provider. Certificate export detection with event 1007, especially when the export is performed with the command line, is incriminating. Look for tools like Mimikatz and ADFSDump, which can be detected with Sysmon Event 18 with pipe named '\"\\microsoft##wid\\tsql\\query\"'. \n",
                "\n### \ud83d\udee1\ufe0f Malicious ADFS trust modification\n\n\ud83d\udd11 **Identifier** : `CDM0005`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0005%5D-Malicious-ADFS-trust-modification)\n\n---\n\nMonitor creation of new ADFS trusts, by monitoring Windows Security Event Log on the ADFS server : \"The Federation Service configuration was changed\". This event can be correlated to relevant event 510 with the same Instance ID  for change details. There could be more than one 510 event per single 307 event.  These events should be reviewed, specifically searching for \"Configuration: Type: IssuanceAuthority\" where \"Property Value\" references an unfamiliar Domain. \n",
                "\n### \ud83d\udee1\ufe0f Detect Abuse of trusted third-party services\n\n\ud83d\udd11 **Identifier** : `CDM0006`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0006%5D-Detect-Abuse-of-trusted-third-party-services)\n\n---\n\nMonitor for communication from/to trusted cloud hosting plarforms (including things such as code repositories) to identify whether the content seems malicious -- command line execution, host modification, obfuscation etc. ; but also whether they are communicating to the hosting platform in ways that are similar to a C2 server. \n",
                "\n### \ud83d\udee1\ufe0f Detect malicious scripts hiding in registry\n\n\ud83d\udd11 **Identifier** : `CDM0007`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0007%5D-Detect-malicious-scripts-hiding-in-registry)\n\n---\n\nMonitor for new registry keys added by processes and command-line arguments that contain scripts such as Visual Basic Scripts, JavaScript, Microsoft HTML scripts etc. Keep a repository of known keys used by adversaries, such as ones ending with '\\Software\\Microsoft\\Windows\\ CurrentVersion\\Run' or '\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce'. \n",
                "\n### \ud83d\udee1\ufe0f Detect malicious execution of rundll32\n\n\ud83d\udd11 **Identifier** : `CDM0008`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0008%5D-Detect-malicious-execution-of-rundll32)\n\n---\n\nLook for rundll32 execution , especially when called from another script. Monitor command line arguments to identify when malicious files are loaded with rundll32. Try to correlate DLL download followed immediately by a programmatic execution, which would indicate a multi-stage payload. Bear in mind that adversaries may rename the malicious DLL, for example with .sys extensions and hide in system paths, such as system32. \n",
                "\n### \ud83d\udee1\ufe0f Compromised FaaS instances\n\n\ud83d\udd11 **Identifier** : `CDM0009`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0009%5D-Compromised-FaaS-instances)\n\n---\n\nMonitor for functions that contain obfuscated and/or compiled code. Usually functions are closed within seconds of their triggering, and communicate with other services within AWS, meaning that long-running functions, with many connections to the outside need to be identified. Comparison with code repositories will also help to confirm whether a piece of code is supposed to be hosted in the cloud.  \n",
                "\n### \ud83d\udee1\ufe0f Signins from VPN Providers\n\n\ud83d\udd11 **Identifier** : `CDM0010`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0010%5D-Signins-from-VPN-Providers)\n\n---\n\nDetect sign-in or connection attempts from unknown VPN providers. Commercial VPN providers will publish their egress servers, which may be dynamically retrieved from their API or other intelligence listing regularly updated.  \n",
                "\n### \ud83d\udee1\ufe0f EC2 Instances using IMDSv1\n\n\ud83d\udd11 **Identifier** : `CDM0011`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0011%5D-EC2-Instances-using-IMDSv1)\n\n---\n\nDetection can be performed on logs using MetadataNoToken (Counts the number of times the Instance Metadata service was successfully access without a token (i.e., IMDSv1)). Other open sources tools may be used as well (Prowler Check 7.86, Metabadger or Cloudmapper). AWS CLI could also be used to list instances and filter on those using IMDSv1. Other AWS services may also be used to support, such as Security Hub or AWS Config, which can be setup to trigger alerts if IMDSv1 is present. \n",
                "\n### \ud83d\udee1\ufe0f EC2 Credential Exfiltration\n\n\ud83d\udd11 **Identifier** : `CDM0012`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0012%5D-EC2-Credential-Exfiltration)\n\n---\n\nIdentify when credentials exclusively used for an EC2 instance are being reused from another account. This scope may also be extended to identify when the credentials are trying to authenticate against different services that the role was not made to contact. IP addresses may also be used as a reference to check whether the API call is being initiated by another instance, reusing compromised credentials. Note that the scope of compromise can equally be within AWS or from the outside. \n",
                "\n### \ud83d\udee1\ufe0f External IMDS Requests\n\n\ud83d\udd11 **Identifier** : `CDM0013`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0013%5D-External-IMDS-Requests)\n\n---\n\nIMDS is exposed through an API which can be queried only from the endpoint, but v1 will not authenticate  what is making the call, and it will be accessible directly. Identify, using a combination of network logs and API call logs, unusual patterns of access which may be indicative of IMDS being queried by another actor, especially when combined with other web application exploitation alerts.  \n",
                "\n### \ud83d\udee1\ufe0f Compromised cloud accounts\n\n\ud83d\udd11 **Identifier** : `CDM0014`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0014%5D-Compromised-cloud-accounts)\n\n---\n\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account. Take particular care for impossible travels, but since adversary may use VPNs to evade it (see TVM0021) also track access patterns to identify. \n",
                "\n### \ud83d\udee1\ufe0f Cloud network plane lateral movement\n\n\ud83d\udd11 **Identifier** : `CDM0015`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0015%5D-Cloud-network-plane-lateral-movement)\n\n---\n\nDetect a high rate of unusual traffic flow from cloud instances to others and denied connections by the network security groups. Network reconnaissance techniques, such as port scanning, followed by connection attempts are likely conclusive of a lateral movement attempt in the network plane. Packet level inspection may improve remote service compromise attempts, and thus of attempt to move to another network location. Prioritize especially for movement from low to high security network planes, such as from a VPC to on premises.   \n",
                "\n### \ud83d\udee1\ufe0f Monitor Actions performed with recently assumed role\n\n\ud83d\udd11 **Identifier** : `CDM0016`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0016%5D-Monitor-Actions-performed-with-recently-assumed-role)\n\n---\n\nNewly added role may be indicative of privilege escalation leading to a lateral movement to other resources, with the  newly aquired privileges. Monitor when critical actions; such as resource creation, deletion, and data read to important resources are performed with assumed role, on instances that typically don't assume roles.  \n",
                "\n### \ud83d\udee1\ufe0f Monitor for Web Shell Attacks\n\n\ud83d\udd11 **Identifier** : `CDM0017`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0017%5D-Monitor-for-Web-Shell-Attacks)\n\n---\n\nSeveral strategies might be used:  ## anomalies in the type of method Web Shell traffic will differentiate from usual traffic by the amount of POST requests, instead of the usual GET. Identify potentially malicious traffic by filtering web server access logs to look for the highest POST traffic and then search for calls to URLs that include one of the common web shell file types (.php, .asp, .aspx, .jsp).  ## POST requests to static files Monitoring POST request to images or other static files could be an indication  ## anomalies in the size of request and response important standard deviation on bytes sent/received by the server for a given file might be an indication of web shells  ##unusual traffic to a file monitoring new uri_path or change in the frequency of access to an aur_path might indicate that an attacker has injected a malicious file into a target web server's directory and then try to execute that file from the web browser.  Host monitoring (file integretity checks) may still be useful to identify when a shell was uploaded to the web servers, and by monitoring for unusual and priviledged process spawning. \n",
                "\n### \ud83d\udee1\ufe0f Detect non-approved container image deployed\n\n\ud83d\udd11 **Identifier** : `CDM0018`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0018%5D-Detect-non-approved-container-image-deployed)\n\n---\n\nMonitor (for example in Sysdig) for images being deployed that do not  originate from the approved container image repositories. Any image  deployed this way needs to be thoroughly investigated.  Monitor for known-bad file hashes (images) being downloaded, or being  downloaded from known-bad IPs or domains (including shell scripts) Monitor for executable scripts being downloaded to a container Always monitor for unusual authentications to all types of systems/apps Monitor for deployment of remote shells and outbound network connectivity \n",
                "\n### \ud83d\udee1\ufe0f Detect Cryptominer running in container\n\n\ud83d\udd11 **Identifier** : `CDM0019`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0019%5D-Detect-Cryptominer-running-in-container)\n\n---\n\nDetection of a cryptominer can be achieved in many ways - through monitoring  for the presence of known atomic IOCs such as file hashes or DNS lookups or  IP addresses. Correlate connection and domain resolution attempts with known  cryptominer pools hostnames, IPs and ports. Detect stratum protocol  (stratum+tcp or stratum2+tcp) used by cryptominer pools in process command line  and environment variables.  Other ways are to monitor system resources utilization for  extended peaks, as some cryptominers hog everything.   One of the best and easiest ways to detect crypto mining is through monitoring the network for suspicious activity. To mine a cryptocurrency, it is necessary to communicate, receive new hashes and calculate them then return them to the servers and put them in the correct wallet. \n",
                "\n### \ud83d\udee1\ufe0f Changes in SSH authorized_key file\n\n\ud83d\udd11 **Identifier** : `CDM0020`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0020%5D-Changes-in-SSH-authorized_key-file)\n\n---\n\nThe Secure Shell (SSH) authorized_keys file specifies  which users are allowed to log into a server using public  key authentication. Adversaries may modify it to maintain  persistence on a victim host by adding their own public keys. Can be created an event category rule that monitors for  changes in authorized_keys values in SSH settings.  Monitor executed commands, changes or any suspisious  processes to modify the authorized_keys or  /etc/ssh/sshd_config files. \n",
                "\n### \ud83d\udee1\ufe0f Identify Emotet Trojan Artefacts\n\n\ud83d\udd11 **Identifier** : `CDM0021`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0021%5D-Identify-Emotet-Trojan-Artefacts)\n\n---\n\nSome registers in Windows can be scanned.  Possible scan tool: FRST scan The scanning tool have to research for the  following common IoCs that are related to  Emotet.  HKLM\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\1A345B7 HKLM\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\12C4567D  (Gornyk) C:\\Windows\\SysWOW64\\servicedcom.exe C:\\WINDOWS\\12345678.EXE C:\\WINDOWS\\SYSWOW64\\SERVERNV.EXE C:\\WINDOWS\\SYSWOW64\\NUMB3R2ANDL3373RS.EXE C:\\WINDOWS\\TEMP\\1A2B.TMP  One way to detect Emotet\u2019s obfuscated code is to look for a PowerShell process executing commands that use the format operator -f to concatenate strings. To further refine the analytic, you can also look for the format indexes {0} and {1}. \n",
                "\n### \ud83d\udee1\ufe0f Detection of IIS extensions quietly open persistent backdoors into servers\n\n\ud83d\udd11 **Identifier** : `CDM0022`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0022%5D-Detection-of-IIS-extensions-quietly-open-persistent-backdoors-into-servers)\n\n---\n\nThe atacker is installing an IIS backdoor to use it as a covert  channel to drop malware through it. An adversary install a custom  IIS backdoor called FinanceSvcModel.dll in the folder  C:\\inetpub\\wwwroot\\bin\\. The backdoor had built-in capability to perform Exchange management  operations, such as enumerating installed mailbox accounts and exporting  mailboxes for exfiltration, as detailed below:    Path of the backdoor: \"*.gif\" Handler: System.Web.owa  Microsoft Defender Antivirus detections:  Backdoor:MSIL/SuspIISModule.G!gen Backdoor:MSIL/SuspIISModule.H!gen Backdoor:MSIL/SuspIISModule.K!gen Backdoor:MSIL/OWAStealer.B Backdoor:MSIL/OWAStealer.C Behavior:Win32/SuspGacInstall.B  Detection on EDR level: Suspicious IIS AppCmd Usage  Suspicious IIS module registration:  DeviceProcessEvents | where ProcessCommandLine has \u201cappcmd.exe add module\u201d | where InitiatingProcessParentFileName == \u201cw3wp.exe\u201d  DeviceProcessEvents | where InitiatingProcessFileName == \u201cpowershell.exe\u201d |where ProcessCommandLine has \u201d system.enterpriseservices.internal.publish\u201d | where InitiatingProcessParentFileName == \u201cw3wp.exe\u201d   DeviceProcessEvents |where ProcessCommandLine has \u201d \\\\gacutil.exe /I\u201d | where InitiatingProcessParentFileName == \u201cw3wp.exe\u201d  Indicators of compromise HttpCompress.dll   4446f5fce13dd376ebcad8a78f057c0662880fdff7fe2b51706cb5a2253aa569  HttpSessionModule.dll 1d5681ff4e2bc0134981e1c62ce70506eb0b6619c27ae384552fe3bdc904205c  RewriterHttpModule.dll c5c39dd5c3c3253fffdd8fee796be3a9361f4bfa1e0341f021fba3dafcab9739  Microsoft.Exchange.HttpProxy.HttpUtilities.dll d820059577dde23e99d11056265e0abf626db9937fc56afde9b75223bf309eb0  HttpManageMoudle.dll 95721eedcf165cd74607f8a339d395b1234ff930408a46c37fa7822ddddceb80  IIS_backdoor.dll e352ebd81a0d50da9b7148cf14897d66fd894e88eda53e897baa77b3cc21bd8a  FinanceSvcModel.dll 5da41d312f1b4068afabb87e40ad6de211fa59513deb4b94148c0abde5ee3bd5  App_Web_system_web.ashx.dll 290f8c0ce754078e27be3ed2ee6eff95c4e10b71690e25bbcf452481a4e09b9d  App_Web_error.ashx.dll 2996064437621bfecd159a3f71166e8c6468225e1c0189238068118deeabaa3d \n",
                "\n### \ud83d\udee1\ufe0f SQL Commands in Web Request\n\n\ud83d\udd11 **Identifier** : `CDM0023`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0023%5D-SQL-Commands-in-Web-Request)\n\n---\n\nHTTP transaction would contain URL-encoded SQL fragments, corresponding to a query being done on the frontend. Encoding non-ASCII characters into the URL ensures that the HTTP request successfully crosses the internet. When the HTTP request arrives at the web server, the web application decodes the URL and processes the data.  By searching known malicious patterns of SQL statements, for example : 'UNION all SELECT encoded into %27%20UNION%20ALL%20SELECT , SQL injection may be revealed. \n",
                "\n### \ud83d\udee1\ufe0f Detect Suspicious Redirections in URL\n\n\ud83d\udd11 **Identifier** : `CDM0024`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0024%5D-Detect-Suspicious-Redirections-in-URL)\n\n---\n\n2023-05-01 This detction objective is cancelled.   Within EC this vulnerability is assessed (DIGIT S1 SA) low and will be handled under DIGIT S1 vulnerability management service.  Search for redirection and forward events keywords in the URL of web queries captured at the network level, which redirect to another website (since website often redirect users to another part of the website).  For example, detect a url query parameter in the url itself : http://example.com/example.php?url=http://malicious.example.com and parse the followup string to get the domain name. Other keywords include ?returnUrl, #https:// , ?fwd= ...  It is also possible to build a regex search which looks for domain name in every URL and then compares to the domain name of the application. Regex needs to be loose enough in case of C2 domains which may be randomized and unusual.  Narrow down searches to internal, sensitive URLs of web applications and avoid general aspecific traffic to the internet which may contain many expected redirections across many websites. \n",
                "\n### \ud83d\udee1\ufe0f Identify Path Traversal in Web Requests\n\n\ud83d\udd11 **Identifier** : `CDM0025`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0025%5D-Identify-Path-Traversal-in-Web-Requests)\n\n---\n\nAnalyze and alert on URLs containing \"dot-dot-slash\" sequences, or absolute path to critical resources.  \"../\" or \"..\\\" sequences are often percent encodded, and even double encoded (see : https://owasp.org/www-community/Double_Encoding), for example \"..\\\" may be represented as \"%2e%2e%5c\", \"%252e%252e%255c\" or \"..%255c\". As such, build searches which return  successions of dot, dot and back or forward slash, including all subvariations of URL encoding and double encoding.  Path traversal queries may not always contain dot-dot-slash sequences, for example : http://some_site.com.br/get-files?file=/etc/passwd. in that case, build a lookup of directories which should not be in userspace , for example /opt or /etc in *NIX OS, /windows for Windows server etc. \n",
                "\n### \ud83d\udee1\ufe0f Detect Confluence RCE (CVE-2021-26084)\n\n\ud83d\udd11 **Identifier** : `CDM0026`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0026%5D-Detect-Confluence-RCE-%28CVE-2021-26084%29)\n\n---\n\nTo detect exploitation, you should monitor all HTTP traffic requests where the path component of the request-URI contains one of the strings in the \u201cURI path\u201d column of the following table:   https://gist.github.com/zdi-team/acaee69c9c5bcbdc4ce590fcdb6170b5#file-cve-2021-26084-snippet-7-console  If such a request is found, you should inspect the HTTP request method. If the request method is POST, look for the respective vulnerable parameters from the table above in the body of the HTTP request, and if the request method is GET, you should look for the parameters in the request-URI of the HTTP request. Check to see if the value of any of the vulnerable parameters contains the string \"\\u0027\" or its URL-encoded form. If so, the traffic should be considered malicious and an attack exploiting this vulnerability is likely underway. \n",
                "\n### \ud83d\udee1\ufe0f Detect Abnormal Traffic to Web Servers\n\n\ud83d\udd11 **Identifier** : `CDM0027`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0027%5D-Detect-Abnormal-Traffic-to-Web-Servers)\n\n---\n\nIdentify clients generating large amount of HTTP errors, POST requests, protocol used, request headers and particularly for unusual clients : uncommon IP ranges, host names, OS, user agent etc.  Monitoring average traffic volumes and alerting if it deviates from expectation may also be particularly relevant, for example to identify DDoS types of attacks or data exfiltration. \n",
                "\n### \ud83d\udee1\ufe0f Monitor Web Vulnerability Scanner Behaviours\n\n\ud83d\udd11 **Identifier** : `CDM0028`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0028%5D-Monitor-Web-Vulnerability-Scanner-Behaviours)\n\n---\n\nCommon scanners can be identified by their user agents, which will mention in some string a recurring name, often belonging to a certain tool. Lists, such as https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/_generator_lists/bad-user-agents.list have been compiled with hundreds of signatures, allowing to build rules for known scanners. Similarly, threat intelligence can be used to compile IoCs of known domain names or IPs used as scanning endpoints. However, this may be fooled if the adversary modifies the user agent used by the scanner.  More complex detection approaches should complement signature based detection for modified open source scanners and other custom tools by focusing on common behaviours: detect when a client is crawling through the website (high frequency of successfull queries and/or http errors), making high amount of transactions and generating traffic,  while sending odd, malformed or obfuscated requests especially if they correspond to other malicious attacks. \n",
                "\n### \ud83d\udee1\ufe0f Obfuscated Query String in Web Request\n\n\ud83d\udd11 **Identifier** : `CDM0029`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0029%5D-Obfuscated-Query-String-in-Web-Request)\n\n---\n\nAnalyze if URL query string parameters contains distinct signs of obfuscation in order to thwart attack detection. Typical things to look for are large base64 strings, ...CHAR(n)+CHAR(n)... string used in SQL injections, successions of html, hex, octal or unicode escaped characters (\\144 is \"a\" in octal for example) and any combination of them.  A useful general approach is to embed a tranformation steps for the logs, where they'd be automatically decoded as well, allowing other rules to perform detection.  Be careful for leading zeros, for example the html encoding &#000000000058; can escape the filter for \":\" , which is used by a number of attacks, and can throw off the filter if it's not taking leading zeros in consideration.  Percent encoding is common, and web detections should percent decode by default, but since some web servers perform two round of decoding, some adversaries encode twice to evade detection and still have their query being read by the target. Alongside single encoding detection for percent encoded attacks, have a general rule for double encoded queries which are almost always malicious. You can also embed an  automation to double decode all logs, use both approaches to weigh in the threat criticality. \n",
                "\n### \ud83d\udee1\ufe0f Suspicious Requests URL\n\n\ud83d\udd11 **Identifier** : `CDM0030`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0030%5D-Suspicious-Requests-URL)\n\n---\n\nCertain part of the webservers should typically not be attempted to be reached by web clients.  Create a blocklist of administrative endpoints (/admin/index.php...), system keywords (conf, admin, localhost, console, webmin, php my admin...), that are typically reserved only for adminstrators, and alert on unexpected access to these resources.  \n",
                "\n### \ud83d\udee1\ufe0f Detect brute-force attacks against EULOGIN IdP\n\n\ud83d\udd11 **Identifier** : `CDM0031`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0031%5D-Detect-brute-force-attacks-against-EULOGIN-IdP)\n\n---\n\nIdentify clients generating large amount of failed EULOGIN login requests followed or not by a successful login. Detects successful/unsuccessful horizontal brute forces. Detects slow, successful/unsuccessful horizontal brute forces. Detects slow, successful/unsuccessful vertical bruteforces. Detects successful/unsuccessful vertical bruteforces \n",
                "\n### \ud83d\udee1\ufe0f (CVE-2020-0688) Confluence VIEWSTATE query parameter\n\n\ud83d\udd11 **Identifier** : `CDM0032`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0032%5D-%28CVE-2020-0688%29-Confluence-VIEWSTATE-query-parameter)\n\n---\n\nAs highlighted in TVM0054, a number of pages are targeted and the URL will contain the serialized payload. As a result, alert for queries on the /ecp/ root that contain a __VIEWSTATE query parameter followed by a large variable. __VIEWSTATE should never be part of a GET request and should be alerted when that's the case. \n",
                "\n### \ud83d\udee1\ufe0f XSS Payload in Web Request\n\n\ud83d\udd11 **Identifier** : `CDM0033`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0033%5D-XSS-Payload-in-Web-Request)\n\n---\n\nAdversaries will likely attempt multiple XSS injection to evade the different sanitization filters. They will likely combine different encoding strategies as described in CDM0030 . Focus on building a blocklist of known keywords indicative of an injection, such as <script>...</script> , ...=\"javascript:...\", alongside a large lookup of publicly available XSS vectors, likely to be used by scanners and opportunistic assaillants. There are many of these lists available in different places, such as : https://gist.github.com/kurobeats/9a613c9ab68914312cbb415134795b45, and should be combined in one. It's particularly relevant for web scanners, depending on how custom they are they might try to trigger the alert popup to feedback to the adversary if the XSS injection is possible and with which escape, before they add in their own script.  \n",
                "\n### \ud83d\udee1\ufe0f Detect creation of a new AWS Amplify website\n\n\ud83d\udd11 **Identifier** : `CDM0034`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0034%5D-Detect-creation-of-a-new-AWS-Amplify-website)\n\n---\n\nAny SOC will have to react to the creation of any amplify site, in order to  determine whether or not a valid business purpose or threat actor Activity lies behind the Amplify creation. It's advised to use email automation to inquire from registered contacts whether or not an actual business purpose or action was behind with a 24 or 48 deadline to react in case it was not,  and in case no valid business action/purpose can be identified, treat the  event/alert as a potential incident. \n",
                "\n### \ud83d\udee1\ufe0f Detect changes to existing AWS Amplify website\n\n\ud83d\udd11 **Identifier** : `CDM0035`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0035%5D-Detect-changes-to-existing-AWS-Amplify-website)\n\n---\n\nAny SOC will have to react to the modification of any amplify site, in order to  determine whether or not a valid business purpose or threat actor Activity lies behind the Amplify creation. It's advised to use email automation to inquire of registered contacts whether or not an actual business purpose or action was behind with a 24 or 48 deadline to react in case it was not,  and in case no valid business action/purpose can be identified, treat the  event/alert as a potential incident. Of course a 24/48 window would enable a threat actor to fully complete the attempted exfiltration, but very few SOCs will have the mandate to block a website if no approved pre-release ticket  exists. If a SOC has the mandate to restrict all access to the Amplify website following a change until analyzed, this would be more secure. \n",
                "\n### \ud83d\udee1\ufe0f Monitor User and Machine Active Directory Certificate Enrollments\n\n\ud83d\udd11 **Identifier** : `CDM0036`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0036%5D-Monitor-User-and-Machine-Active-Directory-Certificate-Enrollments)\n\n---\n\nFrom a blueteam perspective, several behaviors can be detected when  exploiting such attack path.  In addition, the interaction with the ADCS instance could be an interesting  way to detect Masky execution. The Certified Pre-Owned article describes  detection and preventive actions that could be applied on ADCS environment.  From the listed detection methods, the one referenced DETECT1 recommends to  monitor the users\u2019 certificates enrollement via the Event ID 4886  (\u201cCertificate Services received a certificate request\u201d) and their approval  via the Event ID 4887 (\u201cCertificate Services approved a certificate request  and issued a certificate\u201d).   Source: see references  https://z4ksec.github.io/posts/masky-release-v0.0.3/#detection-vectors \n",
                "\n### \ud83d\udee1\ufe0f CrackMapExec related artifacts on endpoints\n\n\ud83d\udd11 **Identifier** : `CDM0037`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0037%5D-CrackMapExec-related-artifacts-on-endpoints)\n\n---\n\nFor this detection, it's the goal to detect the presence of known hashes,  file names and download links for CrackMapExec(CME) and all of it's  modules. Find modules:  https://wiki.porchetta.industries/getting-started/using-modules Detect the presence of known hashes,  file names and download links for CrackMapExec(CME) and all of it's  modules. A lookup or watchlist will need to be created to store related artifacts. It is preferable to involve threat intelligence to validate if this process could be automated, as hash values would change frequently, and download location may change.  Find modules:  https://wiki.porchetta.industries/getting-started/using-modules https://pypi.org/project/crackmapexec/   Detection can occur during download when/if possible or upon detection of hashes, file names or relevant file meta data on disk. \n",
                "\n### \ud83d\udee1\ufe0f Traffic to customervoice.microsoft.com\n\n\ud83d\udd11 **Identifier** : `CDM0038`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0038%5D-Traffic-to-customervoice.microsoft.com)\n\n---\n\nAny outbound traffic to, or DNS requests looking up the subdomain of  Microsoft in question, customervoice.microsoft.com, can potentially be  an indicator of someone clicking on a phishing link in email or sent via other services to a user.   Useful artifacts to support rule creation:   - Endpoint HTTP Proxy   - Windows Netconn API   - HTTP Request Code 200   - HTTP Request code 302 \n",
                "\n### \ud83d\udee1\ufe0f Accepted AWS VPC peering requests\n\n\ud83d\udd11 **Identifier** : `CDM0039`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0039%5D-Accepted-AWS-VPC-peering-requests)\n\n---\n\nA VPC peering request is a request to connect one network (subnet) to  another on either specific IP to IP and specific port to port, but it can  also be much wider than that, opening all ports on all IP addresses between two networks.  VPC peering requests originating from inside own organization are expected but they are expected to be rare. Requests originating from outside own organization will be even rarer. However, the requests are harmless, unless they are accepted by the VPC administrator within own AWS account/VPC. Any  accepted VPC peering should be followed up by automation to ensure that the  operational team behind the VPC peering acceptance meant to accept this  peering and that this is not an illicit peering acceptance. \n",
                "\n### \ud83d\udee1\ufe0f Detect running container images with exploitable vulnerabilities\n\n\ud83d\udd11 **Identifier** : `CDM0040`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0040%5D-Detect-running-container-images-with-exploitable-vulnerabilities)\n\n---\n\nUse runtime scanner to analyze running container images to provide full security coverage  for Kubernetes clusters and Docker hosts as scanning just registries may not catch containers deployed from other sources. \n",
                "\n### \ud83d\udee1\ufe0f Windows environment lateral movement via SMB protocol\n\n\ud83d\udd11 **Identifier** : `CDM0041`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0041%5D-Windows-environment-lateral-movement-via-SMB-protocol)\n\n---\n\nExample guidelines found below. This is not necessarily the only way to achieve remote code execution via SMB. Add further guidelines as  needed, when/as relevant.  Source for below guidelines:  https://z4ksec.github.io/posts/masky-release-v0.0.3/#detection-vectors First of all, Masky heavily relies on the SMB protocol to execute remote  code on the target, but also to deploy the agent and retrieves the results.  Offensive tools relying on this protocol typically interact with three  shares: C$, ADMIN$ and IPC$. Wherever the C$ and ADMIN$ shares are mounted  as local administrator and are used to push or retrieve files, the IPC$ is  related to the usage of named pipes exposed by the remote system. It  basically allows to interact with the features exposed on the target  through legitimate protocols. Indeed, the DCERPC protocol allows, as it  names suggest, to call remote procedures allowing for example to create  services (via \\pipe\\svcctl) or scheduled tasks (via \\pipe\\atsvc). I  strongly recommend diving into Impacket source code and especially their  example scripts to understand how it works (smbexec.py, atexec.py, etc.).  From this information, the following Windows event log IDs can be  collected on your SIEM to create detection rules for such remote code  execution over SMB:  4698: A schedule task was created; 4699: A schedule task was deleted; 4702: A schedule task was updated; 7045: A new service was created; 5145: A network share object (file or folder) was accessed.  The use of service or schedule tasks in a short period of time (e.g.  creation, modification or deletion) could be an interesting weak signal to correlate with administrative shares interactions (C$ / ADMIN$), as well as the IPC$ special share. Indeed, this could be a sign of the use of such lateral movement techniques. False positives can occur based on these rules depending on the administration tools used through the  corporate LAN (e.g. PSEXEC). To go deeper in such detection, rules can be combined to identify the spawning of suspicious lolbins, unsigned  binaries or commonly executed recognition commands (e.g. whoami, net  user, etc.) from the process tree of the schtasks.exe (schedule tasks)  or winexesvc.exe (services) processes. \n",
                "\n### \ud83d\udee1\ufe0f Sentinel connector impaired\n\n\ud83d\udd11 **Identifier** : `CDM0042`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0042%5D-Sentinel-connector-impaired)\n\n---\n\nAny true positive of an alert from a MDR built from this CDM would mean that an attacker has control of credentials/service principal required to  disconnect, delete or update a sentinel connector.   Detections should utilize the SentinelHealth table and catch all of the  actions 'delete' 'disconnect' 'update'.  Search example for this provided: let lastestStatus = SentinelHealth where TimeGenerated > ago(5m) where OperationName == 'Data fetch status change' where Status in ('Success', 'Failure') project TimeGenerated, SentinelResourceName, SentinelResourceId, LastStatus = Status summarize TimeGenerated = arg_max(TimeGenerated,*) by SentinelResourceName, SentinelResourceId; let nextToLastestStatus = SentinelHealth | where TimeGenerated > ago(5m) | where OperationName == 'Data fetch status change' | where Status in ('Success', 'Failure') | join kind = leftanti (lastestStatus) on SentinelResourceName, SentinelResourceId, TimeGenerated | project TimeGenerated, SentinelResourceName, SentinelResourceId, NextToLastStatus = Status | summarize TimeGenerated = arg_max(TimeGenerated,*) by SentinelResourceName, SentinelResourceId;   lastestStatus | join kind=inner (nextToLastestStatus) on SentinelResourceName, SentinelResourceId | where NextToLastStatus == 'Success' and LastStatus == 'Failure'  another example provided: AzureActivity | where OperationNameValue contains \"MICROSOFT.SECURITYINSIGHTS/DATACONNECTORS/DISCONNECT/ACTION\"  or OperationNameValue contains \"MICROSOFT.SECURITYINSIGHTS/DATACONNECTORS/DELETE/ACTION\"  or OperationNameValue contains \"MICROSOFT.SECURITYINSIGHTS/DATACONNECTORS/UPDATE/ACTION\"  and for custom sentinel connectors separate searches in the tables of the  custom connectors are needed: Custom_Connector_table_name | where TimeGenerated > ago(45m) where 45m is the interval with which you receive log data for a specific  custom connector \n",
                "\n### \ud83d\udee1\ufe0f Detection for duplication of access token in a new process to elevate privileges\n\n\ud83d\udd11 **Identifier** : `CDM0043`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0043%5D-Detection-for-duplication-of-access-token-in-a-new-process-to-elevate-privileges)\n\n---\n\nThreat actors can create a new access token with the duplication token function DuplicateToken(Ex) and after that to use another function -  'CreateProcessWithTokenW' to create a new process running under the security context of a different user. This technique is used for impersonation purposes.  The function CreateProcessWithTokenW is related to the process winbase.h The process that calls CreateProcessWithTokenW must have the SE_IMPERSONATE_NAME  privilege.  The following code can be used to steal the token with open of a new process: #include \"stdafx.h\"#include #include int main(int argc, char * argv[]) {char a;HANDLE processHandle;HANDLE tokenHandle = NULL;HANDLE duplicateTokenHandle = NULL;STARTUPINFO startupInfo;PROCESS_INFORMATION processInformation;DWORD PID_TO_IMPERSONATE = 3060;wchar_t cmdline[] = L\"C:\\\\shell.cmd\";ZeroMemory(&startupInfo, sizeof(STARTUPINFO));ZeroMemory(&processInformation, sizeof(PROCESS_INFORMATION));startupInfo.cb = sizeof(STARTUPINFO);        processHandle = OpenProcess(PROCESS_ALL_ACCESS, true, PID_TO_IMPERSONATE);OpenProcessToken(processHandle, TOKEN_ALL_ACCESS, &tokenHandle);DuplicateTokenEx(tokenHandle, TOKEN_ALL_ACCESS, NULL, SecurityImpersonation, TokenPrimary, &duplicateTokenHandle);                        CreateProcessWithTokenW(duplicateTokenHandle, LOGON_WITH_PROFILE, NULL, cmdline, 0, NULL, NULL, &startupInfo, &processInformation);std::cin >> a;    return 0;}   Detection objectives:   Create a rule to monitor if the following API calls are executed:  - OpenProcess() - OpenProcessToken() - ImpersonateLoggedOnUser() - DuplicateTokenEx() - CreateProcessWithTokenW()  Monitor for running CreateProcessAsUser or CreateProcessWithLogonW functions.  Monitor for executed processes (for example winbase.h) that may modify access  tokens to operate under a different user or system security context to perform  actions and bypass access controls.  Monitor for executed process like securitybaseapi.h which is related to the  function DuplicateTokenEx and can craete a new access token.  Detection objectives based on SACL bypass, manipulated with NtObjectManager.  NtObjectManager is a module in PowerShell that can access NT object manager  namespace and can be installed with Install-Module option. The detection is able to get alerts when winlogon.exe is accessed with specific access rights defined in SACL (Security Access Control List)  auditpol /set /category:\"Object Access\" /success:enable /failure:enable $p = Get-NtProcess -name winlogon.exe -Access GenericAll,AccessSystemSecurity Set-NtSecurityDescriptor $p \u201cS:(AU;SAFA;0x1400;;;WD)\u201d Sacl  To steal an access token from a SYSTEM process the BUILTIN\\Administrator  must be the TokenOwner to perform OpenProcessToken() for a process.  Monitor for OpenProcess() with the PROCESS_QUERY_LIMITED_INFORMATION  access right against SYSTEM processes protected by Protected Process Light (PPL)  If (Event ID) 4656 (Task category: Kernal Object) is gerenated this may indicate  the process that request access and access rights requested. This potentially could be an indicator for process query information. \n",
                "\n### \ud83d\udee1\ufe0f Azure Microsoft.GuestConfiguration resource provider registration\n\n\ud83d\udd11 **Identifier** : `CDM0044`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0044%5D-Azure-Microsoft.GuestConfiguration-resource-provider-registration)\n\n---\n\nAn Azure resource provider is a collection of REST operations that provide  functionality for an Azure service. For example, the Key Vault service  consists of a resource provider named Microsoft.KeyVault. The resource  provider defines REST operations for working with vaults, secrets, keys,  and certificates. (Source: Microsoft link in references).   The Microsoft.GuestConfiguration resource provider is a pre-requisite for  the steps needed to implementing persistence using the Azure Microsoft Policy remediations, see the cloudbrothers.info reference.   When Azure Defender for Cloud is in use, the Microsoft.GuestConfiguration  resource provider is automatically registered, in which case the detection  will not be very useful. When Azure Defender for Cloud is not in place, a  detection for this CDM can yield information that a threat actor is  pursuing persistence, but can also be false positive prone, as example due  to activation of Azure Defender for Cloud.   Any automation involving democratization of security, such as emails or  social media messages to involved users need to contain enough context to explain clearly which actions taken by a user could have led to  registration of the Microsoft.GuestConfiguration resource provider. \n",
                "\n### \ud83d\udee1\ufe0f Detection of Linux kernel module loading\n\n\ud83d\udd11 **Identifier** : `CDM0045`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0045%5D-Detection-of-Linux-kernel-module-loading)\n\n---\n\nMonitor the Linux host for kernel module load attempts by monitoring insmod command execution or processes using init_module syscall. By default Linux  system does not log module load events. Auditing needs to be performed by  external tool like auditd. Detectecion can be performed with Falco or  Tracee. \n",
                "\n### \ud83d\udee1\ufe0f VPC peering requests received from inside own AWS organization\n\n\ud83d\udd11 **Identifier** : `CDM0046`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0046%5D-VPC-peering-requests-received-from-inside-own-AWS-organization)\n\n---\n\nA VPC peering request is a request to connect one network (subnet) to  another on either specific IP to IP and specific port to port, but it can  also be much wider than that, opening all ports on all IP addresses between two networks.  VPC peering requests originating from inside own organization are expected but they are expected to be rare. Each such request should be tracked down  with the operational team behind using automation to ask for confirmation  that the VPC peering request was expected behaviour and is not malicious. \n",
                "\n### \ud83d\udee1\ufe0f Detect Container Breakout Exploit via runc vulnerablity\n\n\ud83d\udd11 **Identifier** : `CDM0047`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0047%5D-Detect-Container-Breakout-Exploit-via-runc-vulnerablity)\n\n---\n\nDetect linking and writing to /proc/self/exe \n",
                "\n### \ud83d\udee1\ufe0f Detect secrets embedded in container images\n\n\ud83d\udd11 **Identifier** : `CDM0048`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0048%5D-Detect-secrets-embedded-in-container-images)\n\n---\n\nDetection may be possible by using a regular expression engine with set of  rules to detect credentials and sensitive configuration data embedded into  container images.   Perform scans on images in CI/CD pipelines, on source code repositories,  container registries and on running containers.  \n",
                "\n### \ud83d\udee1\ufe0f Public AWS S3 bucket\n\n\ud83d\udd11 **Identifier** : `CDM0049`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0049%5D-Public-AWS-S3-bucket)\n\n---\n\nDetect changes to S3 buckets that make either files or whole buckets publicly accessible.  Detections should catch buckets that my accidentally be exposed online using for example canary tokens.  Additionally, all buckets within an AWS organization should be continuously scanned to detect publicly accessible buckets and files. \n",
                "\n### \ud83d\udee1\ufe0f DNS activity related to potential malicious server\n\n\ud83d\udd11 **Identifier** : `CDM0050`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0050%5D-DNS-activity-related-to-potential-malicious-server)\n\n---\n\nThe objective is 2-fold: - To detect a DNS resolution from a server for a new FQDN not seen before from that server or at coporate level. This could be a  sign for example of drive-by-download when followed by few TCP or UDP  requests or command&control traffic when regular traffic occurs over time between internal server and external resource.   - To detect a series of DNS queries that could be a sign of tunneling command&control (beaconing) or exfiltration over DNS.  Detection on DNS resolution might be a weak signal that would need to be cross-correlated with information from passive DNS databases (age of the hostname, resolved IPs) and the reputation of both hostnames and IPs  (MISP, virustotal, RiskIQ) \n",
                "\n### \ud83d\udee1\ufe0f TCP or UDP outbound traffic to an unusual destination or port\n\n\ud83d\udd11 **Identifier** : `CDM0051`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0051%5D-TCP-or-UDP-outbound-traffic-to-an-unusual-destination-or-port)\n\n---\n\nThe objective is to detect outbound connection attempts from servers to  unusual external resources or on unusual port .  Check any outbound connection attempts (src ports > 1024)  and destination port is unique for the destination IPs over the attempts \n",
                "\n### \ud83d\udee1\ufe0f Customervoice.microsoft.com link in email or other message history\n\n\ud83d\udd11 **Identifier** : `CDM0052`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0052%5D-Customervoice.microsoft.com-link-in-email-or-other-message-history)\n\n---\n\nAny email or messaging history mentioning in any way the subdomain  customervoice.microsoft.com can be an indicator that a phishing campaign is ongoing, and could lead to IOCs that could result in new proxy blocks, or  new detections being built.   \n",
                "\n### \ud83d\udee1\ufe0f Honeytoken accessed from private AWS S3 bucket\n\n\ud83d\udd11 **Identifier** : `CDM0053`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0053%5D-Honeytoken-accessed-from-private-AWS-S3-bucket)\n\n---\n\nThe goal of this detection objective is to use honeytokens to detect  abnormal activity in AWS S3 buckets.   Several types of honeytokens can be deployed into S3 buckets, as example using the Thinkst Canary canary.tools service:  One option is to set up honeytokens and upload on the bucket  embedded in a word file as a macro, or as credentials in a kubeconfig file, or a script containing a fake AWS key, and then wait for an attacker to open  the uploaded file or try to use the discovered 'AWS credential' to see what  can access.  Another option is to use a honeytoken that will alert even on someone listing a booby-trapped file in an S3 bucket.  Monitor for at least these 2 honeytoken alerts, but others can be valid also/instead  depending on your implementation: 1. An AWS API Key Canarytoken was triggered by 2. A MS Word Document Canarytoken was triggered by \n",
                "\n### \ud83d\udee1\ufe0f Azure infrastructure modifications to a different resource group\n\n\ud83d\udd11 **Identifier** : `CDM0054`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0054%5D-Azure-infrastructure-modifications-to-a-different-resource-group)\n\n---\n\nAzure CLI has a wide reach, and can be used from any deployed compute resource in Azure. In general, it would be expected that operational teams use the Azure CLI to perform tasks within a relevant resource group in  Azure, whereas activities performed between resource groups can be an  indicator of abnormal behaviour.   becomes available. Until then, the goal is to detect any change done from  the Azure CLI into another resource group.   As part of building detections, it is important to retrosearch in order to  baseline any already-existing false positives.  \n",
                "\n### \ud83d\udee1\ufe0f Changes in Azure to Microsoft Policy Remediations\n\n\ud83d\udd11 **Identifier** : `CDM0055`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0055%5D-Changes-in-Azure-to-Microsoft-Policy-Remediations)\n\n---\n\nDetection of threat actor persistence efforts through Azure Automated  Machine Configurations can be done by detecting any changes to Azure Policy that implements remediations.  Remediations can be deployed either on a resource group or for single VMs,  or any combinations of resource groups and machines as detailed in the  Azure Policy scope.  Any deployed remediation will need to be investigated with the teams  involved.  \n",
                "\n### \ud83d\udee1\ufe0f Detect protocol DDoS\n\n\ud83d\udd11 **Identifier** : `CDM0056`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0056%5D-Detect-protocol-DDoS)\n\n---\n\nProtocol attacks look to exhaust resources of a server or those of its  networking systems like firewalls, routing engines, or load-balancers. An example of a protocol attack is the SYN flood attack.Before two  computers can initiate a secure communication channel,they must perform a TCP handshake.A TCP handshake is a means for two parties to exchange  preliminary information. A SYN packet is typicall the first step of the TCP handshake, indicating to the server that the  client wants to start a new channel. In a SYN flood attack, the attacker floods the server with numerous SYN packets, each containing spoofed IP addresses. The server responds to each packet (via SYN-ACKs), requesting the client to complete the handshake.However,  the client(s) never respond, and the server keeps waiting. Eventually, it crashes after waiting too long for too many responses. \n",
                "\n### \ud83d\udee1\ufe0f Detect use of msiexec to establish remote connection over http(s)\n\n\ud83d\udd11 **Identifier** : `CDM0057`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0057%5D-Detect-use-of-msiexec-to-establish-remote-connection-over-http%28s%29)\n\n---\n\nThe objective is to detect remote connection over http(s) by using msiexec.exe  to call out to its infrastructure, often compromised QNAP devices,  using HTTP requests that contain a victim\u2019s user and device names.     Verify that the domain reach is indeed malicious and focus on the proxy logs  if allowed actions has been seen. \n",
                "\n### \ud83d\udee1\ufe0f SMB connection attempt to unusual or external SMB share\n\n\ud83d\udd11 **Identifier** : `CDM0058`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0058%5D-SMB-connection-attempt-to-unusual-or-external-SMB-share)\n\n---\n\nUsing various threat vectors, attacker may trigger a connection to a network share  on a SMB or WebDav server under their control.    The objective is to detect SMB network share connection attempts  (failure or success) at network level.  ### monitor UNC path pointing to external SMB network shares  In network traffic or proxy logs,   - look for connection to standard SMB port   - check Microsoft standard using agents: they contain the string WebDav   - if plain http, inspect http header to find \"Authorization: NTLM\" string.  \n",
                "\n### \ud83d\udee1\ufe0f SSH access attempt to C3 ESXi console\n\n\ud83d\udd11 **Identifier** : `CDM0059`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0059%5D-SSH-access-attempt-to-C3-ESXi-console)\n\n---\n\nDIGIT C3 has set a policy to have SSH service disabled on ESXi servers. detecting a successful SSH session on an ESXi plateform has to be reported and investigated  This detection objective may also report on failed session attempts as  this indicates that the SSH service is running. \n",
                "\n### \ud83d\udee1\ufe0f unusual SSH connections on server\n\n\ud83d\udd11 **Identifier** : `CDM0060`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0060%5D-unusual-SSH-connections-on-server)\n\n---\n\nSSH sessions between stations and servers or between non-management servers and servers should not occured at EC data centres. Such SSH sessions have to be handled under DIGIT PAM service.  If such session are initiated by accounts under control of system admin  persons (they belong to specific cudgroup), there should be no alert as  those scenarios are covered by MDR under [BDR003] DIGIT C3 PAM service  - access policy for SSH sessions \n",
                "\n### \ud83d\udee1\ufe0f Hashicorp vault admin connects from unexpected clients\n\n\ud83d\udd11 **Identifier** : `CDM0061`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0061%5D-Hashicorp-vault-admin-connects-from-unexpected-clients)\n\n---\n\nHashicorp Vault platform is used to deliverr SAM service at EC.  Privileged vault admin accounts have root access to the platform and they can perform all operations on it.   A policy has been set to prevent vault admin to read secrets stored on namespaces. This is covered by another CDM.  A vault admin must access Hashicorp vault admin console from PAM service. \n",
                "\n### \ud83d\udee1\ufe0f Hashicorp vault admin reads secrets\n\n\ud83d\udd11 **Identifier** : `CDM0062`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0062%5D-Hashicorp-vault-admin-reads-secrets)\n\n---\n\nHashicorp Vault platform is used to deliverr SAM service at EC.  A policy has been set to prevent vault admin from reading secrets stored on namespaces. Vault admins are allowed to list secrets but not to read their values.  A vault admin can modifiy this policy in order to get read rights on secrets. The objective is to detect whenever a vault admin reads a secrets.  All operations on Hashicorp Vault are recorded in audit logs and those logs collected on the SIEM  \n",
                "\n### \ud83d\udee1\ufe0f Detect changes to repository visibility\n\n\ud83d\udd11 **Identifier** : `CDM0063`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0063%5D-Detect-changes-to-repository-visibility)\n\n---\n\nPrivate repositories should not be exposed to the public. Detecting involves monitoring for changes to the repository visibility settings. Alerting can be achieved  by monitoring  the relevant SCM platform audit logs for events and changes in the visibility parameters or for an event with such description.  - For Bitbucket: repo:updated: This event is triggered when a repository is updated, and includes  information about the repository, including its visibility.   Looking for changes to the is_private field to detect changes in visibility.  - For GitLab: ProjectChangeVisibilityEvent: This event is triggered when the visibility of a project changes.  Looking for changes to the visibility_level field to detect changes in visibility.  - For GitHub: \"publicized\" or \"privatized\" actions in the RepositoryEvent:  These events are triggered when a repository's visibility is changed from private to public, or vice versa. Searching for these events in the action field of the event payload. \n",
                "\n### \ud83d\udee1\ufe0f Changes in the build plan\n\n\ud83d\udd11 **Identifier** : `CDM0064`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0064%5D-Changes-in-the-build-plan)\n\n---\n\nDetection of an change to the branch protection configuration is possible by setting up monitoring and alerting on the SCM platform audit logs. Audit logs should include records of this activity  Some of the relevant audit events which might indicate such activity are:  For Bamboo: entity_type: This defines if this log was for a system setting, Null (for Global audit entries), DeploymentProject, Plan, or ImageConfig (for Elastic Images) field_header: A description of the field that is being changed msg: A description of the change that is taking place new_value:\tThe new value that caused the Log to be taken old_value:\tThe value before the change  By monitoring these audit events, you can detect when a build plan is changed, and take appropriate action to ensure that your build process is secure and reliable.  All audit logs from the SCM / CI/CD platforms should be collected and stored in SIEM. \n",
                "\n### \ud83d\udee1\ufe0f Detect modified branch protection\n\n\ud83d\udd11 **Identifier** : `CDM0065`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0065%5D-Detect-modified-branch-protection)\n\n---\n\nBranch protection rules are in place as a safety mechanism for accidental or intentional deployment of bad code to repositories.  Detection of an change to the branch protection configuration is possible by setting up monitoring and alerting on the SCM platform audit logs. Audit logs should include records of this activity  **For Bitbucket** - Project branch model created (ProjectBranchModelConfigurationCreatedEvent) - Project branch model deleted (ProjectBranchModelConfigurationDeletedEvent) - Project branch model updated (ProjectBranchModelConfigurationUpdatedEvent) - Project branch permission added (ProjectRefRestrictionAddedEvent) - Project branch permission deleted (ProjectRefRestrictionDeletedEvent) - Project branch permission updated (ProjectRefRestrictionUpdatedEvent)  **For Gitlab** - \"Changed protected branch\" : Triggered when branch protection is changed on a branch. - \"Removed protected branch\" : Triggered when branch protection is removed on a branch  **For Github** - \"protected_branch\" category actions: - \"policy_override\": Triggered when a branch protection requirement is overridden by a repository administrator. - \"destroy\" : Triggered when branch protection is disabled on a branch. - \"update_require_code_owner_review\" : Triggered when enforcement of required Code Owner review is updated on a branch.  All audit logs from the SCM platforms should be collected and stored in a SIEM. \n",
                "\n### \ud83d\udee1\ufe0f Detect non-authorized access to security or network appliances\n\n\ud83d\udd11 **Identifier** : `CDM0066`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0066%5D-Detect-non-authorized-access-to-security-or-network-appliances)\n\n---\n\n### Detect unauthorised access to out-of-band management interface To use this strategy, review the architecture and logical network design of the out-of-band management segment together with the sysadmin team. Ensure the proper logs are collected to suppot the following strategies.    #### Deviation from defined procedures or baseline This strategy relies on processing any defined secops procedures (who can  connect from where, when to do actions) or observed baseline over 1+ month  of activity.    Then detection rules can be built using reference list of source hosts/Ips,  accounts and/or actions.    This approach is based on deviation from known states. It is prone to False  Positive (when a new sysadmin account is created, when a source host  changes, etc.) or **False Negative** (if sysadmins are allowed to use  their regular station (not a Privileged Access Workstation dedicated for  sysadmin tasks) to connect directly to management interface/console and  the workstation has been compromised).  ### Detect unauthorised access or activity from inline interfaces  Security or Network appliances deliver network services to protect the  infrastructue. Therefore they have network interfaces processing the  traffic and they can be targeted via those \"Internet-facing\" interfaces. This applies also to appliancees which are not on front layer (i.e.  directly connected to ISP router), but to any appliance that will process IP packets received from Internet for example up to Reverse  Proxies or Web Application Firewalls (typically after a RPS or a WAF inspection a layer 7 has taken place and new sessions are establised  between RPS and Web servers.)  #### Unusual source or request sent to network appliance itself. This is mainly applicable to appliances which have a web-based management  interface.    If such interface is misconfigured (human error, or left over  after troubleshooting with vendor's experts over direct remote sessions) or not well protected, it can be exposed to Internet clients.    Reviewing vulnerability scanner results (either from the company team or public ones such as shodan, etc.) may help to identify such exposed accesses.  Even if well configured, identifying new URL path might be an indication of webshell attack (sucessful or attempts) and/or a Zero-day vulnerability  identified on the products.  ### network activity without valid account authentication Activity towards the appliance is observed towards resources that require  prior authentication either without account or with an account but there is  no valid authentication sequence related.  #### Change of configuration files Monitoring audit logs may reveal changes on configuration which are out of regular procedures. \n",
                "\n### \ud83d\udee1\ufe0f Disabling or modifying security tools\n\n\ud83d\udd11 **Identifier** : `CDM0067`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0067%5D-Disabling-or-modifying-security-tools)\n\n---\n\nMonitor audit or security logs for any changes aiming to disable or modify the audit policy, the generation or the collection of  activity, security, or audit logs.  **AWS** Monitor for: - the API calls to disable logging. - StopLogging and DeleteTrail actions.  **on compute resources or devices** Monitor processes and command-line arguments  to see if security tools/services are killed or stop running.    Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Monitoring for changes to other known features used by deployed security tools may also expose malicious activity. Lack of expected log events may be suspicious. \n",
                "\n### \ud83d\udee1\ufe0f Detect fake SSL certificates\n\n\ud83d\udd11 **Identifier** : `CDM0068`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0068%5D-Detect-fake-SSL-certificates)\n\n---\n\nAn attacker will performs an SSL MITM attack to decrypt the HTTPS traffic. The attacker will achieve decryption by creating spoofed certificates when the device requests it from an HTTPS webpage. If the user visits any website with HTTPS via a web browser on the same network, they will see a \"connection is not secure \" warning in the browser.   \n",
                "\n### \ud83d\udee1\ufe0f Detect non-authorized access to endpoint management appliances\n\n\ud83d\udd11 **Identifier** : `CDM0069`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0069%5D-Detect-non-authorized-access-to-endpoint-management-appliances)\n\n---\n\nEndpoint management appliances are critical devices for an organisation.    They are usually placed behind reverse proxy (RPS) and web application  firewalls (WAF). Whenever possible authentication should be managed with an identity provider service like EU LOGIN with multi-factor authentication.  When behind RPS/WAF enhanced monitoring should be in place to detect unusual request, sessions or beacons.  Management should be done from Out-of-Band network segmanet and dedicated management console.    When the appliances need to receive requests from clients over Internet, monitoring should be in place to detect bypass of preventative measures or  use of (**0-day**) unpatched vulnerabilities.    Detection strategies can be based on indicators of attack (pattern on  the URL requests), on unusual or first seen new client (geolocation, new  account, etc.) \n",
                "\n### \ud83d\udee1\ufe0f Script interpreters launched via office applications\n\n\ud83d\udd11 **Identifier** : `CDM0070`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0070%5D-Script-interpreters-launched-via-office-applications)\n\n---\n\nMonitoring script interpreters launched with an Mirosoft Office application as parent process \n",
                "\n### \ud83d\udee1\ufe0f LOLBins Execution Related to Accounts or Group Discovery\n\n\ud83d\udd11 **Identifier** : `CDM0071`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0071%5D-LOLBins-Execution-Related-to-Accounts-or-Group-Discovery)\n\n---\n\nDetect execution of LOLBins related to discovery (or reconnaissance) on endpoints.  The detection approaches can target successive execution in a short period of time on an endpoint, or a large amount of varied execution across a larger timeframe. LOLBins are mostly going to be executed over the command line and spawn processes. Command line arguments for known discovery usage are also a good way to identify LOLBins being executed.  - LOLBins for Windows can be found on the [LOLBAS Project](https://lolbas-project.github.io/) - LOLBins for Unix based systems can be found on the [GTFOBins Project](https://gtfobins.github.io/) - LOLBins leave traces in command line execution logs, and process events \n",
                "\n### \ud83d\udee1\ufe0f Outbound HTTP Proxy traffic from user endpoint towards suspicious site\n\n\ud83d\udd11 **Identifier** : `CDM0072`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0072%5D-Outbound-HTTP-Proxy-traffic-from-user-endpoint-towards-suspicious-site)\n\n---\n\nThe objective is to detect successful outbound HTTP proxy traffic from users'  endpoints to domains/URLs marked as malicious by sandboxing sensors, Threat Intelligence teams via MISP for example or by 3rd-party solutions.  In case the IoC is running a credential harvesting page (as for example targeting Microsoft and other email login credentials), verify is there any successful POST request in user's proxy logs.      Check if from a single user endpoint is having frequent outbound connections to a  suspicious URL, it can be an indicator of some malicious component installed on the endpoint, trying to reach outside to communicate with a C2 server. \n",
                "\n### \ud83d\udee1\ufe0f Spyware app detected on mobile device\n\n\ud83d\udd11 **Identifier** : `CDM0073`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0073%5D-Spyware-app-detected-on-mobile-device)\n\n---\n\n## Apps installed outside official stores app:    ### Android. When a user downloads and installs an app outside of Google Playstore, it should be detected by MTD as a Sideloaded Android app.    The Installer source field in the RAW event will show what package installer was used to install the app, for example: - installer=com.android.vending - app installed via Google Playstore. - installer=null - system app, or app installed via ADB (Android Debug Bridge) - installer=com.google.android.packageinstaller - app downloaded from a 3rdparty   website (e.g. apkpure.com ), or app installed via MDM solution.  ### iOS. When a user sideloads an iOS app then the app should be detected as soon as the user trusts the app from the developer in the Settings > General > Profiles menu, for example: - User downloaded and installed few apps via Third-party iOS App Store TweakBox (www[.]tweakboxapp[.]com) and trusts the app developer.   ## Devices with vulnerable OS version: These devices can be targeted to exploit zero-click vulnerabilities, including atypical Drive-By  downloads as initial infection vectors.    Apps are usually masqueraded as ISP or messaging apps.    Any MTD solution must have related signatures to alert on this (via Jailbreaking detection on iOS,  or via Unknown sources enabled on Android).    It is possible to find out if a device running a vulnerable Android or iOS version is being monitored: - Unexpected battery drain, overheating, and strange behavior from the device OS or apps. - Settings such as GPS and location functions may unexpectedly turn on or random reboots.  - If device is suddenly using far more data than normal, this could be an indication   that information is being sent from or remote connections are active.   Some actions to mitigate the risk of being subject to such surveillance:     - Reboots: Reboot the device to prevent persistence from taking hold. Some infections   have appeared to be based on zero-day exploits with low persistence. - Disable iMessage and FaceTime (iOS): A number of new Safari and iMessage exploits   have been developed in recent years.  - Use an alternative browser other than Safari or default Chrome. Some exploits do   not work well on alternatives such as Firefox Focus.  \n",
                "\n### \ud83d\udee1\ufe0f Abnormal Scheduled Tasks Activity on Windows\n\n\ud83d\udd11 **Identifier** : `CDM0074`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0074%5D-Abnormal-Scheduled-Tasks-Activity-on-Windows)\n\n---\n\nMonitor non-legitimate or unknown Scheduled Tasks on Windows hosts (AD, Server, WKS)    The strategies should encompass all the ways described in TVMs to create schedule task  (outcome of the threat vector is a schedule task) using executable like powershell.exe  (New-ScheduledTaskAction), schtasks.exe, at.exe, Task Scheduler Service, taskhostw.exe,  WMI, etc..    The detection relies on a baseline done with a proactive assessment of what is normal,  research with system admins what are the defined (automated) processes and authorised  accounts/groups.    There might be distinct MDRs to reflect detection within maintenance windows (or working  hours) and out-of-band creation of scheduled tasks as the severity might be different even for what is normal (excluded) during maintenance windows/defined processes.    The alert notification should clearly state which course of action has led to a schedule task (this should in fine point to one of the TVMs mentioned in the CDM). \n",
                "\n### \ud83d\udee1\ufe0f Hashicorp vault admin changes policy\n\n\ud83d\udd11 **Identifier** : `CDM0075`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0075%5D-Hashicorp-vault-admin-changes-policy)\n\n---\n\nHashicorp Vault platform is used to deliver the \u200b\u200b\u200b**S**ecure **A**ccess  **M**anagement (SAM) service at EC.    Policies are defined by vault administrators in compliance with the  terms of service.  **The objective is to detect whenever a vault administrator changes a policy on the vault and to notify the group functional mailbox.**    All operations on Hashicorp Vault are recorded in audit logs and those logs are collected on the SIEM. \n",
                "\n### \ud83d\udee1\ufe0f Detect ransomware running on devices\n\n\ud83d\udd11 **Identifier** : `CDM0076`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0076%5D-Detect-ransomware-running-on-devices)\n\n---\n\nThere are different ways to detect Ransomware, either through tools such as EDR,  network traffic analysis, event log monitoring, and the implementation of  detection strategies based on signatures, heuristics and anomalous behaviours.    Some of the strategies for detecting Ransomware include the following:  ### 1. Process monitoring:  Ransomware may be detected through the creation of new processes, the  execution of suspicious processes, etc. The detection can be built on  patterns related to the malware used or on unsual invocations (including  unusual parameters on the command line) of legit binaries (for example  use of vssadmin.exe to manipulate the volume shadow copies of a file  system).    It might be also an option to detect process establishing a network  connection with external destinations (see strategy 3 below).    ### 2. File activity monitoring:  Ransomware activity could be detected through massive file creation,  mofification, deletion or encryption.  Peaks on file enumeration or  directory browsing might be associated with a ransomware listing files  to encrypt.    Another sign could be files with double extensions. Based on previous  reported attacks, the list of extensions associated with ransomware  includes:    .ecc, .ezz, .exx, .zzz, .xyz, .aaa, .abc, .ccc, .vvv, .xxx, .ttt, .micro,  .encrypted, .locked, .crypto, _crypt, .crinf, .r5a, .XRNT, .XTBL, .crypt,  .R16M01D05, .pzdc, .good  ### 3. Network traffic (or logs) monitoring:  Ransomware may attempt to exfiltrate corporate data therefore monitoring on  unusual outgoing traffic through the proxy towards unusual destinations  couldD be a way to detect ransoware running on a device. \n",
                "\n### \ud83d\udee1\ufe0f Detection of M365 illicit application consent grant attacks\n\n\ud83d\udd11 **Identifier** : `CDM0077`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0077%5D-Detection-of-M365-illicit-application-consent-grant-attacks)\n\n---\n\nThere are various options and approaches accessible for detecting illicit consent  application attacks in M365. Here is a compilation of solutions that provide the ability  to recognize and investigate consent grants and application registrations:  - Azure AD Audit Logs:    The activities from Application Administrative category (registering app,    granting consent etc.) are logged in Azure AD Audit log. Both, user and admin    consent activities (delegated & application permissions) are logged to Azure AD    Audit logs with small differences.  - Azure Workbooks:    Overview of consent requests and sign-in from users to the granted apps. With the    built-in workbook you can drill down to individual app consents that's extremely    useful when working in the environment with large number of activities in this area.    - Powershell:     There are scripts which can allow us to view the list delegated permission grants like for example:      Get-AzureADServicePrincipal -All $true | .\\Get-AzureADPSPermissionGrants.ps1 -Preload    - KQL Queries:    For discovery of illicit consent application attacks can be used KQL queries.   It is possible to create a querie for any \"Consent to application\" operation,   occurs by a user or app. This could indicate that permissions to access the listed AzureApp   was provided to a malicious actor. Consent to appliction, Add service principal and    Add OAuth2PermissionGrant events should be rare. If available, additional context is added    from the AuditLogs based on CorrleationId from the same account that performed \"Consent to    application\".  - Microsoft Sentinel:      Microsoft Sentinel offers multiple out of the box rules related to the application administrative actions.   Some of them are the followings:          - Rare application consent     - Credential added after admin consented to Application     - Suspicious application consent similar to O365 Attack Toolkit     - Mail.Read Permissions Granted to Application \n",
                "\n### \ud83d\udee1\ufe0f Detect email attachments that could be linked to spearphishing campaign\n\n\ud83d\udd11 **Identifier** : `CDM0078`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0078%5D-Detect-email-attachments-that-could-be-linked-to-spearphishing-campaign)\n\n---\n\nSpearphishing campaigns with suspicious attachments, often come disguised with  multiple extensions, unconventional file types, or cleverly obfuscated names to  bypass initial security checks and dupe recipients into opening them.  Different type of attachments may contain payloads that are currently embedded within the attachment that can cause the download of malware.  ## Several strategies might be used:  **Attachments with double extensions**  - To detect suspicious files with double extensions, email protection solutions  use different types of techniques such as email filtering, content and attachment  scanning, heuristic analysis, link and attachment reputation, APTs, Sandboxing,  WL and BL, among others.  **Attachments with blocked extensions**  - Email security solutions enable the creation of policies with predefined and  customizable lists of blocked file extensions to identify and take action on emails  with attachments matching these extensions. For example, Proofpoint has a module called  \"Exestrip\" which detects malicious extensions and can be configured to notify the user that  a potentially malicious email has arrived and has been deleted.  **Attachment with RTL names / unicodes or puny-code in the name**  - Email security solutions use content analysis techniques to examine file names and  content for right-to-left (RTL) scripting, such as Arabic or Hebrew. This includes character  encoding checks, heuristic analysis and language detection algorithms to identify patterns  or anomalies in RTL languages. Custom rules, regular expressions and specific policies can  be set up to target RTL script detection, which would trigger alerts or quarantines. \n",
                "\n### \ud83d\udee1\ufe0f Detect spear phishing campaign using specific patterns or keywords in email metadata\n\n\ud83d\udd11 **Identifier** : `CDM0079`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0079%5D-Detect-spear-phishing-campaign-using-specific-patterns-or-keywords-in-email-metadata)\n\n---\n\nThe most commons detection patterns are:  - Urgent, yet unknown purchase invoice. - Warning of suspicious activity on the account. - Warning that the account is due to expire. - Urgent payment failed; action required immediately. - Parcel delivery.  The main function of these types of emails patterns is to attract the user attention and  persuade them to take a specific action, whether that be providing sensitive data,  entering links, downloading attachments, etc.   **IMPORTANT** pattern and keywork matching are done on email metadata  received in logs. They include email subjects and attachment names.  Email bodies nor attachment contents are not indexed nor visible in  email-related logs.  Email body or attachment may be processed by automatic security sensors  (Proofpoint Defense) but security analysts do NOT have access to the  content.    Regarding the keywords, the following can be observed in the logs  including subject line and attachment name:  - Invoice:    * Payment Invoice [date]   * Re: Invoice ....  - New:    * New Message from ....   * New Scanned Fax Doc-Delivery for ....   * New FaxTransmission from ....  - Message:   * Message From ....   * You have a New Message   * Telephone Message for ....  - Required:   * Verification Required   * Action Required: Expiration Notice on   * Attention Required. Support ID: ####  - File:   * File- ....   * You have a Google Drive File Shared  - Request:   * Your Service Request ....   * Request Notification: ....  - Action:   * Action Required: [Date]   * Action Required: Review Message sent on [Date]   * [Action Required] Password Expire  - Document:   * File Document ....   * View Attached Documents   * [Name] shared a document with you    ### example of specific patterns attacks   #### Planned phishing campaign exercise   \"A planned phishing campaign that are carried out within organisations,    it can be observed that one of the most outstanding characteristics of    these emails is that they contain common patterns in phishing emails which    is \".... shared a file with you\" and in the body of the message, they attach    a malicious document for the user to click on it\". \n",
                "\n### \ud83d\udee1\ufe0f Detect AWS Cross-Account IAM Activity\n\n\ud83d\udd11 **Identifier** : `CDM0080`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0080%5D-Detect-AWS-Cross-Account-IAM-Activity)\n\n---\n\nThe goal is to monitor and detecte `AssumeRole` events where an IAM role in a different account is requested for the first time.   Monitoring AWS CloudTrail logs is a way to detect suspicious cross-account activity, and based on the evidence found, further checks may be necessary.  When a IAM role is assumed in another AWS account to obtain `cross-account` access to the services and resource in that account, AWS CloudTrail logs  the `cross-account` activity. CloudTrail logs `AssumeRole` calls in the  role-owning account, including the unique ID of the IAM entity assuming the role in the account being accessed. This additional information helps identifying the entity that requested `cross-account` access and then trace its subsequent `cross-account` activity.  Using multiple accounts and roles is perfectly valid behavior.  It's suspicious when an account requests privileges of another account for which it hasn't requested before. \n",
                "\n### \ud83d\udee1\ufe0f Scheduled Tasks and COM Hijacking\n\n\ud83d\udd11 **Identifier** : `CDM0081`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0081%5D-Scheduled-Tasks-and-COM-Hijacking)\n\n---\n\nThe objective is to detect a scheduled task with Custom Handler action to retrieve class ID and using rundll32  to execute any payload build to run as legitimate process based on the class ID. \n",
                "\n### \ud83d\udee1\ufe0f Application connecting to a SMB network share\n\n\ud83d\udd11 **Identifier** : `CDM0082`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0082%5D-Application-connecting-to-a-SMB-network-share)\n\n---\n\nThreat actor uses specially crafted email messages to bypass the default WAV file and instead contains a path to an SMB share controlled by the attacker. When the Universal Naming Convention (UNC) path is accessed this forces an NTLM authentication from the victim to the attacker. The attacker can then steal the leaked NTLM hashes and to impersonate and use them. It's important to note that the malicious email requires no user interaction to conduct this attack.  Monitor for Windows Event IDs:   - 4656 (an application attempts to access the object in such a way that matches the audit policy defined for that object in) - 4663 (an attempt was made to access an object, indicates when a particular operation is performed on an object)  Access or usage of the following Windows registry keys: An interaction with these registry keys could be an indication for access either an SMB or WebDAV-hosted resource.  SMB: `HKLM\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider\\Name` WebDAV: `HKLM\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider\\ProviderPath`  Monitor for the process: C:\\Windows\\System32\\SearchProtocolHost.exe This process may trigger the NetworkProvider registry keys for SMB and WebDAV.  Audit Exchange PowerShell (.ps1) script for indication of mail items that may be used to exploit CVE-2023-23397 vulnerability  Additional possible mitigations:  - Block TCP 445/SMB outbound from the network by using a perimeter, local firewall or via VPN settings. - Add users to the Protected Users Security Group, which prevents the use of NTLM as an authentication mechanism.  - Apply the principle of least privilege by limiting the spread of administrative privileges across the domain.  Search for office sub processes initiation followed by SMB traffic,  which can be requested several times and towards multiples malicious domains. Monitoring outbound SMB traffic is essential to avoid potential payloads retrievals. \n",
                "\n### \ud83d\udee1\ufe0f Detect unusual web requests that could be related to C2\n\n\ud83d\udd11 **Identifier** : `CDM0083`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0083%5D-Detect-unusual-web-requests-that-could-be-related-to-C2)\n\n---\n\nA web request related to a C2 it\u2019s any kind of communication done between an infected endpoint and the command&control server.    The objective is to detect new communications not seen before and anyway followed by regular or repetitive connections in following hours or days (in case there is persistence).    The pace can be regular (beaconing or scripted interaction) or more random (interaction).    We may leverage recurrent activity from specific sources to specific sites or addresses.  We must also keep in mind that a C2 doesn\u2019t have to remain visible for a long time and  attackers use to have backup mechanisms to bring up them infra in different addresses  to remain hidden.    #### Detection techniques to consider:   - Monitor beaconing (regular or repetitive connections)    - Monitor amount of data sent    - Monitor long sessions (reverse shell)    - Monitor unseen/unexpected/unknown sites   - Monitor known IoCs The main challenge to detect potential C2 web requests is that the behaviour is very similar to standard legit communications, in some cases just to remain hidden in plain sight.   It\u2019s also important to consider the entropy of the people browsing, making almost unpredictable what you can expect in a big environment like ours.   To increase the fidelity, but also to accommodate the effort to our resources, we need to combine different detection techniques.   Just by using known IoCs in detection becomes a short-term strategy.    Other log collection to consider: - DNS logs (unexpected resolve requests, huge deviations) - CBC logs (suspicious event followed by proxy communication) - Stamus (malware outbound suricata rules) - FW logs (monitor connections to non standard destination ports) \n",
                "\n### \ud83d\udee1\ufe0f RDP sessions outside PAM or Central Helpdesk service\n\n\ud83d\udd11 **Identifier** : `CDM0084`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0084%5D-RDP-sessions-outside-PAM-or-Central-Helpdesk-service)\n\n---\n\n## RDP session management First implement effective RDP management strategies. This includes configuring detailed  event logs, using security tools to analyze suspicious patterns, integrating with  PAM systems for centralized control, applying group policies to restrict RDP access,  monitoring network traffic for unauthorized connections, setting up alerts and  notifications, conducting regular security audits, and providing staff training to  ensure compliance with authorized access policies   ## For monitoring:  ### Windows event logs  Based on excellent paper mentioned as reference, Windows event logs are a  good basis to monitor on the destination and/or the source of a RDP session (attempt)    The key 3 channels are: - Windows security      * on source device [EventID 4648 4648: A logon was attempted using explicit credentials](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4648)      and service TERMSRV/*     * EventID [4778: A session was reconnected to a Window Station](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4778)     * EventID [4779: A session was disconnected from a Window Station](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4779). - Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\" when Address is not \"LOCAL\" - Microsoft-Windows-TerminalServices-RemoteConnectionManager and EventID=1149  Once a RDP session is identified, check on server for EventID 4624/4625 for successful  authentication. Burst of 4625 could be a sign of RDP brute force attack (RDP servers may accept the RDP sessions but will termintate it if credentials are not valid)  Audit Policies: Ensure that auditing policies on devices are configured to log RDP realated events (success/failure)  ### Network-related monitoring  Look for Remote Desktop Protocol (RDP) traffic, which typically uses  TCP port 3389.  - Firewall logs or proxy logs (tunnel via proxy) on standard port TCP/3389 - network traffic on standard port TCP/3389  Some IDS (suricata) could identify RDP protocol on non-standard port.  Look for connections on port 3389 and identify the source and destination IP addresses. Cross-reference this information with server logs to identify the users involved. \n",
                "\n### \ud83d\udee1\ufe0f detect ICS activity to restricted resources not linked to valid authentication\n\n\ud83d\udd11 **Identifier** : `CDM0085`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0085%5D-detect-ICS-activity-to-restricted-resources-not-linked-to-valid-authentication)\n\n---\n\nThe objective is to detect access to resources on Ivanti Pulse Secure  appliances that require prior authentication from source IPs that cannot  be related to any valid session (successful authentication).    the idea is to spot successful exploit of a vulnerability that allows  to bypass authentication \n",
                "\n### \ud83d\udee1\ufe0f ICS detect outbound network activity\n\n\ud83d\udd11 **Identifier** : `CDM0086`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0086%5D-ICS-detect-outbound-network-activity)\n\n---\n\nsearch for outbound traffic from ICS appliance (traffic initiated by the ICS appliance)    A more specific detection objective could be to detect lateral movement  between ICS appliances or management consoles. \n",
                "\n### \ud83d\udee1\ufe0f ICS logging tampering\n\n\ud83d\udd11 **Identifier** : `CDM0087`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0087%5D-ICS-logging-tampering)\n\n---\n\n- Search for stop or gaps in log collection from Ivanti Pulse Connect (ICS). - search for any signature ID (code) related to logging such as log cleared  or deleted, etc. \n",
                "\n### \ud83d\udee1\ufe0f ICS detect path traversal requests\n\n\ud83d\udd11 **Identifier** : `CDM0088`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0088%5D-ICS-detect-path-traversal-requests)\n\n---\n\nDetect path traversal attempts on Ivanti Pulse Connect (ICS) web components. \n",
                "\n### \ud83d\udee1\ufe0f Detect command injection on ICS Ivanti Connect Secure in URL\n\n\ud83d\udd11 **Identifier** : `CDM0089`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0089%5D-Detect-command-injection-on-ICS-Ivanti-Connect-Secure-in-URL)\n\n---\n\nDetect presence of commands in the URL request (GET POST or other methods).    requests can be HTML or base64 encoded in order to evade detection. \n",
                "\n### \ud83d\udee1\ufe0f Detect Ivanti Connect Secure ICS system modifications\n\n\ud83d\udd11 **Identifier** : `CDM0090`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0090%5D-Detect-Ivanti-Connect-Secure-ICS-system-modifications)\n\n---\n\n- Search for reports from internal integrity checks - search for change in number of files for a given version \n",
                "\n### \ud83d\udee1\ufe0f EC Central Logging and Monitoring Standard\n\n\ud83d\udd11 **Identifier** : `BDR0001`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0001%5D-EC-Central-Logging-and-Monitoring-Standard)\n\n---\n\nThe SOC must perform a meta monitoring of lacking log sources against the central monitoring policy, and identify clients which are not sending data as intended. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT C3 PAM service - access policy for RDP sessions\n\n\ud83d\udd11 **Identifier** : `BDR0002`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0002%5D-DIGIT-C3-PAM-service---access-policy-for-RDP-sessions)\n\n---\n\nThe SOC must monitor RDP access to servers and investigate deviations from the policy. The policy foresees some pre-approved deviations. For them, alerts will be forwarded to agreed list of recipients with CSOC ticket reference and the ticket will be automatically closed. IF a recipient reports back to SOC, case will be reopen and investigated. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT C3 PAM service - access policy for SSH sessions\n\n\ud83d\udd11 **Identifier** : `BDR0003`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0003%5D-DIGIT-C3-PAM-service---access-policy-for-SSH-sessions)\n\n---\n\nThe SOC must monitor SSH access to servers and investigate deviations from the policy. The policy foresees some pre-approved deviations. For them, alerts will be forwarded to agreed list of recipients with CSOC ticket reference and the ticket will be automatically closed. If a recipient reports back to SOC, the case will be reopen and investigated by SOC analysts. \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC activity initiated from outside EC or vetted IP ranges\n\n\ud83d\udd11 **Identifier** : `BDR0004`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0004%5D-ESS-CBC-activity-initiated-from-outside-EC-or-vetted-IP-ranges)\n\n---\n\nSOC must monitor any activity initiated from outside EC or vetted IP ranges to the ESS VMware Carbon Black Cloud (CBC) tenants. The policy foresees some pre-approved deviations, since some tenants might have extra-muros contractors managing the components of the tenants. SOC must send an alert to the tenant owners when the conditions previously described are met.  There is already an event to be whitelisted: when the user confirms the email, during the activation of an account, we will see two audit log entries one from the user IP location and a second from AWS IP. Concretely, the audit log entry is \"Successfully confirmed the email - USER@EMAIL.ADDRESS\" \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC High Privileged activity\n\n\ud83d\udd11 **Identifier** : `BDR0005`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0005%5D-ESS-CBC-High-Privileged-activity)\n\n---\n\nCATCH must monitor any high privileged activity and notify the tenant point of contact related to security monitoring. \n",
                "\n### \ud83d\udee1\ufe0f JRC IES top failed Windows authentication reporting\n\n\ud83d\udd11 **Identifier** : `BDR0006`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0006%5D-JRC-IES-top-failed-Windows-authentication-reporting)\n\n---\n\nWeekly release a report on failed authentication accounts (descending order of failed accounts) with additional information: - from where (src IP and/or src host) - Event ID and Error Code (with its meaning) - any successful login for that account and if yes from which devices  Reports will be sent as CSV (comma-separated values) attachment to JRC LISO.\n",
                "\n### \ud83d\udee1\ufe0f SHS CLIMA - Non compliance monitoring and alerting on accesss and usage of CLIMA DBMS\n\n\ud83d\udd11 **Identifier** : `BDR0007`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0007%5D-SHS-CLIMA---Non-compliance-monitoring-and-alerting-on-accesss-and-usage-of-CLIMA-DBMS)\n\n---\n\nrelevant monitoring and detection rules should cover the following cases: - Misuse of EUTL_RO_PUBLIC DBMS Account - Misuse of SECURITY_ADMIN and SECURITY_OFFICER DBMS Accounts - Access from a non-authorized host - Attempt to be accessed by a non-authorized user account - Attempt to be accessed by a unknown database account - Access to unauthorized DBMS business tables - Access to the DB account not permitted - DB01 - Access to the privileged database account outside working hours - DB-02 - Access to non-privileged database account outside working hours - DB-03 - Access to privileged database account inside working hours - DB-04 - DB Console Access from non-authorized host \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC User not signed in for the last 6 months\n\n\ud83d\udd11 **Identifier** : `BDR0008`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0008%5D-ESS-CBC-User-not-signed-in-for-the-last-6-months)\n\n---\n\nCATCH must monitor when a valid account has not signed in for the last 6 months. CATCH must send on a monthly basis a report by email to the EDRT Operational POC of the ESS customer listing all valid accounts that have not signed in for last 6 months with the data of last signed in. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT S2 CATCH CSOC integrations via ES_SPLUNK\n\n\ud83d\udd11 **Identifier** : `BDR0009`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0009%5D-DIGIT-S2-CATCH-CSOC-integrations-via-ES_SPLUNK)\n\n---\n\nA CSOC integration processes correlated alerts coming from one or several analytics or detection platform including ES-SPLUNK itself in order to  cross-correlated and therefore confirm or infirm this is an alert to be qualified by S2 CSIRC.    ## list of analytics or detection platforms:   - ESS CSM (CBC Analytics)   - ESS CSM (CBC Watchlist)   - STAMUS   - Azure Sentinel   - Microsoft Defender for Cloud / Cloud App   - STAMUS   - CANARY Tokens   - SYSDIG   - MTD (Zimperium)   - AWS GuardDuty  A CSOC integration initiates a simple workflow:     1. correlated alert is received from the analytic or detection platform     2. inclusion filters are applied to them     3. exclusion filters applied     4. CSOC temporary exclusion filters when an alert is under qualification     or potential security incident under investigation     5. checks to avoid duplicates      6. cross-checks and enrichment. \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC lack of CBC audit logs\n\n\ud83d\udd11 **Identifier** : `BDR0010`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0010%5D-ESS-CBC-lack-of-CBC-audit-logs)\n\n---\n\nCATCH must monitor that VMware CBC audit logs arrive properly to Splunk for every tenant. CATCH must notify EC DIGIT ESS Functional Mailbox in case they do not arrive to Splunk. \n",
                "\n### \ud83d\udee1\ufe0f ESS EDRT integration settings changed\n\n\ud83d\udd11 **Identifier** : `BDR0011`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0011%5D-ESS-EDRT-integration-settings-changed)\n\n---\n\nCATCH must monitor when the EDRT integration settings are modified  and notify EC DIGIT ESS Functional Mailbox.   \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC lack of CBC alerts\n\n\ud83d\udd11 **Identifier** : `BDR0012`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0012%5D-ESS-CBC-lack-of-CBC-alerts)\n\n---\n\nCATCH must monitor that VMware CBC tenant alerts arrive properly to Splunk. CATCH must notify EC DIGIT ESS Functional Mailbox in case they do not arrive to Splunk. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT C3 PAM service - access policy for Super User sessions\n\n\ud83d\udd11 **Identifier** : `BDR0013`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0013%5D-DIGIT-C3-PAM-service---access-policy-for-Super-User-sessions)\n\n---\n\nThe SOC must monitor PAM super user (sroot) access to servers and investigate deviations from the policy.  The policy does not foresee any usage for this user by the operations team.  It is not allowed for operations team to use the super user (sroot) to connect to RDP, SSH, WEB targets. The only time an sroot user should be used is if eulogin is not available.  For them, alerts will be forwarded to agreed list of recipients with CSOC ticket reference and the ticket  will be automatically closed. IF a recipient reports back to SOC, case will be reopen and investigated. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT protected RPM - access policy violation\n\n\ud83d\udd11 **Identifier** : `BDR0014`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0014%5D-DIGIT-protected-RPM---access-policy-violation)\n\n---\n\nDetect access attempts (success and failure) to the protected RPMs from IPs  not in the vetted IP range list and/or for users not in vetted groups.   ## presentation: ### DIGIT services exposed behind protected RPMs:  - ES-SPLUNK  - SNOW  - CBC  - ES-SPLUNK BREAK-GLASS-SRV  - SPLUNK BREAK-GLASS-SRV  - EFGS-EDCC  ### Protected RPMs in scope   - es-splunk.tech.ec.europa.eu   - es-splunk.acceptance.tech.ec.europa.eu   - digit.service-now.com   - defense-eu.conferdeploy.net   - splunk.acceptance.tech.ec.europa.eu   - splunk.tech.ec.europa.eu   - efgs-nexus.tech.ec.europa.eu   - efgs-truesight.tech.ec.europa.eu   - efgs.tech.ec.europa.eu  ### Combination of DIGIT services with RPMs Each RPM might be exposed to deliver one or several DIGIT services. The combination is documented in lookup  SOC_LT_086_PV-AUT-03_vetted_sites_by_service-include.csv  ### Mapping between DIGIT services and vetted IP ranges The list of IP ranges allowed to access DIGIT services is  maintained in lookup SOC_LT_086_PV-AUT-03_vetted_IP_ranges_by_service-include.csv  ### Mapping between DIGIT services and users The mapping is maintained in lookup  SOC_LT_189_IAM_authorised_user_by_service-exclude.csv    For the moment the mapping is limited to ES-SPLUNK  SOC_LT_189_IAM_authorised_user_ES-SPLUNK-exclude.csv \n",
                "\n### \ud83d\udee1\ufe0f EC-related ServiceNow local account advanced monitoring\n\n\ud83d\udd11 **Identifier** : `BDR0015`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0015%5D-EC-related-ServiceNow-local-account-advanced-monitoring)\n\n---\n\nThe purposes of this BDR is to deploy additional detection rules to protect  access and use of the SaaS ServiceNow instances. THe priority goes to the  instance used in PRODUCTION at https://digit.service-now.com/ but any  instance that may contain EC real data and not just anonymised samples  or data or code that will be moved to PRODUCTION instance.    The objective is to ensure accounts are not comppromise and that data, code  and configuration are not tampered with.  \n",
                "\n### \ud83d\udee1\ufe0f Forensic data configuration for mobile devices\n\n\ud83d\udd11 **Identifier** : `BDR0016`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0016%5D-Forensic-data-configuration-for-mobile-devices)\n\n---\n\nEach time a new MobileIron MDM group is created and added into Zimperium console, the settings template is set to High. This means that location feature is set by default to street - city - country. This feature must be set to None (deactivated).    DIGIT.C6 Mobile Solutions team is responsible to disable the location feature in  compliance with the DPIA and their procedures should have the appropriate  provisions.    To avoid any security incident resulting from a misconfiguration,  DIGIT.S2 is going to monitor when the location feature is enabled for any device managed by DIGIT.C6 Mobile Solutions team.    If enabled, a notification is sent to DIGIT.C6 Mobile Solutions team to  remind them to deactive the feature.   \n",
                "\n### \ud83d\udee1\ufe0f Account manipulation in AD\n\n\ud83d\udd11 **Identifier** : `CDM0001`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0001%5D-Account-manipulation-in-AD)\n\n---\n\nMonitor Azure Activity Logs (Azure) or Windows Security Logs (AD) for Service Principal and Application modifications. Detect when new rights are being granted to an existing account and when new high priviledge roles are created from a single, trusted one within a short span of time, especially when it is followed by a high rate of subsequent resource access and modification. \n",
                "\n### \ud83d\udee1\ufe0f Track M365 for high risk role creation\n\n\ud83d\udd11 **Identifier** : `CDM0002`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0002%5D-Track-M365-for-high-risk-role-creation)\n\n---\n\nMonitor the Microsoft 365 tenant for the creation of new Management Role  Assignments. This can be done by creating rules to alert on the  New-ManagementRoleAssignment operation and further filter for the  assignment of the ApplicationImpersonation role.  \n",
                "\n### \ud83d\udee1\ufe0f Identify critical partner operations with delegated permissions\n\n\ud83d\udd11 **Identifier** : `CDM0003`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0003%5D-Identify-critical-partner-operations-with-delegated-permissions)\n\n---\n\nThe Azure AD sign-in logs record sign-ins by partners who have been delegated  administrative permissions. For enhanced visibility of sign-in events initiated  by partner organizations, the logs can be filtered specific to the property of  \"crossTenantAccessType\" matching \"serviceProvider\". Track activities from 3rd particularly regarding if they start to accumulate privileges or do critical  actions and operations on key infrastructure. \n",
                "\n### \ud83d\udee1\ufe0f Detect adversary signed SAML Tokens\n\n\ud83d\udd11 **Identifier** : `CDM0004`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0004%5D-Detect-adversary-signed-SAML-Tokens)\n\n---\n\nSearch for any logins to service providers using SAML SSO, which do not have corresponding Windows Security Log events 4769, 1200 and 1202  in the Domain, and would indicate a forged response as the only event is the login to the service provider. Certificate export detection with event 1007, especially when the export is performed with the command line, is incriminating. Look for tools like Mimikatz and ADFSDump, which can be detected with Sysmon Event 18 with pipe named '\"\\microsoft##wid\\tsql\\query\"'. \n",
                "\n### \ud83d\udee1\ufe0f Malicious ADFS trust modification\n\n\ud83d\udd11 **Identifier** : `CDM0005`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0005%5D-Malicious-ADFS-trust-modification)\n\n---\n\nMonitor creation of new ADFS trusts, by monitoring Windows Security Event Log on the ADFS server : \"The Federation Service configuration was changed\". This event can be correlated to relevant event 510 with the same Instance ID  for change details. There could be more than one 510 event per single 307 event.  These events should be reviewed, specifically searching for \"Configuration: Type: IssuanceAuthority\" where \"Property Value\" references an unfamiliar Domain. \n",
                "\n### \ud83d\udee1\ufe0f Detect Abuse of trusted third-party services\n\n\ud83d\udd11 **Identifier** : `CDM0006`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0006%5D-Detect-Abuse-of-trusted-third-party-services)\n\n---\n\nMonitor for communication from/to trusted cloud hosting plarforms (including things such as code repositories) to identify whether the content seems malicious -- command line execution, host modification, obfuscation etc. ; but also whether they are communicating to the hosting platform in ways that are similar to a C2 server. \n",
                "\n### \ud83d\udee1\ufe0f Detect malicious scripts hiding in registry\n\n\ud83d\udd11 **Identifier** : `CDM0007`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0007%5D-Detect-malicious-scripts-hiding-in-registry)\n\n---\n\nMonitor for new registry keys added by processes and command-line arguments that contain scripts such as Visual Basic Scripts, JavaScript, Microsoft HTML scripts etc. Keep a repository of known keys used by adversaries, such as ones ending with '\\Software\\Microsoft\\Windows\\ CurrentVersion\\Run' or '\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce'. \n",
                "\n### \ud83d\udee1\ufe0f Detect malicious execution of rundll32\n\n\ud83d\udd11 **Identifier** : `CDM0008`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0008%5D-Detect-malicious-execution-of-rundll32)\n\n---\n\nLook for rundll32 execution , especially when called from another script. Monitor command line arguments to identify when malicious files are loaded with rundll32. Try to correlate DLL download followed immediately by a programmatic execution, which would indicate a multi-stage payload. Bear in mind that adversaries may rename the malicious DLL, for example with .sys extensions and hide in system paths, such as system32. \n",
                "\n### \ud83d\udee1\ufe0f Compromised FaaS instances\n\n\ud83d\udd11 **Identifier** : `CDM0009`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0009%5D-Compromised-FaaS-instances)\n\n---\n\nMonitor for functions that contain obfuscated and/or compiled code. Usually functions are closed within seconds of their triggering, and communicate with other services within AWS, meaning that long-running functions, with many connections to the outside need to be identified. Comparison with code repositories will also help to confirm whether a piece of code is supposed to be hosted in the cloud.  \n",
                "\n### \ud83d\udee1\ufe0f Signins from VPN Providers\n\n\ud83d\udd11 **Identifier** : `CDM0010`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0010%5D-Signins-from-VPN-Providers)\n\n---\n\nDetect sign-in or connection attempts from unknown VPN providers. Commercial VPN providers will publish their egress servers, which may be dynamically retrieved from their API or other intelligence listing regularly updated.  \n",
                "\n### \ud83d\udee1\ufe0f EC2 Instances using IMDSv1\n\n\ud83d\udd11 **Identifier** : `CDM0011`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0011%5D-EC2-Instances-using-IMDSv1)\n\n---\n\nDetection can be performed on logs using MetadataNoToken (Counts the number of times the Instance Metadata service was successfully access without a token (i.e., IMDSv1)). Other open sources tools may be used as well (Prowler Check 7.86, Metabadger or Cloudmapper). AWS CLI could also be used to list instances and filter on those using IMDSv1. Other AWS services may also be used to support, such as Security Hub or AWS Config, which can be setup to trigger alerts if IMDSv1 is present. \n",
                "\n### \ud83d\udee1\ufe0f EC2 Credential Exfiltration\n\n\ud83d\udd11 **Identifier** : `CDM0012`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0012%5D-EC2-Credential-Exfiltration)\n\n---\n\nIdentify when credentials exclusively used for an EC2 instance are being reused from another account. This scope may also be extended to identify when the credentials are trying to authenticate against different services that the role was not made to contact. IP addresses may also be used as a reference to check whether the API call is being initiated by another instance, reusing compromised credentials. Note that the scope of compromise can equally be within AWS or from the outside. \n",
                "\n### \ud83d\udee1\ufe0f External IMDS Requests\n\n\ud83d\udd11 **Identifier** : `CDM0013`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0013%5D-External-IMDS-Requests)\n\n---\n\nIMDS is exposed through an API which can be queried only from the endpoint, but v1 will not authenticate  what is making the call, and it will be accessible directly. Identify, using a combination of network logs and API call logs, unusual patterns of access which may be indicative of IMDS being queried by another actor, especially when combined with other web application exploitation alerts.  \n",
                "\n### \ud83d\udee1\ufe0f Compromised cloud accounts\n\n\ud83d\udd11 **Identifier** : `CDM0014`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0014%5D-Compromised-cloud-accounts)\n\n---\n\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account. Take particular care for impossible travels, but since adversary may use VPNs to evade it (see TVM0021) also track access patterns to identify. \n",
                "\n### \ud83d\udee1\ufe0f Cloud network plane lateral movement\n\n\ud83d\udd11 **Identifier** : `CDM0015`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0015%5D-Cloud-network-plane-lateral-movement)\n\n---\n\nDetect a high rate of unusual traffic flow from cloud instances to others and denied connections by the network security groups. Network reconnaissance techniques, such as port scanning, followed by connection attempts are likely conclusive of a lateral movement attempt in the network plane. Packet level inspection may improve remote service compromise attempts, and thus of attempt to move to another network location. Prioritize especially for movement from low to high security network planes, such as from a VPC to on premises.   \n",
                "\n### \ud83d\udee1\ufe0f Monitor Actions performed with recently assumed role\n\n\ud83d\udd11 **Identifier** : `CDM0016`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0016%5D-Monitor-Actions-performed-with-recently-assumed-role)\n\n---\n\nNewly added role may be indicative of privilege escalation leading to a lateral movement to other resources, with the  newly aquired privileges. Monitor when critical actions; such as resource creation, deletion, and data read to important resources are performed with assumed role, on instances that typically don't assume roles.  \n",
                "\n### \ud83d\udee1\ufe0f Monitor for Web Shell Attacks\n\n\ud83d\udd11 **Identifier** : `CDM0017`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0017%5D-Monitor-for-Web-Shell-Attacks)\n\n---\n\nSeveral strategies might be used:  ## anomalies in the type of method Web Shell traffic will differentiate from usual traffic by the amount of POST requests, instead of the usual GET. Identify potentially malicious traffic by filtering web server access logs to look for the highest POST traffic and then search for calls to URLs that include one of the common web shell file types (.php, .asp, .aspx, .jsp).  ## POST requests to static files Monitoring POST request to images or other static files could be an indication  ## anomalies in the size of request and response important standard deviation on bytes sent/received by the server for a given file might be an indication of web shells  ##unusual traffic to a file monitoring new uri_path or change in the frequency of access to an aur_path might indicate that an attacker has injected a malicious file into a target web server's directory and then try to execute that file from the web browser.  Host monitoring (file integretity checks) may still be useful to identify when a shell was uploaded to the web servers, and by monitoring for unusual and priviledged process spawning. \n",
                "\n### \ud83d\udee1\ufe0f Detect non-approved container image deployed\n\n\ud83d\udd11 **Identifier** : `CDM0018`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0018%5D-Detect-non-approved-container-image-deployed)\n\n---\n\nMonitor (for example in Sysdig) for images being deployed that do not  originate from the approved container image repositories. Any image  deployed this way needs to be thoroughly investigated.  Monitor for known-bad file hashes (images) being downloaded, or being  downloaded from known-bad IPs or domains (including shell scripts) Monitor for executable scripts being downloaded to a container Always monitor for unusual authentications to all types of systems/apps Monitor for deployment of remote shells and outbound network connectivity \n",
                "\n### \ud83d\udee1\ufe0f Detect Cryptominer running in container\n\n\ud83d\udd11 **Identifier** : `CDM0019`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0019%5D-Detect-Cryptominer-running-in-container)\n\n---\n\nDetection of a cryptominer can be achieved in many ways - through monitoring  for the presence of known atomic IOCs such as file hashes or DNS lookups or  IP addresses. Correlate connection and domain resolution attempts with known  cryptominer pools hostnames, IPs and ports. Detect stratum protocol  (stratum+tcp or stratum2+tcp) used by cryptominer pools in process command line  and environment variables.  Other ways are to monitor system resources utilization for  extended peaks, as some cryptominers hog everything.   One of the best and easiest ways to detect crypto mining is through monitoring the network for suspicious activity. To mine a cryptocurrency, it is necessary to communicate, receive new hashes and calculate them then return them to the servers and put them in the correct wallet. \n",
                "\n### \ud83d\udee1\ufe0f Changes in SSH authorized_key file\n\n\ud83d\udd11 **Identifier** : `CDM0020`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0020%5D-Changes-in-SSH-authorized_key-file)\n\n---\n\nThe Secure Shell (SSH) authorized_keys file specifies  which users are allowed to log into a server using public  key authentication. Adversaries may modify it to maintain  persistence on a victim host by adding their own public keys. Can be created an event category rule that monitors for  changes in authorized_keys values in SSH settings.  Monitor executed commands, changes or any suspisious  processes to modify the authorized_keys or  /etc/ssh/sshd_config files. \n",
                "\n### \ud83d\udee1\ufe0f Identify Emotet Trojan Artefacts\n\n\ud83d\udd11 **Identifier** : `CDM0021`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0021%5D-Identify-Emotet-Trojan-Artefacts)\n\n---\n\nSome registers in Windows can be scanned.  Possible scan tool: FRST scan The scanning tool have to research for the  following common IoCs that are related to  Emotet.  HKLM\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\1A345B7 HKLM\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\12C4567D  (Gornyk) C:\\Windows\\SysWOW64\\servicedcom.exe C:\\WINDOWS\\12345678.EXE C:\\WINDOWS\\SYSWOW64\\SERVERNV.EXE C:\\WINDOWS\\SYSWOW64\\NUMB3R2ANDL3373RS.EXE C:\\WINDOWS\\TEMP\\1A2B.TMP  One way to detect Emotet\u2019s obfuscated code is to look for a PowerShell process executing commands that use the format operator -f to concatenate strings. To further refine the analytic, you can also look for the format indexes {0} and {1}. \n",
                "\n### \ud83d\udee1\ufe0f Detection of IIS extensions quietly open persistent backdoors into servers\n\n\ud83d\udd11 **Identifier** : `CDM0022`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0022%5D-Detection-of-IIS-extensions-quietly-open-persistent-backdoors-into-servers)\n\n---\n\nThe atacker is installing an IIS backdoor to use it as a covert  channel to drop malware through it. An adversary install a custom  IIS backdoor called FinanceSvcModel.dll in the folder  C:\\inetpub\\wwwroot\\bin\\. The backdoor had built-in capability to perform Exchange management  operations, such as enumerating installed mailbox accounts and exporting  mailboxes for exfiltration, as detailed below:    Path of the backdoor: \"*.gif\" Handler: System.Web.owa  Microsoft Defender Antivirus detections:  Backdoor:MSIL/SuspIISModule.G!gen Backdoor:MSIL/SuspIISModule.H!gen Backdoor:MSIL/SuspIISModule.K!gen Backdoor:MSIL/OWAStealer.B Backdoor:MSIL/OWAStealer.C Behavior:Win32/SuspGacInstall.B  Detection on EDR level: Suspicious IIS AppCmd Usage  Suspicious IIS module registration:  DeviceProcessEvents | where ProcessCommandLine has \u201cappcmd.exe add module\u201d | where InitiatingProcessParentFileName == \u201cw3wp.exe\u201d  DeviceProcessEvents | where InitiatingProcessFileName == \u201cpowershell.exe\u201d |where ProcessCommandLine has \u201d system.enterpriseservices.internal.publish\u201d | where InitiatingProcessParentFileName == \u201cw3wp.exe\u201d   DeviceProcessEvents |where ProcessCommandLine has \u201d \\\\gacutil.exe /I\u201d | where InitiatingProcessParentFileName == \u201cw3wp.exe\u201d  Indicators of compromise HttpCompress.dll   4446f5fce13dd376ebcad8a78f057c0662880fdff7fe2b51706cb5a2253aa569  HttpSessionModule.dll 1d5681ff4e2bc0134981e1c62ce70506eb0b6619c27ae384552fe3bdc904205c  RewriterHttpModule.dll c5c39dd5c3c3253fffdd8fee796be3a9361f4bfa1e0341f021fba3dafcab9739  Microsoft.Exchange.HttpProxy.HttpUtilities.dll d820059577dde23e99d11056265e0abf626db9937fc56afde9b75223bf309eb0  HttpManageMoudle.dll 95721eedcf165cd74607f8a339d395b1234ff930408a46c37fa7822ddddceb80  IIS_backdoor.dll e352ebd81a0d50da9b7148cf14897d66fd894e88eda53e897baa77b3cc21bd8a  FinanceSvcModel.dll 5da41d312f1b4068afabb87e40ad6de211fa59513deb4b94148c0abde5ee3bd5  App_Web_system_web.ashx.dll 290f8c0ce754078e27be3ed2ee6eff95c4e10b71690e25bbcf452481a4e09b9d  App_Web_error.ashx.dll 2996064437621bfecd159a3f71166e8c6468225e1c0189238068118deeabaa3d \n",
                "\n### \ud83d\udee1\ufe0f SQL Commands in Web Request\n\n\ud83d\udd11 **Identifier** : `CDM0023`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0023%5D-SQL-Commands-in-Web-Request)\n\n---\n\nHTTP transaction would contain URL-encoded SQL fragments, corresponding to a query being done on the frontend. Encoding non-ASCII characters into the URL ensures that the HTTP request successfully crosses the internet. When the HTTP request arrives at the web server, the web application decodes the URL and processes the data.  By searching known malicious patterns of SQL statements, for example : 'UNION all SELECT encoded into %27%20UNION%20ALL%20SELECT , SQL injection may be revealed. \n",
                "\n### \ud83d\udee1\ufe0f Detect Suspicious Redirections in URL\n\n\ud83d\udd11 **Identifier** : `CDM0024`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0024%5D-Detect-Suspicious-Redirections-in-URL)\n\n---\n\n2023-05-01 This detction objective is cancelled.   Within EC this vulnerability is assessed (DIGIT S1 SA) low and will be handled under DIGIT S1 vulnerability management service.  Search for redirection and forward events keywords in the URL of web queries captured at the network level, which redirect to another website (since website often redirect users to another part of the website).  For example, detect a url query parameter in the url itself : http://example.com/example.php?url=http://malicious.example.com and parse the followup string to get the domain name. Other keywords include ?returnUrl, #https:// , ?fwd= ...  It is also possible to build a regex search which looks for domain name in every URL and then compares to the domain name of the application. Regex needs to be loose enough in case of C2 domains which may be randomized and unusual.  Narrow down searches to internal, sensitive URLs of web applications and avoid general aspecific traffic to the internet which may contain many expected redirections across many websites. \n",
                "\n### \ud83d\udee1\ufe0f Identify Path Traversal in Web Requests\n\n\ud83d\udd11 **Identifier** : `CDM0025`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0025%5D-Identify-Path-Traversal-in-Web-Requests)\n\n---\n\nAnalyze and alert on URLs containing \"dot-dot-slash\" sequences, or absolute path to critical resources.  \"../\" or \"..\\\" sequences are often percent encodded, and even double encoded (see : https://owasp.org/www-community/Double_Encoding), for example \"..\\\" may be represented as \"%2e%2e%5c\", \"%252e%252e%255c\" or \"..%255c\". As such, build searches which return  successions of dot, dot and back or forward slash, including all subvariations of URL encoding and double encoding.  Path traversal queries may not always contain dot-dot-slash sequences, for example : http://some_site.com.br/get-files?file=/etc/passwd. in that case, build a lookup of directories which should not be in userspace , for example /opt or /etc in *NIX OS, /windows for Windows server etc. \n",
                "\n### \ud83d\udee1\ufe0f Detect Confluence RCE (CVE-2021-26084)\n\n\ud83d\udd11 **Identifier** : `CDM0026`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0026%5D-Detect-Confluence-RCE-%28CVE-2021-26084%29)\n\n---\n\nTo detect exploitation, you should monitor all HTTP traffic requests where the path component of the request-URI contains one of the strings in the \u201cURI path\u201d column of the following table:   https://gist.github.com/zdi-team/acaee69c9c5bcbdc4ce590fcdb6170b5#file-cve-2021-26084-snippet-7-console  If such a request is found, you should inspect the HTTP request method. If the request method is POST, look for the respective vulnerable parameters from the table above in the body of the HTTP request, and if the request method is GET, you should look for the parameters in the request-URI of the HTTP request. Check to see if the value of any of the vulnerable parameters contains the string \"\\u0027\" or its URL-encoded form. If so, the traffic should be considered malicious and an attack exploiting this vulnerability is likely underway. \n",
                "\n### \ud83d\udee1\ufe0f Detect Abnormal Traffic to Web Servers\n\n\ud83d\udd11 **Identifier** : `CDM0027`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0027%5D-Detect-Abnormal-Traffic-to-Web-Servers)\n\n---\n\nIdentify clients generating large amount of HTTP errors, POST requests, protocol used, request headers and particularly for unusual clients : uncommon IP ranges, host names, OS, user agent etc.  Monitoring average traffic volumes and alerting if it deviates from expectation may also be particularly relevant, for example to identify DDoS types of attacks or data exfiltration. \n",
                "\n### \ud83d\udee1\ufe0f Monitor Web Vulnerability Scanner Behaviours\n\n\ud83d\udd11 **Identifier** : `CDM0028`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0028%5D-Monitor-Web-Vulnerability-Scanner-Behaviours)\n\n---\n\nCommon scanners can be identified by their user agents, which will mention in some string a recurring name, often belonging to a certain tool. Lists, such as https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/_generator_lists/bad-user-agents.list have been compiled with hundreds of signatures, allowing to build rules for known scanners. Similarly, threat intelligence can be used to compile IoCs of known domain names or IPs used as scanning endpoints. However, this may be fooled if the adversary modifies the user agent used by the scanner.  More complex detection approaches should complement signature based detection for modified open source scanners and other custom tools by focusing on common behaviours: detect when a client is crawling through the website (high frequency of successfull queries and/or http errors), making high amount of transactions and generating traffic,  while sending odd, malformed or obfuscated requests especially if they correspond to other malicious attacks. \n",
                "\n### \ud83d\udee1\ufe0f Obfuscated Query String in Web Request\n\n\ud83d\udd11 **Identifier** : `CDM0029`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0029%5D-Obfuscated-Query-String-in-Web-Request)\n\n---\n\nAnalyze if URL query string parameters contains distinct signs of obfuscation in order to thwart attack detection. Typical things to look for are large base64 strings, ...CHAR(n)+CHAR(n)... string used in SQL injections, successions of html, hex, octal or unicode escaped characters (\\144 is \"a\" in octal for example) and any combination of them.  A useful general approach is to embed a tranformation steps for the logs, where they'd be automatically decoded as well, allowing other rules to perform detection.  Be careful for leading zeros, for example the html encoding &#000000000058; can escape the filter for \":\" , which is used by a number of attacks, and can throw off the filter if it's not taking leading zeros in consideration.  Percent encoding is common, and web detections should percent decode by default, but since some web servers perform two round of decoding, some adversaries encode twice to evade detection and still have their query being read by the target. Alongside single encoding detection for percent encoded attacks, have a general rule for double encoded queries which are almost always malicious. You can also embed an  automation to double decode all logs, use both approaches to weigh in the threat criticality. \n",
                "\n### \ud83d\udee1\ufe0f Suspicious Requests URL\n\n\ud83d\udd11 **Identifier** : `CDM0030`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0030%5D-Suspicious-Requests-URL)\n\n---\n\nCertain part of the webservers should typically not be attempted to be reached by web clients.  Create a blocklist of administrative endpoints (/admin/index.php...), system keywords (conf, admin, localhost, console, webmin, php my admin...), that are typically reserved only for adminstrators, and alert on unexpected access to these resources.  \n",
                "\n### \ud83d\udee1\ufe0f Detect brute-force attacks against EULOGIN IdP\n\n\ud83d\udd11 **Identifier** : `CDM0031`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0031%5D-Detect-brute-force-attacks-against-EULOGIN-IdP)\n\n---\n\nIdentify clients generating large amount of failed EULOGIN login requests followed or not by a successful login. Detects successful/unsuccessful horizontal brute forces. Detects slow, successful/unsuccessful horizontal brute forces. Detects slow, successful/unsuccessful vertical bruteforces. Detects successful/unsuccessful vertical bruteforces \n",
                "\n### \ud83d\udee1\ufe0f (CVE-2020-0688) Confluence VIEWSTATE query parameter\n\n\ud83d\udd11 **Identifier** : `CDM0032`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0032%5D-%28CVE-2020-0688%29-Confluence-VIEWSTATE-query-parameter)\n\n---\n\nAs highlighted in TVM0054, a number of pages are targeted and the URL will contain the serialized payload. As a result, alert for queries on the /ecp/ root that contain a __VIEWSTATE query parameter followed by a large variable. __VIEWSTATE should never be part of a GET request and should be alerted when that's the case. \n",
                "\n### \ud83d\udee1\ufe0f XSS Payload in Web Request\n\n\ud83d\udd11 **Identifier** : `CDM0033`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0033%5D-XSS-Payload-in-Web-Request)\n\n---\n\nAdversaries will likely attempt multiple XSS injection to evade the different sanitization filters. They will likely combine different encoding strategies as described in CDM0030 . Focus on building a blocklist of known keywords indicative of an injection, such as <script>...</script> , ...=\"javascript:...\", alongside a large lookup of publicly available XSS vectors, likely to be used by scanners and opportunistic assaillants. There are many of these lists available in different places, such as : https://gist.github.com/kurobeats/9a613c9ab68914312cbb415134795b45, and should be combined in one. It's particularly relevant for web scanners, depending on how custom they are they might try to trigger the alert popup to feedback to the adversary if the XSS injection is possible and with which escape, before they add in their own script.  \n",
                "\n### \ud83d\udee1\ufe0f Detect creation of a new AWS Amplify website\n\n\ud83d\udd11 **Identifier** : `CDM0034`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0034%5D-Detect-creation-of-a-new-AWS-Amplify-website)\n\n---\n\nAny SOC will have to react to the creation of any amplify site, in order to  determine whether or not a valid business purpose or threat actor Activity lies behind the Amplify creation. It's advised to use email automation to inquire from registered contacts whether or not an actual business purpose or action was behind with a 24 or 48 deadline to react in case it was not,  and in case no valid business action/purpose can be identified, treat the  event/alert as a potential incident. \n",
                "\n### \ud83d\udee1\ufe0f Detect changes to existing AWS Amplify website\n\n\ud83d\udd11 **Identifier** : `CDM0035`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0035%5D-Detect-changes-to-existing-AWS-Amplify-website)\n\n---\n\nAny SOC will have to react to the modification of any amplify site, in order to  determine whether or not a valid business purpose or threat actor Activity lies behind the Amplify creation. It's advised to use email automation to inquire of registered contacts whether or not an actual business purpose or action was behind with a 24 or 48 deadline to react in case it was not,  and in case no valid business action/purpose can be identified, treat the  event/alert as a potential incident. Of course a 24/48 window would enable a threat actor to fully complete the attempted exfiltration, but very few SOCs will have the mandate to block a website if no approved pre-release ticket  exists. If a SOC has the mandate to restrict all access to the Amplify website following a change until analyzed, this would be more secure. \n",
                "\n### \ud83d\udee1\ufe0f Monitor User and Machine Active Directory Certificate Enrollments\n\n\ud83d\udd11 **Identifier** : `CDM0036`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0036%5D-Monitor-User-and-Machine-Active-Directory-Certificate-Enrollments)\n\n---\n\nFrom a blueteam perspective, several behaviors can be detected when  exploiting such attack path.  In addition, the interaction with the ADCS instance could be an interesting  way to detect Masky execution. The Certified Pre-Owned article describes  detection and preventive actions that could be applied on ADCS environment.  From the listed detection methods, the one referenced DETECT1 recommends to  monitor the users\u2019 certificates enrollement via the Event ID 4886  (\u201cCertificate Services received a certificate request\u201d) and their approval  via the Event ID 4887 (\u201cCertificate Services approved a certificate request  and issued a certificate\u201d).   Source: see references  https://z4ksec.github.io/posts/masky-release-v0.0.3/#detection-vectors \n",
                "\n### \ud83d\udee1\ufe0f CrackMapExec related artifacts on endpoints\n\n\ud83d\udd11 **Identifier** : `CDM0037`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0037%5D-CrackMapExec-related-artifacts-on-endpoints)\n\n---\n\nFor this detection, it's the goal to detect the presence of known hashes,  file names and download links for CrackMapExec(CME) and all of it's  modules. Find modules:  https://wiki.porchetta.industries/getting-started/using-modules Detect the presence of known hashes,  file names and download links for CrackMapExec(CME) and all of it's  modules. A lookup or watchlist will need to be created to store related artifacts. It is preferable to involve threat intelligence to validate if this process could be automated, as hash values would change frequently, and download location may change.  Find modules:  https://wiki.porchetta.industries/getting-started/using-modules https://pypi.org/project/crackmapexec/   Detection can occur during download when/if possible or upon detection of hashes, file names or relevant file meta data on disk. \n",
                "\n### \ud83d\udee1\ufe0f Traffic to customervoice.microsoft.com\n\n\ud83d\udd11 **Identifier** : `CDM0038`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0038%5D-Traffic-to-customervoice.microsoft.com)\n\n---\n\nAny outbound traffic to, or DNS requests looking up the subdomain of  Microsoft in question, customervoice.microsoft.com, can potentially be  an indicator of someone clicking on a phishing link in email or sent via other services to a user.   Useful artifacts to support rule creation:   - Endpoint HTTP Proxy   - Windows Netconn API   - HTTP Request Code 200   - HTTP Request code 302 \n",
                "\n### \ud83d\udee1\ufe0f Accepted AWS VPC peering requests\n\n\ud83d\udd11 **Identifier** : `CDM0039`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0039%5D-Accepted-AWS-VPC-peering-requests)\n\n---\n\nA VPC peering request is a request to connect one network (subnet) to  another on either specific IP to IP and specific port to port, but it can  also be much wider than that, opening all ports on all IP addresses between two networks.  VPC peering requests originating from inside own organization are expected but they are expected to be rare. Requests originating from outside own organization will be even rarer. However, the requests are harmless, unless they are accepted by the VPC administrator within own AWS account/VPC. Any  accepted VPC peering should be followed up by automation to ensure that the  operational team behind the VPC peering acceptance meant to accept this  peering and that this is not an illicit peering acceptance. \n",
                "\n### \ud83d\udee1\ufe0f Detect running container images with exploitable vulnerabilities\n\n\ud83d\udd11 **Identifier** : `CDM0040`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0040%5D-Detect-running-container-images-with-exploitable-vulnerabilities)\n\n---\n\nUse runtime scanner to analyze running container images to provide full security coverage  for Kubernetes clusters and Docker hosts as scanning just registries may not catch containers deployed from other sources. \n",
                "\n### \ud83d\udee1\ufe0f Windows environment lateral movement via SMB protocol\n\n\ud83d\udd11 **Identifier** : `CDM0041`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0041%5D-Windows-environment-lateral-movement-via-SMB-protocol)\n\n---\n\nExample guidelines found below. This is not necessarily the only way to achieve remote code execution via SMB. Add further guidelines as  needed, when/as relevant.  Source for below guidelines:  https://z4ksec.github.io/posts/masky-release-v0.0.3/#detection-vectors First of all, Masky heavily relies on the SMB protocol to execute remote  code on the target, but also to deploy the agent and retrieves the results.  Offensive tools relying on this protocol typically interact with three  shares: C$, ADMIN$ and IPC$. Wherever the C$ and ADMIN$ shares are mounted  as local administrator and are used to push or retrieve files, the IPC$ is  related to the usage of named pipes exposed by the remote system. It  basically allows to interact with the features exposed on the target  through legitimate protocols. Indeed, the DCERPC protocol allows, as it  names suggest, to call remote procedures allowing for example to create  services (via \\pipe\\svcctl) or scheduled tasks (via \\pipe\\atsvc). I  strongly recommend diving into Impacket source code and especially their  example scripts to understand how it works (smbexec.py, atexec.py, etc.).  From this information, the following Windows event log IDs can be  collected on your SIEM to create detection rules for such remote code  execution over SMB:  4698: A schedule task was created; 4699: A schedule task was deleted; 4702: A schedule task was updated; 7045: A new service was created; 5145: A network share object (file or folder) was accessed.  The use of service or schedule tasks in a short period of time (e.g.  creation, modification or deletion) could be an interesting weak signal to correlate with administrative shares interactions (C$ / ADMIN$), as well as the IPC$ special share. Indeed, this could be a sign of the use of such lateral movement techniques. False positives can occur based on these rules depending on the administration tools used through the  corporate LAN (e.g. PSEXEC). To go deeper in such detection, rules can be combined to identify the spawning of suspicious lolbins, unsigned  binaries or commonly executed recognition commands (e.g. whoami, net  user, etc.) from the process tree of the schtasks.exe (schedule tasks)  or winexesvc.exe (services) processes. \n",
                "\n### \ud83d\udee1\ufe0f Sentinel connector impaired\n\n\ud83d\udd11 **Identifier** : `CDM0042`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0042%5D-Sentinel-connector-impaired)\n\n---\n\nAny true positive of an alert from a MDR built from this CDM would mean that an attacker has control of credentials/service principal required to  disconnect, delete or update a sentinel connector.   Detections should utilize the SentinelHealth table and catch all of the  actions 'delete' 'disconnect' 'update'.  Search example for this provided: let lastestStatus = SentinelHealth where TimeGenerated > ago(5m) where OperationName == 'Data fetch status change' where Status in ('Success', 'Failure') project TimeGenerated, SentinelResourceName, SentinelResourceId, LastStatus = Status summarize TimeGenerated = arg_max(TimeGenerated,*) by SentinelResourceName, SentinelResourceId; let nextToLastestStatus = SentinelHealth | where TimeGenerated > ago(5m) | where OperationName == 'Data fetch status change' | where Status in ('Success', 'Failure') | join kind = leftanti (lastestStatus) on SentinelResourceName, SentinelResourceId, TimeGenerated | project TimeGenerated, SentinelResourceName, SentinelResourceId, NextToLastStatus = Status | summarize TimeGenerated = arg_max(TimeGenerated,*) by SentinelResourceName, SentinelResourceId;   lastestStatus | join kind=inner (nextToLastestStatus) on SentinelResourceName, SentinelResourceId | where NextToLastStatus == 'Success' and LastStatus == 'Failure'  another example provided: AzureActivity | where OperationNameValue contains \"MICROSOFT.SECURITYINSIGHTS/DATACONNECTORS/DISCONNECT/ACTION\"  or OperationNameValue contains \"MICROSOFT.SECURITYINSIGHTS/DATACONNECTORS/DELETE/ACTION\"  or OperationNameValue contains \"MICROSOFT.SECURITYINSIGHTS/DATACONNECTORS/UPDATE/ACTION\"  and for custom sentinel connectors separate searches in the tables of the  custom connectors are needed: Custom_Connector_table_name | where TimeGenerated > ago(45m) where 45m is the interval with which you receive log data for a specific  custom connector \n",
                "\n### \ud83d\udee1\ufe0f Detection for duplication of access token in a new process to elevate privileges\n\n\ud83d\udd11 **Identifier** : `CDM0043`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0043%5D-Detection-for-duplication-of-access-token-in-a-new-process-to-elevate-privileges)\n\n---\n\nThreat actors can create a new access token with the duplication token function DuplicateToken(Ex) and after that to use another function -  'CreateProcessWithTokenW' to create a new process running under the security context of a different user. This technique is used for impersonation purposes.  The function CreateProcessWithTokenW is related to the process winbase.h The process that calls CreateProcessWithTokenW must have the SE_IMPERSONATE_NAME  privilege.  The following code can be used to steal the token with open of a new process: #include \"stdafx.h\"#include #include int main(int argc, char * argv[]) {char a;HANDLE processHandle;HANDLE tokenHandle = NULL;HANDLE duplicateTokenHandle = NULL;STARTUPINFO startupInfo;PROCESS_INFORMATION processInformation;DWORD PID_TO_IMPERSONATE = 3060;wchar_t cmdline[] = L\"C:\\\\shell.cmd\";ZeroMemory(&startupInfo, sizeof(STARTUPINFO));ZeroMemory(&processInformation, sizeof(PROCESS_INFORMATION));startupInfo.cb = sizeof(STARTUPINFO);        processHandle = OpenProcess(PROCESS_ALL_ACCESS, true, PID_TO_IMPERSONATE);OpenProcessToken(processHandle, TOKEN_ALL_ACCESS, &tokenHandle);DuplicateTokenEx(tokenHandle, TOKEN_ALL_ACCESS, NULL, SecurityImpersonation, TokenPrimary, &duplicateTokenHandle);                        CreateProcessWithTokenW(duplicateTokenHandle, LOGON_WITH_PROFILE, NULL, cmdline, 0, NULL, NULL, &startupInfo, &processInformation);std::cin >> a;    return 0;}   Detection objectives:   Create a rule to monitor if the following API calls are executed:  - OpenProcess() - OpenProcessToken() - ImpersonateLoggedOnUser() - DuplicateTokenEx() - CreateProcessWithTokenW()  Monitor for running CreateProcessAsUser or CreateProcessWithLogonW functions.  Monitor for executed processes (for example winbase.h) that may modify access  tokens to operate under a different user or system security context to perform  actions and bypass access controls.  Monitor for executed process like securitybaseapi.h which is related to the  function DuplicateTokenEx and can craete a new access token.  Detection objectives based on SACL bypass, manipulated with NtObjectManager.  NtObjectManager is a module in PowerShell that can access NT object manager  namespace and can be installed with Install-Module option. The detection is able to get alerts when winlogon.exe is accessed with specific access rights defined in SACL (Security Access Control List)  auditpol /set /category:\"Object Access\" /success:enable /failure:enable $p = Get-NtProcess -name winlogon.exe -Access GenericAll,AccessSystemSecurity Set-NtSecurityDescriptor $p \u201cS:(AU;SAFA;0x1400;;;WD)\u201d Sacl  To steal an access token from a SYSTEM process the BUILTIN\\Administrator  must be the TokenOwner to perform OpenProcessToken() for a process.  Monitor for OpenProcess() with the PROCESS_QUERY_LIMITED_INFORMATION  access right against SYSTEM processes protected by Protected Process Light (PPL)  If (Event ID) 4656 (Task category: Kernal Object) is gerenated this may indicate  the process that request access and access rights requested. This potentially could be an indicator for process query information. \n",
                "\n### \ud83d\udee1\ufe0f Azure Microsoft.GuestConfiguration resource provider registration\n\n\ud83d\udd11 **Identifier** : `CDM0044`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0044%5D-Azure-Microsoft.GuestConfiguration-resource-provider-registration)\n\n---\n\nAn Azure resource provider is a collection of REST operations that provide  functionality for an Azure service. For example, the Key Vault service  consists of a resource provider named Microsoft.KeyVault. The resource  provider defines REST operations for working with vaults, secrets, keys,  and certificates. (Source: Microsoft link in references).   The Microsoft.GuestConfiguration resource provider is a pre-requisite for  the steps needed to implementing persistence using the Azure Microsoft Policy remediations, see the cloudbrothers.info reference.   When Azure Defender for Cloud is in use, the Microsoft.GuestConfiguration  resource provider is automatically registered, in which case the detection  will not be very useful. When Azure Defender for Cloud is not in place, a  detection for this CDM can yield information that a threat actor is  pursuing persistence, but can also be false positive prone, as example due  to activation of Azure Defender for Cloud.   Any automation involving democratization of security, such as emails or  social media messages to involved users need to contain enough context to explain clearly which actions taken by a user could have led to  registration of the Microsoft.GuestConfiguration resource provider. \n",
                "\n### \ud83d\udee1\ufe0f Detection of Linux kernel module loading\n\n\ud83d\udd11 **Identifier** : `CDM0045`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0045%5D-Detection-of-Linux-kernel-module-loading)\n\n---\n\nMonitor the Linux host for kernel module load attempts by monitoring insmod command execution or processes using init_module syscall. By default Linux  system does not log module load events. Auditing needs to be performed by  external tool like auditd. Detectecion can be performed with Falco or  Tracee. \n",
                "\n### \ud83d\udee1\ufe0f VPC peering requests received from inside own AWS organization\n\n\ud83d\udd11 **Identifier** : `CDM0046`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0046%5D-VPC-peering-requests-received-from-inside-own-AWS-organization)\n\n---\n\nA VPC peering request is a request to connect one network (subnet) to  another on either specific IP to IP and specific port to port, but it can  also be much wider than that, opening all ports on all IP addresses between two networks.  VPC peering requests originating from inside own organization are expected but they are expected to be rare. Each such request should be tracked down  with the operational team behind using automation to ask for confirmation  that the VPC peering request was expected behaviour and is not malicious. \n",
                "\n### \ud83d\udee1\ufe0f Detect Container Breakout Exploit via runc vulnerablity\n\n\ud83d\udd11 **Identifier** : `CDM0047`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0047%5D-Detect-Container-Breakout-Exploit-via-runc-vulnerablity)\n\n---\n\nDetect linking and writing to /proc/self/exe \n",
                "\n### \ud83d\udee1\ufe0f Detect secrets embedded in container images\n\n\ud83d\udd11 **Identifier** : `CDM0048`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0048%5D-Detect-secrets-embedded-in-container-images)\n\n---\n\nDetection may be possible by using a regular expression engine with set of  rules to detect credentials and sensitive configuration data embedded into  container images.   Perform scans on images in CI/CD pipelines, on source code repositories,  container registries and on running containers.  \n",
                "\n### \ud83d\udee1\ufe0f Public AWS S3 bucket\n\n\ud83d\udd11 **Identifier** : `CDM0049`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0049%5D-Public-AWS-S3-bucket)\n\n---\n\nDetect changes to S3 buckets that make either files or whole buckets publicly accessible.  Detections should catch buckets that my accidentally be exposed online using for example canary tokens.  Additionally, all buckets within an AWS organization should be continuously scanned to detect publicly accessible buckets and files. \n",
                "\n### \ud83d\udee1\ufe0f DNS activity related to potential malicious server\n\n\ud83d\udd11 **Identifier** : `CDM0050`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0050%5D-DNS-activity-related-to-potential-malicious-server)\n\n---\n\nThe objective is 2-fold: - To detect a DNS resolution from a server for a new FQDN not seen before from that server or at coporate level. This could be a  sign for example of drive-by-download when followed by few TCP or UDP  requests or command&control traffic when regular traffic occurs over time between internal server and external resource.   - To detect a series of DNS queries that could be a sign of tunneling command&control (beaconing) or exfiltration over DNS.  Detection on DNS resolution might be a weak signal that would need to be cross-correlated with information from passive DNS databases (age of the hostname, resolved IPs) and the reputation of both hostnames and IPs  (MISP, virustotal, RiskIQ) \n",
                "\n### \ud83d\udee1\ufe0f TCP or UDP outbound traffic to an unusual destination or port\n\n\ud83d\udd11 **Identifier** : `CDM0051`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0051%5D-TCP-or-UDP-outbound-traffic-to-an-unusual-destination-or-port)\n\n---\n\nThe objective is to detect outbound connection attempts from servers to  unusual external resources or on unusual port .  Check any outbound connection attempts (src ports > 1024)  and destination port is unique for the destination IPs over the attempts \n",
                "\n### \ud83d\udee1\ufe0f Customervoice.microsoft.com link in email or other message history\n\n\ud83d\udd11 **Identifier** : `CDM0052`\n\n\ud83d\udd25 **Criticality** : \ud83d\udd2b Low  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0052%5D-Customervoice.microsoft.com-link-in-email-or-other-message-history)\n\n---\n\nAny email or messaging history mentioning in any way the subdomain  customervoice.microsoft.com can be an indicator that a phishing campaign is ongoing, and could lead to IOCs that could result in new proxy blocks, or  new detections being built.   \n",
                "\n### \ud83d\udee1\ufe0f Honeytoken accessed from private AWS S3 bucket\n\n\ud83d\udd11 **Identifier** : `CDM0053`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0053%5D-Honeytoken-accessed-from-private-AWS-S3-bucket)\n\n---\n\nThe goal of this detection objective is to use honeytokens to detect  abnormal activity in AWS S3 buckets.   Several types of honeytokens can be deployed into S3 buckets, as example using the Thinkst Canary canary.tools service:  One option is to set up honeytokens and upload on the bucket  embedded in a word file as a macro, or as credentials in a kubeconfig file, or a script containing a fake AWS key, and then wait for an attacker to open  the uploaded file or try to use the discovered 'AWS credential' to see what  can access.  Another option is to use a honeytoken that will alert even on someone listing a booby-trapped file in an S3 bucket.  Monitor for at least these 2 honeytoken alerts, but others can be valid also/instead  depending on your implementation: 1. An AWS API Key Canarytoken was triggered by 2. A MS Word Document Canarytoken was triggered by \n",
                "\n### \ud83d\udee1\ufe0f Azure infrastructure modifications to a different resource group\n\n\ud83d\udd11 **Identifier** : `CDM0054`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0054%5D-Azure-infrastructure-modifications-to-a-different-resource-group)\n\n---\n\nAzure CLI has a wide reach, and can be used from any deployed compute resource in Azure. In general, it would be expected that operational teams use the Azure CLI to perform tasks within a relevant resource group in  Azure, whereas activities performed between resource groups can be an  indicator of abnormal behaviour.   becomes available. Until then, the goal is to detect any change done from  the Azure CLI into another resource group.   As part of building detections, it is important to retrosearch in order to  baseline any already-existing false positives.  \n",
                "\n### \ud83d\udee1\ufe0f Changes in Azure to Microsoft Policy Remediations\n\n\ud83d\udd11 **Identifier** : `CDM0055`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0055%5D-Changes-in-Azure-to-Microsoft-Policy-Remediations)\n\n---\n\nDetection of threat actor persistence efforts through Azure Automated  Machine Configurations can be done by detecting any changes to Azure Policy that implements remediations.  Remediations can be deployed either on a resource group or for single VMs,  or any combinations of resource groups and machines as detailed in the  Azure Policy scope.  Any deployed remediation will need to be investigated with the teams  involved.  \n",
                "\n### \ud83d\udee1\ufe0f Detect protocol DDoS\n\n\ud83d\udd11 **Identifier** : `CDM0056`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0056%5D-Detect-protocol-DDoS)\n\n---\n\nProtocol attacks look to exhaust resources of a server or those of its  networking systems like firewalls, routing engines, or load-balancers. An example of a protocol attack is the SYN flood attack.Before two  computers can initiate a secure communication channel,they must perform a TCP handshake.A TCP handshake is a means for two parties to exchange  preliminary information. A SYN packet is typicall the first step of the TCP handshake, indicating to the server that the  client wants to start a new channel. In a SYN flood attack, the attacker floods the server with numerous SYN packets, each containing spoofed IP addresses. The server responds to each packet (via SYN-ACKs), requesting the client to complete the handshake.However,  the client(s) never respond, and the server keeps waiting. Eventually, it crashes after waiting too long for too many responses. \n",
                "\n### \ud83d\udee1\ufe0f Detect use of msiexec to establish remote connection over http(s)\n\n\ud83d\udd11 **Identifier** : `CDM0057`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0057%5D-Detect-use-of-msiexec-to-establish-remote-connection-over-http%28s%29)\n\n---\n\nThe objective is to detect remote connection over http(s) by using msiexec.exe  to call out to its infrastructure, often compromised QNAP devices,  using HTTP requests that contain a victim\u2019s user and device names.     Verify that the domain reach is indeed malicious and focus on the proxy logs  if allowed actions has been seen. \n",
                "\n### \ud83d\udee1\ufe0f SMB connection attempt to unusual or external SMB share\n\n\ud83d\udd11 **Identifier** : `CDM0058`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0058%5D-SMB-connection-attempt-to-unusual-or-external-SMB-share)\n\n---\n\nUsing various threat vectors, attacker may trigger a connection to a network share  on a SMB or WebDav server under their control.    The objective is to detect SMB network share connection attempts  (failure or success) at network level.  ### monitor UNC path pointing to external SMB network shares  In network traffic or proxy logs,   - look for connection to standard SMB port   - check Microsoft standard using agents: they contain the string WebDav   - if plain http, inspect http header to find \"Authorization: NTLM\" string.  \n",
                "\n### \ud83d\udee1\ufe0f SSH access attempt to C3 ESXi console\n\n\ud83d\udd11 **Identifier** : `CDM0059`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0059%5D-SSH-access-attempt-to-C3-ESXi-console)\n\n---\n\nDIGIT C3 has set a policy to have SSH service disabled on ESXi servers. detecting a successful SSH session on an ESXi plateform has to be reported and investigated  This detection objective may also report on failed session attempts as  this indicates that the SSH service is running. \n",
                "\n### \ud83d\udee1\ufe0f unusual SSH connections on server\n\n\ud83d\udd11 **Identifier** : `CDM0060`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0060%5D-unusual-SSH-connections-on-server)\n\n---\n\nSSH sessions between stations and servers or between non-management servers and servers should not occured at EC data centres. Such SSH sessions have to be handled under DIGIT PAM service.  If such session are initiated by accounts under control of system admin  persons (they belong to specific cudgroup), there should be no alert as  those scenarios are covered by MDR under [BDR003] DIGIT C3 PAM service  - access policy for SSH sessions \n",
                "\n### \ud83d\udee1\ufe0f Hashicorp vault admin connects from unexpected clients\n\n\ud83d\udd11 **Identifier** : `CDM0061`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0061%5D-Hashicorp-vault-admin-connects-from-unexpected-clients)\n\n---\n\nHashicorp Vault platform is used to deliverr SAM service at EC.  Privileged vault admin accounts have root access to the platform and they can perform all operations on it.   A policy has been set to prevent vault admin to read secrets stored on namespaces. This is covered by another CDM.  A vault admin must access Hashicorp vault admin console from PAM service. \n",
                "\n### \ud83d\udee1\ufe0f Hashicorp vault admin reads secrets\n\n\ud83d\udd11 **Identifier** : `CDM0062`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0062%5D-Hashicorp-vault-admin-reads-secrets)\n\n---\n\nHashicorp Vault platform is used to deliverr SAM service at EC.  A policy has been set to prevent vault admin from reading secrets stored on namespaces. Vault admins are allowed to list secrets but not to read their values.  A vault admin can modifiy this policy in order to get read rights on secrets. The objective is to detect whenever a vault admin reads a secrets.  All operations on Hashicorp Vault are recorded in audit logs and those logs collected on the SIEM  \n",
                "\n### \ud83d\udee1\ufe0f Detect changes to repository visibility\n\n\ud83d\udd11 **Identifier** : `CDM0063`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0063%5D-Detect-changes-to-repository-visibility)\n\n---\n\nPrivate repositories should not be exposed to the public. Detecting involves monitoring for changes to the repository visibility settings. Alerting can be achieved  by monitoring  the relevant SCM platform audit logs for events and changes in the visibility parameters or for an event with such description.  - For Bitbucket: repo:updated: This event is triggered when a repository is updated, and includes  information about the repository, including its visibility.   Looking for changes to the is_private field to detect changes in visibility.  - For GitLab: ProjectChangeVisibilityEvent: This event is triggered when the visibility of a project changes.  Looking for changes to the visibility_level field to detect changes in visibility.  - For GitHub: \"publicized\" or \"privatized\" actions in the RepositoryEvent:  These events are triggered when a repository's visibility is changed from private to public, or vice versa. Searching for these events in the action field of the event payload. \n",
                "\n### \ud83d\udee1\ufe0f Changes in the build plan\n\n\ud83d\udd11 **Identifier** : `CDM0064`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0064%5D-Changes-in-the-build-plan)\n\n---\n\nDetection of an change to the branch protection configuration is possible by setting up monitoring and alerting on the SCM platform audit logs. Audit logs should include records of this activity  Some of the relevant audit events which might indicate such activity are:  For Bamboo: entity_type: This defines if this log was for a system setting, Null (for Global audit entries), DeploymentProject, Plan, or ImageConfig (for Elastic Images) field_header: A description of the field that is being changed msg: A description of the change that is taking place new_value:\tThe new value that caused the Log to be taken old_value:\tThe value before the change  By monitoring these audit events, you can detect when a build plan is changed, and take appropriate action to ensure that your build process is secure and reliable.  All audit logs from the SCM / CI/CD platforms should be collected and stored in SIEM. \n",
                "\n### \ud83d\udee1\ufe0f Detect modified branch protection\n\n\ud83d\udd11 **Identifier** : `CDM0065`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0065%5D-Detect-modified-branch-protection)\n\n---\n\nBranch protection rules are in place as a safety mechanism for accidental or intentional deployment of bad code to repositories.  Detection of an change to the branch protection configuration is possible by setting up monitoring and alerting on the SCM platform audit logs. Audit logs should include records of this activity  **For Bitbucket** - Project branch model created (ProjectBranchModelConfigurationCreatedEvent) - Project branch model deleted (ProjectBranchModelConfigurationDeletedEvent) - Project branch model updated (ProjectBranchModelConfigurationUpdatedEvent) - Project branch permission added (ProjectRefRestrictionAddedEvent) - Project branch permission deleted (ProjectRefRestrictionDeletedEvent) - Project branch permission updated (ProjectRefRestrictionUpdatedEvent)  **For Gitlab** - \"Changed protected branch\" : Triggered when branch protection is changed on a branch. - \"Removed protected branch\" : Triggered when branch protection is removed on a branch  **For Github** - \"protected_branch\" category actions: - \"policy_override\": Triggered when a branch protection requirement is overridden by a repository administrator. - \"destroy\" : Triggered when branch protection is disabled on a branch. - \"update_require_code_owner_review\" : Triggered when enforcement of required Code Owner review is updated on a branch.  All audit logs from the SCM platforms should be collected and stored in a SIEM. \n",
                "\n### \ud83d\udee1\ufe0f Detect non-authorized access to security or network appliances\n\n\ud83d\udd11 **Identifier** : `CDM0066`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0066%5D-Detect-non-authorized-access-to-security-or-network-appliances)\n\n---\n\n### Detect unauthorised access to out-of-band management interface To use this strategy, review the architecture and logical network design of the out-of-band management segment together with the sysadmin team. Ensure the proper logs are collected to suppot the following strategies.    #### Deviation from defined procedures or baseline This strategy relies on processing any defined secops procedures (who can  connect from where, when to do actions) or observed baseline over 1+ month  of activity.    Then detection rules can be built using reference list of source hosts/Ips,  accounts and/or actions.    This approach is based on deviation from known states. It is prone to False  Positive (when a new sysadmin account is created, when a source host  changes, etc.) or **False Negative** (if sysadmins are allowed to use  their regular station (not a Privileged Access Workstation dedicated for  sysadmin tasks) to connect directly to management interface/console and  the workstation has been compromised).  ### Detect unauthorised access or activity from inline interfaces  Security or Network appliances deliver network services to protect the  infrastructue. Therefore they have network interfaces processing the  traffic and they can be targeted via those \"Internet-facing\" interfaces. This applies also to appliancees which are not on front layer (i.e.  directly connected to ISP router), but to any appliance that will process IP packets received from Internet for example up to Reverse  Proxies or Web Application Firewalls (typically after a RPS or a WAF inspection a layer 7 has taken place and new sessions are establised  between RPS and Web servers.)  #### Unusual source or request sent to network appliance itself. This is mainly applicable to appliances which have a web-based management  interface.    If such interface is misconfigured (human error, or left over  after troubleshooting with vendor's experts over direct remote sessions) or not well protected, it can be exposed to Internet clients.    Reviewing vulnerability scanner results (either from the company team or public ones such as shodan, etc.) may help to identify such exposed accesses.  Even if well configured, identifying new URL path might be an indication of webshell attack (sucessful or attempts) and/or a Zero-day vulnerability  identified on the products.  ### network activity without valid account authentication Activity towards the appliance is observed towards resources that require  prior authentication either without account or with an account but there is  no valid authentication sequence related.  #### Change of configuration files Monitoring audit logs may reveal changes on configuration which are out of regular procedures. \n",
                "\n### \ud83d\udee1\ufe0f Disabling or modifying security tools\n\n\ud83d\udd11 **Identifier** : `CDM0067`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0067%5D-Disabling-or-modifying-security-tools)\n\n---\n\nMonitor audit or security logs for any changes aiming to disable or modify the audit policy, the generation or the collection of  activity, security, or audit logs.  **AWS** Monitor for: - the API calls to disable logging. - StopLogging and DeleteTrail actions.  **on compute resources or devices** Monitor processes and command-line arguments  to see if security tools/services are killed or stop running.    Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Monitoring for changes to other known features used by deployed security tools may also expose malicious activity. Lack of expected log events may be suspicious. \n",
                "\n### \ud83d\udee1\ufe0f Detect fake SSL certificates\n\n\ud83d\udd11 **Identifier** : `CDM0068`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0068%5D-Detect-fake-SSL-certificates)\n\n---\n\nAn attacker will performs an SSL MITM attack to decrypt the HTTPS traffic. The attacker will achieve decryption by creating spoofed certificates when the device requests it from an HTTPS webpage. If the user visits any website with HTTPS via a web browser on the same network, they will see a \"connection is not secure \" warning in the browser.   \n",
                "\n### \ud83d\udee1\ufe0f Detect non-authorized access to endpoint management appliances\n\n\ud83d\udd11 **Identifier** : `CDM0069`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0069%5D-Detect-non-authorized-access-to-endpoint-management-appliances)\n\n---\n\nEndpoint management appliances are critical devices for an organisation.    They are usually placed behind reverse proxy (RPS) and web application  firewalls (WAF). Whenever possible authentication should be managed with an identity provider service like EU LOGIN with multi-factor authentication.  When behind RPS/WAF enhanced monitoring should be in place to detect unusual request, sessions or beacons.  Management should be done from Out-of-Band network segmanet and dedicated management console.    When the appliances need to receive requests from clients over Internet, monitoring should be in place to detect bypass of preventative measures or  use of (**0-day**) unpatched vulnerabilities.    Detection strategies can be based on indicators of attack (pattern on  the URL requests), on unusual or first seen new client (geolocation, new  account, etc.) \n",
                "\n### \ud83d\udee1\ufe0f Script interpreters launched via office applications\n\n\ud83d\udd11 **Identifier** : `CDM0070`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0070%5D-Script-interpreters-launched-via-office-applications)\n\n---\n\nMonitoring script interpreters launched with an Mirosoft Office application as parent process \n",
                "\n### \ud83d\udee1\ufe0f LOLBins Execution Related to Accounts or Group Discovery\n\n\ud83d\udd11 **Identifier** : `CDM0071`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0071%5D-LOLBins-Execution-Related-to-Accounts-or-Group-Discovery)\n\n---\n\nDetect execution of LOLBins related to discovery (or reconnaissance) on endpoints.  The detection approaches can target successive execution in a short period of time on an endpoint, or a large amount of varied execution across a larger timeframe. LOLBins are mostly going to be executed over the command line and spawn processes. Command line arguments for known discovery usage are also a good way to identify LOLBins being executed.  - LOLBins for Windows can be found on the [LOLBAS Project](https://lolbas-project.github.io/) - LOLBins for Unix based systems can be found on the [GTFOBins Project](https://gtfobins.github.io/) - LOLBins leave traces in command line execution logs, and process events \n",
                "\n### \ud83d\udee1\ufe0f Outbound HTTP Proxy traffic from user endpoint towards suspicious site\n\n\ud83d\udd11 **Identifier** : `CDM0072`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0072%5D-Outbound-HTTP-Proxy-traffic-from-user-endpoint-towards-suspicious-site)\n\n---\n\nThe objective is to detect successful outbound HTTP proxy traffic from users'  endpoints to domains/URLs marked as malicious by sandboxing sensors, Threat Intelligence teams via MISP for example or by 3rd-party solutions.  In case the IoC is running a credential harvesting page (as for example targeting Microsoft and other email login credentials), verify is there any successful POST request in user's proxy logs.      Check if from a single user endpoint is having frequent outbound connections to a  suspicious URL, it can be an indicator of some malicious component installed on the endpoint, trying to reach outside to communicate with a C2 server. \n",
                "\n### \ud83d\udee1\ufe0f Spyware app detected on mobile device\n\n\ud83d\udd11 **Identifier** : `CDM0073`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0073%5D-Spyware-app-detected-on-mobile-device)\n\n---\n\n## Apps installed outside official stores app:    ### Android. When a user downloads and installs an app outside of Google Playstore, it should be detected by MTD as a Sideloaded Android app.    The Installer source field in the RAW event will show what package installer was used to install the app, for example: - installer=com.android.vending - app installed via Google Playstore. - installer=null - system app, or app installed via ADB (Android Debug Bridge) - installer=com.google.android.packageinstaller - app downloaded from a 3rdparty   website (e.g. apkpure.com ), or app installed via MDM solution.  ### iOS. When a user sideloads an iOS app then the app should be detected as soon as the user trusts the app from the developer in the Settings > General > Profiles menu, for example: - User downloaded and installed few apps via Third-party iOS App Store TweakBox (www[.]tweakboxapp[.]com) and trusts the app developer.   ## Devices with vulnerable OS version: These devices can be targeted to exploit zero-click vulnerabilities, including atypical Drive-By  downloads as initial infection vectors.    Apps are usually masqueraded as ISP or messaging apps.    Any MTD solution must have related signatures to alert on this (via Jailbreaking detection on iOS,  or via Unknown sources enabled on Android).    It is possible to find out if a device running a vulnerable Android or iOS version is being monitored: - Unexpected battery drain, overheating, and strange behavior from the device OS or apps. - Settings such as GPS and location functions may unexpectedly turn on or random reboots.  - If device is suddenly using far more data than normal, this could be an indication   that information is being sent from or remote connections are active.   Some actions to mitigate the risk of being subject to such surveillance:     - Reboots: Reboot the device to prevent persistence from taking hold. Some infections   have appeared to be based on zero-day exploits with low persistence. - Disable iMessage and FaceTime (iOS): A number of new Safari and iMessage exploits   have been developed in recent years.  - Use an alternative browser other than Safari or default Chrome. Some exploits do   not work well on alternatives such as Firefox Focus.  \n",
                "\n### \ud83d\udee1\ufe0f Abnormal Scheduled Tasks Activity on Windows\n\n\ud83d\udd11 **Identifier** : `CDM0074`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0074%5D-Abnormal-Scheduled-Tasks-Activity-on-Windows)\n\n---\n\nMonitor non-legitimate or unknown Scheduled Tasks on Windows hosts (AD, Server, WKS)    The strategies should encompass all the ways described in TVMs to create schedule task  (outcome of the threat vector is a schedule task) using executable like powershell.exe  (New-ScheduledTaskAction), schtasks.exe, at.exe, Task Scheduler Service, taskhostw.exe,  WMI, etc..    The detection relies on a baseline done with a proactive assessment of what is normal,  research with system admins what are the defined (automated) processes and authorised  accounts/groups.    There might be distinct MDRs to reflect detection within maintenance windows (or working  hours) and out-of-band creation of scheduled tasks as the severity might be different even for what is normal (excluded) during maintenance windows/defined processes.    The alert notification should clearly state which course of action has led to a schedule task (this should in fine point to one of the TVMs mentioned in the CDM). \n",
                "\n### \ud83d\udee1\ufe0f Hashicorp vault admin changes policy\n\n\ud83d\udd11 **Identifier** : `CDM0075`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0075%5D-Hashicorp-vault-admin-changes-policy)\n\n---\n\nHashicorp Vault platform is used to deliver the \u200b\u200b\u200b**S**ecure **A**ccess  **M**anagement (SAM) service at EC.    Policies are defined by vault administrators in compliance with the  terms of service.  **The objective is to detect whenever a vault administrator changes a policy on the vault and to notify the group functional mailbox.**    All operations on Hashicorp Vault are recorded in audit logs and those logs are collected on the SIEM. \n",
                "\n### \ud83d\udee1\ufe0f Detect ransomware running on devices\n\n\ud83d\udd11 **Identifier** : `CDM0076`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0076%5D-Detect-ransomware-running-on-devices)\n\n---\n\nThere are different ways to detect Ransomware, either through tools such as EDR,  network traffic analysis, event log monitoring, and the implementation of  detection strategies based on signatures, heuristics and anomalous behaviours.    Some of the strategies for detecting Ransomware include the following:  ### 1. Process monitoring:  Ransomware may be detected through the creation of new processes, the  execution of suspicious processes, etc. The detection can be built on  patterns related to the malware used or on unsual invocations (including  unusual parameters on the command line) of legit binaries (for example  use of vssadmin.exe to manipulate the volume shadow copies of a file  system).    It might be also an option to detect process establishing a network  connection with external destinations (see strategy 3 below).    ### 2. File activity monitoring:  Ransomware activity could be detected through massive file creation,  mofification, deletion or encryption.  Peaks on file enumeration or  directory browsing might be associated with a ransomware listing files  to encrypt.    Another sign could be files with double extensions. Based on previous  reported attacks, the list of extensions associated with ransomware  includes:    .ecc, .ezz, .exx, .zzz, .xyz, .aaa, .abc, .ccc, .vvv, .xxx, .ttt, .micro,  .encrypted, .locked, .crypto, _crypt, .crinf, .r5a, .XRNT, .XTBL, .crypt,  .R16M01D05, .pzdc, .good  ### 3. Network traffic (or logs) monitoring:  Ransomware may attempt to exfiltrate corporate data therefore monitoring on  unusual outgoing traffic through the proxy towards unusual destinations  couldD be a way to detect ransoware running on a device. \n",
                "\n### \ud83d\udee1\ufe0f Detection of M365 illicit application consent grant attacks\n\n\ud83d\udd11 **Identifier** : `CDM0077`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0077%5D-Detection-of-M365-illicit-application-consent-grant-attacks)\n\n---\n\nThere are various options and approaches accessible for detecting illicit consent  application attacks in M365. Here is a compilation of solutions that provide the ability  to recognize and investigate consent grants and application registrations:  - Azure AD Audit Logs:    The activities from Application Administrative category (registering app,    granting consent etc.) are logged in Azure AD Audit log. Both, user and admin    consent activities (delegated & application permissions) are logged to Azure AD    Audit logs with small differences.  - Azure Workbooks:    Overview of consent requests and sign-in from users to the granted apps. With the    built-in workbook you can drill down to individual app consents that's extremely    useful when working in the environment with large number of activities in this area.    - Powershell:     There are scripts which can allow us to view the list delegated permission grants like for example:      Get-AzureADServicePrincipal -All $true | .\\Get-AzureADPSPermissionGrants.ps1 -Preload    - KQL Queries:    For discovery of illicit consent application attacks can be used KQL queries.   It is possible to create a querie for any \"Consent to application\" operation,   occurs by a user or app. This could indicate that permissions to access the listed AzureApp   was provided to a malicious actor. Consent to appliction, Add service principal and    Add OAuth2PermissionGrant events should be rare. If available, additional context is added    from the AuditLogs based on CorrleationId from the same account that performed \"Consent to    application\".  - Microsoft Sentinel:      Microsoft Sentinel offers multiple out of the box rules related to the application administrative actions.   Some of them are the followings:          - Rare application consent     - Credential added after admin consented to Application     - Suspicious application consent similar to O365 Attack Toolkit     - Mail.Read Permissions Granted to Application \n",
                "\n### \ud83d\udee1\ufe0f Detect email attachments that could be linked to spearphishing campaign\n\n\ud83d\udd11 **Identifier** : `CDM0078`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0078%5D-Detect-email-attachments-that-could-be-linked-to-spearphishing-campaign)\n\n---\n\nSpearphishing campaigns with suspicious attachments, often come disguised with  multiple extensions, unconventional file types, or cleverly obfuscated names to  bypass initial security checks and dupe recipients into opening them.  Different type of attachments may contain payloads that are currently embedded within the attachment that can cause the download of malware.  ## Several strategies might be used:  **Attachments with double extensions**  - To detect suspicious files with double extensions, email protection solutions  use different types of techniques such as email filtering, content and attachment  scanning, heuristic analysis, link and attachment reputation, APTs, Sandboxing,  WL and BL, among others.  **Attachments with blocked extensions**  - Email security solutions enable the creation of policies with predefined and  customizable lists of blocked file extensions to identify and take action on emails  with attachments matching these extensions. For example, Proofpoint has a module called  \"Exestrip\" which detects malicious extensions and can be configured to notify the user that  a potentially malicious email has arrived and has been deleted.  **Attachment with RTL names / unicodes or puny-code in the name**  - Email security solutions use content analysis techniques to examine file names and  content for right-to-left (RTL) scripting, such as Arabic or Hebrew. This includes character  encoding checks, heuristic analysis and language detection algorithms to identify patterns  or anomalies in RTL languages. Custom rules, regular expressions and specific policies can  be set up to target RTL script detection, which would trigger alerts or quarantines. \n",
                "\n### \ud83d\udee1\ufe0f Detect spear phishing campaign using specific patterns or keywords in email metadata\n\n\ud83d\udd11 **Identifier** : `CDM0079`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0079%5D-Detect-spear-phishing-campaign-using-specific-patterns-or-keywords-in-email-metadata)\n\n---\n\nThe most commons detection patterns are:  - Urgent, yet unknown purchase invoice. - Warning of suspicious activity on the account. - Warning that the account is due to expire. - Urgent payment failed; action required immediately. - Parcel delivery.  The main function of these types of emails patterns is to attract the user attention and  persuade them to take a specific action, whether that be providing sensitive data,  entering links, downloading attachments, etc.   **IMPORTANT** pattern and keywork matching are done on email metadata  received in logs. They include email subjects and attachment names.  Email bodies nor attachment contents are not indexed nor visible in  email-related logs.  Email body or attachment may be processed by automatic security sensors  (Proofpoint Defense) but security analysts do NOT have access to the  content.    Regarding the keywords, the following can be observed in the logs  including subject line and attachment name:  - Invoice:    * Payment Invoice [date]   * Re: Invoice ....  - New:    * New Message from ....   * New Scanned Fax Doc-Delivery for ....   * New FaxTransmission from ....  - Message:   * Message From ....   * You have a New Message   * Telephone Message for ....  - Required:   * Verification Required   * Action Required: Expiration Notice on   * Attention Required. Support ID: ####  - File:   * File- ....   * You have a Google Drive File Shared  - Request:   * Your Service Request ....   * Request Notification: ....  - Action:   * Action Required: [Date]   * Action Required: Review Message sent on [Date]   * [Action Required] Password Expire  - Document:   * File Document ....   * View Attached Documents   * [Name] shared a document with you    ### example of specific patterns attacks   #### Planned phishing campaign exercise   \"A planned phishing campaign that are carried out within organisations,    it can be observed that one of the most outstanding characteristics of    these emails is that they contain common patterns in phishing emails which    is \".... shared a file with you\" and in the body of the message, they attach    a malicious document for the user to click on it\". \n",
                "\n### \ud83d\udee1\ufe0f Detect AWS Cross-Account IAM Activity\n\n\ud83d\udd11 **Identifier** : `CDM0080`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0080%5D-Detect-AWS-Cross-Account-IAM-Activity)\n\n---\n\nThe goal is to monitor and detecte `AssumeRole` events where an IAM role in a different account is requested for the first time.   Monitoring AWS CloudTrail logs is a way to detect suspicious cross-account activity, and based on the evidence found, further checks may be necessary.  When a IAM role is assumed in another AWS account to obtain `cross-account` access to the services and resource in that account, AWS CloudTrail logs  the `cross-account` activity. CloudTrail logs `AssumeRole` calls in the  role-owning account, including the unique ID of the IAM entity assuming the role in the account being accessed. This additional information helps identifying the entity that requested `cross-account` access and then trace its subsequent `cross-account` activity.  Using multiple accounts and roles is perfectly valid behavior.  It's suspicious when an account requests privileges of another account for which it hasn't requested before. \n",
                "\n### \ud83d\udee1\ufe0f Scheduled Tasks and COM Hijacking\n\n\ud83d\udd11 **Identifier** : `CDM0081`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0081%5D-Scheduled-Tasks-and-COM-Hijacking)\n\n---\n\nThe objective is to detect a scheduled task with Custom Handler action to retrieve class ID and using rundll32  to execute any payload build to run as legitimate process based on the class ID. \n",
                "\n### \ud83d\udee1\ufe0f Application connecting to a SMB network share\n\n\ud83d\udd11 **Identifier** : `CDM0082`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0082%5D-Application-connecting-to-a-SMB-network-share)\n\n---\n\nThreat actor uses specially crafted email messages to bypass the default WAV file and instead contains a path to an SMB share controlled by the attacker. When the Universal Naming Convention (UNC) path is accessed this forces an NTLM authentication from the victim to the attacker. The attacker can then steal the leaked NTLM hashes and to impersonate and use them. It's important to note that the malicious email requires no user interaction to conduct this attack.  Monitor for Windows Event IDs:   - 4656 (an application attempts to access the object in such a way that matches the audit policy defined for that object in) - 4663 (an attempt was made to access an object, indicates when a particular operation is performed on an object)  Access or usage of the following Windows registry keys: An interaction with these registry keys could be an indication for access either an SMB or WebDAV-hosted resource.  SMB: `HKLM\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider\\Name` WebDAV: `HKLM\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider\\ProviderPath`  Monitor for the process: C:\\Windows\\System32\\SearchProtocolHost.exe This process may trigger the NetworkProvider registry keys for SMB and WebDAV.  Audit Exchange PowerShell (.ps1) script for indication of mail items that may be used to exploit CVE-2023-23397 vulnerability  Additional possible mitigations:  - Block TCP 445/SMB outbound from the network by using a perimeter, local firewall or via VPN settings. - Add users to the Protected Users Security Group, which prevents the use of NTLM as an authentication mechanism.  - Apply the principle of least privilege by limiting the spread of administrative privileges across the domain.  Search for office sub processes initiation followed by SMB traffic,  which can be requested several times and towards multiples malicious domains. Monitoring outbound SMB traffic is essential to avoid potential payloads retrievals. \n",
                "\n### \ud83d\udee1\ufe0f Detect unusual web requests that could be related to C2\n\n\ud83d\udd11 **Identifier** : `CDM0083`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe2TLP:GREEN**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0083%5D-Detect-unusual-web-requests-that-could-be-related-to-C2)\n\n---\n\nA web request related to a C2 it\u2019s any kind of communication done between an infected endpoint and the command&control server.    The objective is to detect new communications not seen before and anyway followed by regular or repetitive connections in following hours or days (in case there is persistence).    The pace can be regular (beaconing or scripted interaction) or more random (interaction).    We may leverage recurrent activity from specific sources to specific sites or addresses.  We must also keep in mind that a C2 doesn\u2019t have to remain visible for a long time and  attackers use to have backup mechanisms to bring up them infra in different addresses  to remain hidden.    #### Detection techniques to consider:   - Monitor beaconing (regular or repetitive connections)    - Monitor amount of data sent    - Monitor long sessions (reverse shell)    - Monitor unseen/unexpected/unknown sites   - Monitor known IoCs The main challenge to detect potential C2 web requests is that the behaviour is very similar to standard legit communications, in some cases just to remain hidden in plain sight.   It\u2019s also important to consider the entropy of the people browsing, making almost unpredictable what you can expect in a big environment like ours.   To increase the fidelity, but also to accommodate the effort to our resources, we need to combine different detection techniques.   Just by using known IoCs in detection becomes a short-term strategy.    Other log collection to consider: - DNS logs (unexpected resolve requests, huge deviations) - CBC logs (suspicious event followed by proxy communication) - Stamus (malware outbound suricata rules) - FW logs (monitor connections to non standard destination ports) \n",
                "\n### \ud83d\udee1\ufe0f RDP sessions outside PAM or Central Helpdesk service\n\n\ud83d\udd11 **Identifier** : `CDM0084`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0084%5D-RDP-sessions-outside-PAM-or-Central-Helpdesk-service)\n\n---\n\n## RDP session management First implement effective RDP management strategies. This includes configuring detailed  event logs, using security tools to analyze suspicious patterns, integrating with  PAM systems for centralized control, applying group policies to restrict RDP access,  monitoring network traffic for unauthorized connections, setting up alerts and  notifications, conducting regular security audits, and providing staff training to  ensure compliance with authorized access policies   ## For monitoring:  ### Windows event logs  Based on excellent paper mentioned as reference, Windows event logs are a  good basis to monitor on the destination and/or the source of a RDP session (attempt)    The key 3 channels are: - Windows security      * on source device [EventID 4648 4648: A logon was attempted using explicit credentials](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4648)      and service TERMSRV/*     * EventID [4778: A session was reconnected to a Window Station](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4778)     * EventID [4779: A session was disconnected from a Window Station](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4779). - Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\" when Address is not \"LOCAL\" - Microsoft-Windows-TerminalServices-RemoteConnectionManager and EventID=1149  Once a RDP session is identified, check on server for EventID 4624/4625 for successful  authentication. Burst of 4625 could be a sign of RDP brute force attack (RDP servers may accept the RDP sessions but will termintate it if credentials are not valid)  Audit Policies: Ensure that auditing policies on devices are configured to log RDP realated events (success/failure)  ### Network-related monitoring  Look for Remote Desktop Protocol (RDP) traffic, which typically uses  TCP port 3389.  - Firewall logs or proxy logs (tunnel via proxy) on standard port TCP/3389 - network traffic on standard port TCP/3389  Some IDS (suricata) could identify RDP protocol on non-standard port.  Look for connections on port 3389 and identify the source and destination IP addresses. Cross-reference this information with server logs to identify the users involved. \n",
                "\n### \ud83d\udee1\ufe0f detect ICS activity to restricted resources not linked to valid authentication\n\n\ud83d\udd11 **Identifier** : `CDM0085`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0085%5D-detect-ICS-activity-to-restricted-resources-not-linked-to-valid-authentication)\n\n---\n\nThe objective is to detect access to resources on Ivanti Pulse Secure  appliances that require prior authentication from source IPs that cannot  be related to any valid session (successful authentication).    the idea is to spot successful exploit of a vulnerability that allows  to bypass authentication \n",
                "\n### \ud83d\udee1\ufe0f ICS detect outbound network activity\n\n\ud83d\udd11 **Identifier** : `CDM0086`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0086%5D-ICS-detect-outbound-network-activity)\n\n---\n\nsearch for outbound traffic from ICS appliance (traffic initiated by the ICS appliance)    A more specific detection objective could be to detect lateral movement  between ICS appliances or management consoles. \n",
                "\n### \ud83d\udee1\ufe0f ICS logging tampering\n\n\ud83d\udd11 **Identifier** : `CDM0087`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0087%5D-ICS-logging-tampering)\n\n---\n\n- Search for stop or gaps in log collection from Ivanti Pulse Connect (ICS). - search for any signature ID (code) related to logging such as log cleared  or deleted, etc. \n",
                "\n### \ud83d\udee1\ufe0f ICS detect path traversal requests\n\n\ud83d\udd11 **Identifier** : `CDM0088`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0088%5D-ICS-detect-path-traversal-requests)\n\n---\n\nDetect path traversal attempts on Ivanti Pulse Connect (ICS) web components. \n",
                "\n### \ud83d\udee1\ufe0f Detect command injection on ICS Ivanti Connect Secure in URL\n\n\ud83d\udd11 **Identifier** : `CDM0089`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0089%5D-Detect-command-injection-on-ICS-Ivanti-Connect-Secure-in-URL)\n\n---\n\nDetect presence of commands in the URL request (GET POST or other methods).    requests can be HTML or base64 encoded in order to evade detection. \n",
                "\n### \ud83d\udee1\ufe0f Detect Ivanti Connect Secure ICS system modifications\n\n\ud83d\udd11 **Identifier** : `CDM0090`\n\n\ud83d\udd25 **Criticality** : \ud83d\udea8 Severe  | **\u26aaTLP:CLEAR**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphDetection-Models%F0%9F%9B%A1%EF%B8%8F-%5BCDM0090%5D-Detect-Ivanti-Connect-Secure-ICS-system-modifications)\n\n---\n\n- Search for reports from internal integrity checks - search for change in number of files for a given version \n",
                "\n### \ud83d\udee1\ufe0f EC Central Logging and Monitoring Standard\n\n\ud83d\udd11 **Identifier** : `BDR0001`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0001%5D-EC-Central-Logging-and-Monitoring-Standard)\n\n---\n\nThe SOC must perform a meta monitoring of lacking log sources against the central monitoring policy, and identify clients which are not sending data as intended. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT C3 PAM service - access policy for RDP sessions\n\n\ud83d\udd11 **Identifier** : `BDR0002`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0002%5D-DIGIT-C3-PAM-service---access-policy-for-RDP-sessions)\n\n---\n\nThe SOC must monitor RDP access to servers and investigate deviations from the policy. The policy foresees some pre-approved deviations. For them, alerts will be forwarded to agreed list of recipients with CSOC ticket reference and the ticket will be automatically closed. IF a recipient reports back to SOC, case will be reopen and investigated. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT C3 PAM service - access policy for SSH sessions\n\n\ud83d\udd11 **Identifier** : `BDR0003`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0003%5D-DIGIT-C3-PAM-service---access-policy-for-SSH-sessions)\n\n---\n\nThe SOC must monitor SSH access to servers and investigate deviations from the policy. The policy foresees some pre-approved deviations. For them, alerts will be forwarded to agreed list of recipients with CSOC ticket reference and the ticket will be automatically closed. If a recipient reports back to SOC, the case will be reopen and investigated by SOC analysts. \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC activity initiated from outside EC or vetted IP ranges\n\n\ud83d\udd11 **Identifier** : `BDR0004`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0004%5D-ESS-CBC-activity-initiated-from-outside-EC-or-vetted-IP-ranges)\n\n---\n\nSOC must monitor any activity initiated from outside EC or vetted IP ranges to the ESS VMware Carbon Black Cloud (CBC) tenants. The policy foresees some pre-approved deviations, since some tenants might have extra-muros contractors managing the components of the tenants. SOC must send an alert to the tenant owners when the conditions previously described are met.  There is already an event to be whitelisted: when the user confirms the email, during the activation of an account, we will see two audit log entries one from the user IP location and a second from AWS IP. Concretely, the audit log entry is \"Successfully confirmed the email - USER@EMAIL.ADDRESS\" \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC High Privileged activity\n\n\ud83d\udd11 **Identifier** : `BDR0005`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0005%5D-ESS-CBC-High-Privileged-activity)\n\n---\n\nCATCH must monitor any high privileged activity and notify the tenant point of contact related to security monitoring. \n",
                "\n### \ud83d\udee1\ufe0f JRC IES top failed Windows authentication reporting\n\n\ud83d\udd11 **Identifier** : `BDR0006`\n\n\ud83d\udd25 **Criticality** : \u2757 Medium  | **\ud83d\udfe0TLP:AMBER+STRICT**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0006%5D-JRC-IES-top-failed-Windows-authentication-reporting)\n\n---\n\nWeekly release a report on failed authentication accounts (descending order of failed accounts) with additional information: - from where (src IP and/or src host) - Event ID and Error Code (with its meaning) - any successful login for that account and if yes from which devices  Reports will be sent as CSV (comma-separated values) attachment to JRC LISO.\n",
                "\n### \ud83d\udee1\ufe0f SHS CLIMA - Non compliance monitoring and alerting on accesss and usage of CLIMA DBMS\n\n\ud83d\udd11 **Identifier** : `BDR0007`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0007%5D-SHS-CLIMA---Non-compliance-monitoring-and-alerting-on-accesss-and-usage-of-CLIMA-DBMS)\n\n---\n\nrelevant monitoring and detection rules should cover the following cases: - Misuse of EUTL_RO_PUBLIC DBMS Account - Misuse of SECURITY_ADMIN and SECURITY_OFFICER DBMS Accounts - Access from a non-authorized host - Attempt to be accessed by a non-authorized user account - Attempt to be accessed by a unknown database account - Access to unauthorized DBMS business tables - Access to the DB account not permitted - DB01 - Access to the privileged database account outside working hours - DB-02 - Access to non-privileged database account outside working hours - DB-03 - Access to privileged database account inside working hours - DB-04 - DB Console Access from non-authorized host \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC User not signed in for the last 6 months\n\n\ud83d\udd11 **Identifier** : `BDR0008`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0008%5D-ESS-CBC-User-not-signed-in-for-the-last-6-months)\n\n---\n\nCATCH must monitor when a valid account has not signed in for the last 6 months. CATCH must send on a monthly basis a report by email to the EDRT Operational POC of the ESS customer listing all valid accounts that have not signed in for last 6 months with the data of last signed in. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT S2 CATCH CSOC integrations via ES_SPLUNK\n\n\ud83d\udd11 **Identifier** : `BDR0009`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0009%5D-DIGIT-S2-CATCH-CSOC-integrations-via-ES_SPLUNK)\n\n---\n\nA CSOC integration processes correlated alerts coming from one or several analytics or detection platform including ES-SPLUNK itself in order to  cross-correlated and therefore confirm or infirm this is an alert to be qualified by S2 CSIRC.    ## list of analytics or detection platforms:   - ESS CSM (CBC Analytics)   - ESS CSM (CBC Watchlist)   - STAMUS   - Azure Sentinel   - Microsoft Defender for Cloud / Cloud App   - STAMUS   - CANARY Tokens   - SYSDIG   - MTD (Zimperium)   - AWS GuardDuty  A CSOC integration initiates a simple workflow:     1. correlated alert is received from the analytic or detection platform     2. inclusion filters are applied to them     3. exclusion filters applied     4. CSOC temporary exclusion filters when an alert is under qualification     or potential security incident under investigation     5. checks to avoid duplicates      6. cross-checks and enrichment. \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC lack of CBC audit logs\n\n\ud83d\udd11 **Identifier** : `BDR0010`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0010%5D-ESS-CBC-lack-of-CBC-audit-logs)\n\n---\n\nCATCH must monitor that VMware CBC audit logs arrive properly to Splunk for every tenant. CATCH must notify EC DIGIT ESS Functional Mailbox in case they do not arrive to Splunk. \n",
                "\n### \ud83d\udee1\ufe0f ESS EDRT integration settings changed\n\n\ud83d\udd11 **Identifier** : `BDR0011`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0011%5D-ESS-EDRT-integration-settings-changed)\n\n---\n\nCATCH must monitor when the EDRT integration settings are modified  and notify EC DIGIT ESS Functional Mailbox.   \n",
                "\n### \ud83d\udee1\ufe0f ESS CBC lack of CBC alerts\n\n\ud83d\udd11 **Identifier** : `BDR0012`\n\n\ud83d\udd25 **Criticality** : \u2622\ufe0f Emergency  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0012%5D-ESS-CBC-lack-of-CBC-alerts)\n\n---\n\nCATCH must monitor that VMware CBC tenant alerts arrive properly to Splunk. CATCH must notify EC DIGIT ESS Functional Mailbox in case they do not arrive to Splunk. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT C3 PAM service - access policy for Super User sessions\n\n\ud83d\udd11 **Identifier** : `BDR0013`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0013%5D-DIGIT-C3-PAM-service---access-policy-for-Super-User-sessions)\n\n---\n\nThe SOC must monitor PAM super user (sroot) access to servers and investigate deviations from the policy.  The policy does not foresee any usage for this user by the operations team.  It is not allowed for operations team to use the super user (sroot) to connect to RDP, SSH, WEB targets. The only time an sroot user should be used is if eulogin is not available.  For them, alerts will be forwarded to agreed list of recipients with CSOC ticket reference and the ticket  will be automatically closed. IF a recipient reports back to SOC, case will be reopen and investigated. \n",
                "\n### \ud83d\udee1\ufe0f DIGIT protected RPM - access policy violation\n\n\ud83d\udd11 **Identifier** : `BDR0014`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0014%5D-DIGIT-protected-RPM---access-policy-violation)\n\n---\n\nDetect access attempts (success and failure) to the protected RPMs from IPs  not in the vetted IP range list and/or for users not in vetted groups.   ## presentation: ### DIGIT services exposed behind protected RPMs:  - ES-SPLUNK  - SNOW  - CBC  - ES-SPLUNK BREAK-GLASS-SRV  - SPLUNK BREAK-GLASS-SRV  - EFGS-EDCC  ### Protected RPMs in scope   - es-splunk.tech.ec.europa.eu   - es-splunk.acceptance.tech.ec.europa.eu   - digit.service-now.com   - defense-eu.conferdeploy.net   - splunk.acceptance.tech.ec.europa.eu   - splunk.tech.ec.europa.eu   - efgs-nexus.tech.ec.europa.eu   - efgs-truesight.tech.ec.europa.eu   - efgs.tech.ec.europa.eu  ### Combination of DIGIT services with RPMs Each RPM might be exposed to deliver one or several DIGIT services. The combination is documented in lookup  SOC_LT_086_PV-AUT-03_vetted_sites_by_service-include.csv  ### Mapping between DIGIT services and vetted IP ranges The list of IP ranges allowed to access DIGIT services is  maintained in lookup SOC_LT_086_PV-AUT-03_vetted_IP_ranges_by_service-include.csv  ### Mapping between DIGIT services and users The mapping is maintained in lookup  SOC_LT_189_IAM_authorised_user_by_service-exclude.csv    For the moment the mapping is limited to ES-SPLUNK  SOC_LT_189_IAM_authorised_user_ES-SPLUNK-exclude.csv \n",
                "\n### \ud83d\udee1\ufe0f EC-related ServiceNow local account advanced monitoring\n\n\ud83d\udd11 **Identifier** : `BDR0015`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0015%5D-EC-related-ServiceNow-local-account-advanced-monitoring)\n\n---\n\nThe purposes of this BDR is to deploy additional detection rules to protect  access and use of the SaaS ServiceNow instances. THe priority goes to the  instance used in PRODUCTION at https://digit.service-now.com/ but any  instance that may contain EC real data and not just anonymised samples  or data or code that will be moved to PRODUCTION instance.    The objective is to ensure accounts are not comppromise and that data, code  and configuration are not tampered with.  \n",
                "\n### \ud83d\udee1\ufe0f Forensic data configuration for mobile devices\n\n\ud83d\udd11 **Identifier** : `BDR0016`\n\n\ud83d\udd25 **Criticality** : \u26a0\ufe0f High  | **\ud83d\udfe0TLP:AMBER**\n\n\n\n\n\n[See in TIDeMEC Wiki](https://git.s.cec.eu.int/catch/ec-tide/-/wikisCore\\Engines\\documentation\\Knowledge-GraphBusiness-Requests%F0%9F%8F%9B%EF%B8%8F-%5BBDR0016%5D-Forensic-data-configuration-for-mobile-devices)\n\n---\n\nEach time a new MobileIron MDM group is created and added into Zimperium console, the settings template is set to High. This means that location feature is set by default to street - city - country. This feature must be set to None (deactivated).    DIGIT.C6 Mobile Solutions team is responsible to disable the location feature in  compliance with the DPIA and their procedures should have the appropriate  provisions.    To avoid any security incident resulting from a misconfiguration,  DIGIT.S2 is going to monitor when the location feature is enabled for any device managed by DIGIT.C6 Mobile Solutions team.    If enabled, a notification is sent to DIGIT.C6 Mobile Solutions team to  remind them to deactive the feature.   \n"
            ]
        },
        "response": {
            "title": "Incident Response Details",
            "type": "object",
            "description": "Information regarding incident response procedures",
            "required": [
                "alert_severity"
            ],
            "properties": {
                "alert_severity": {
                    "title": "\ud83c\udf21\ufe0f MDR Alert Severity",
                    "type": "string",
                    "description": "Describes the level of attention required to handle the alert generated by the MDR.",
                    "enum": [
                        "Informational",
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "markdownEnumDescriptions": [
                        "\n### \ud83d\udcac Informational\n\n\ud83d\udd11 **Identifier** : `SEV0001`\n\n \n\n\n\n\n\n\n\n---\n\nNo severity level assigned, can suppport correlations or other metrics.\n",
                        "\n### \u2b07\ufe0f Low\n\n\ud83d\udd11 **Identifier** : `SEV0002`\n\n \n\n\n\n\n\n\n\n---\n\nResponse trigger is not necessarily expected, but alert should be handled.\n",
                        "\n### \u2757 Medium\n\n\ud83d\udd11 **Identifier** : `SEV0003`\n\n \n\n\n\n\n\n\n\n---\n\nModerate SLAs required, can be grouped into a larger investigation.\n",
                        "\n### \ud83d\udd25 High\n\n\ud83d\udd11 **Identifier** : `SEV0004`\n\n \n\n\n\n\n\n\n\n---\n\nNeeds attention within tight SLAs alongside a comprehensive investigation.\n",
                        "\n### \ud83c\udd98 Critical\n\n\ud83d\udd11 **Identifier** : `SEV0005`\n\n \n\n\n\n\n\n\n\n---\n\nImmediate and targeted response required, threat to organization absolute.\n"
                    ]
                },
                "playbook": {
                    "title": "\ud83d\udc63 Playbook link",
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the playbook on Confluence",
                    "example": "https://internal-knowledge-base/playbook/account_brute_force"
                },
                "responders": {
                    "title": "\u200d\ud83d\ude92 Alert Handling Team",
                    "type": "string",
                    "description": "Team responsible to handle incoming security alerts",
                    "enum": [
                        "CATCH",
                        "CSIRC",
                        "MARTI",
                        "S1-SA"
                    ],
                    "markdownEnumDescriptions": [
                        "\n### \u200d\ud83d\ude92 CATCH\n\n\ud83d\udd11 **Identifier** : `AHT0001`\n\n \n\n\n\n\n\n\n\n---\n\nCybersecurity Analytics, Trending, Correlations & Hunting\n",
                        "\n### \u200d\ud83d\ude92 CSIRC\n\n\ud83d\udd11 **Identifier** : `AHT0002`\n\n \n\n\n\n\n\n\n\n---\n\nComputer Security Incident Response Centre\n",
                        "\n### \u200d\ud83d\ude92 MARTI\n\n\ud83d\udd11 **Identifier** : `AHT0003`\n\n \n\n\n\n\n\n\n\n---\n\nMalware Analysis, Research and Threat Intelligence\n",
                        "\n### \u200d\ud83d\ude92 S1-SA\n\n\ud83d\udd11 **Identifier** : `AHT0004`\n\n \n\n\n\n\n\n\n\n---\n\nSecurity Assurance and Vulnerability Management\n"
                    ]
                }
            },
            "additionalProperties": false
        },
        "configurations": {
            "title": "\ud83d\udee0\ufe0f Detection System Technical Setup",
            "type": "object",
            "description": "Per system setup of the detection configurations",
            "recomposition": "systems",
            "additionalProperties": false,
            "properties": {
                "carbon_black_cloud": {
                    "title": "Carbon Black Cloud Enterprise EDR",
                    "description": "VMware Carbon Black Enterprise EDR is an advanced threat hunting\nand incident response solution delivering continuous visibility for top security\noperations centers (SOCs) and incident response (IR) teams.",
                    "type": "object",
                    "required": [
                        "status",
                        "query"
                    ],
                    "properties": {
                        "status": {
                            "title": "\u267b\ufe0f MDR Status",
                            "type": "string",
                            "description": "Define the status of the rule implementation according to use case development life cycle process.",
                            "example": "STAGING",
                            "default": "DEVELOPMENT",
                            "enum": [
                                "DESIGN",
                                "DEVELOPMENT",
                                "IMPROVING",
                                "STAGING",
                                "PRODUCTION",
                                "ACCEPTANCE",
                                "DISABLED",
                                "REMOVED"
                            ],
                            "markdownEnumDescriptions": [
                                "\n### \u270d In Design\n\n\ud83d\udd11 **Identifier** : `DESIGN`\n\n \n\n\n\n\n\n\n\n---\n\nUnder active functional design, without technical translation yet\n",
                                "\n### \ud83d\udc69\u200d\ud83d\udcbb Under Active Development\n\n\ud83d\udd11 **Identifier** : `DEVELOPMENT`\n\n \n\n\n\n\n\n\n\n---\n\nUnder active technical implementation, going in exploratory rounds\n",
                                "\n### \ud83c\udfd7\ufe0f Ongoing Improvement\n\n\ud83d\udd11 **Identifier** : `IMPROVING`\n\n \n\n\n\n\n\n\n\n---\n\nRule is qualified functionally, but is undergoing refinment rounds\n",
                                "\n### \ud83d\udea7 Staging\n\n\ud83d\udd11 **Identifier** : `STAGING`\n\n \n\n\n\n\n\n\n\n---\n\nDeployed in staging environment for operational testing\n",
                                "\n### \ud83d\udce3 In Production\n\n\ud83d\udd11 **Identifier** : `PRODUCTION`\n\n \n\n\n\n\n\n\n\n---\n\nDeployed in active production environment, potentially raising alerts\n",
                                "\n### \u2696\ufe0f Acceptance Gate\n\n\ud83d\udd11 **Identifier** : `ACCEPTANCE`\n\n \n\n\n\n\n\n\n\n---\n\nA MDR is ready to go for PRODUCTION for CSIRC team. During ACCEPTANCE a CSIRC\nanalyst will handle the alert and will ensure the CSOC ticket and playbook are correct.\n\n",
                                "\n### \ud83d\uded1 Disabled Rule\n\n\ud83d\udd11 **Identifier** : `DISABLED`\n\n \n\n\n\n\n\n\n\n---\n\nRule is still accessible, but not active in any environment\n",
                                "\n### \ud83d\uddd1\ufe0f Removed from Platforms\n\n\ud83d\udd11 **Identifier** : `REMOVED`\n\n \n\n\n\n\n\n\n\n---\n\nRule is fully deprecated, and only flagged under this status for archival purposes\n"
                            ]
                        },
                        "contributors": {
                            "title": "\ud83d\udc65 Development Contributors",
                            "type": "array",
                            "description": "Individuals who supported creating, enriching or tuning the detection.",
                            "items": {
                                "type": "string",
                                "format": "email"
                            }
                        },
                        "organizations": {
                            "title": "\ud83c\udfe2 Organizations",
                            "icon": "\ud83c\udfe2",
                            "description": "Override the default organizations the deployment will configure the reports onto.",
                            "type": "array",
                            "example": "DATACENTER",
                            "items": {
                                "type": "string"
                            }
                        },
                        "watchlist": {
                            "title": "\ud83d\udd0e Watchlist",
                            "icon": "\ud83d\udd0e",
                            "description": "Override the default watchlist the report is added to.",
                            "type": "string",
                            "example": "Advanced_Threats"
                        },
                        "report": {
                            "title": "\u26a0\ufe0f Threat Report",
                            "icon": "\u26a0\ufe0f",
                            "description": "Default logic is to add the MDR to a report automatically generated from the same name.\nIt is also possible to deploy to a report with a different name.\n",
                            "type": "string",
                            "example": "Sudo Escalation Techniques"
                        },
                        "tags": {
                            "title": "\ud83c\udff7\ufe0f Custom tags",
                            "type": "array",
                            "description": "Carbon black query IOC",
                            "items": {
                                "type": "string"
                            }
                        },
                        "severity": {
                            "title": "\ud83d\udca3 Custom Severity Score",
                            "description": "Allows to override the default severity mapping from the MDR with a custom value.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10
                        },
                        "query": {
                            "title": "\ud83d\udd0e Carbon Black Cloud Detection Rule",
                            "type": "string",
                            "tide.template.multiline": true,
                            "description": "Carbon black query IOC",
                            "example": "process_md5:6d7c8a951af6ad6835c029b3cb88d333"
                        }
                    },
                    "additionalProperties": false
                },
                "sentinel": {
                    "title": "Microsoft Sentinel",
                    "description": "Microsoft Sentinel delivers intelligent security analytics\nand threat intelligence across the enterprise. With Microsoft Sentinel, you\nget a single solution for attack detection, threat visibility, proactive\nhunting, and threat response.",
                    "type": "object",
                    "required": [
                        "status",
                        "query",
                        "scheduling"
                    ],
                    "if": {
                        "allOf": [
                            {
                                "properties": {
                                    "scheduling": {
                                        "properties": {
                                            "nrt": {
                                                "enum": [
                                                    true
                                                ]
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "scheduling": {
                                        "required": [
                                            "nrt"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "then": {
                        "allOf": [
                            {
                                "not": {
                                    "required": [
                                        "trigger"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "required": [
                                        "threshold"
                                    ]
                                }
                            }
                        ]
                    },
                    "properties": {
                        "status": {
                            "title": "\u267b\ufe0f MDR Status",
                            "type": "string",
                            "description": "Define the status of the rule implementation according to use case development life cycle process.",
                            "example": "STAGING",
                            "default": "DEVELOPMENT",
                            "enum": [
                                "DESIGN",
                                "DEVELOPMENT",
                                "IMPROVING",
                                "STAGING",
                                "PRODUCTION",
                                "ACCEPTANCE",
                                "DISABLED",
                                "REMOVED"
                            ],
                            "markdownEnumDescriptions": [
                                "\n### \u270d In Design\n\n\ud83d\udd11 **Identifier** : `DESIGN`\n\n \n\n\n\n\n\n\n\n---\n\nUnder active functional design, without technical translation yet\n",
                                "\n### \ud83d\udc69\u200d\ud83d\udcbb Under Active Development\n\n\ud83d\udd11 **Identifier** : `DEVELOPMENT`\n\n \n\n\n\n\n\n\n\n---\n\nUnder active technical implementation, going in exploratory rounds\n",
                                "\n### \ud83c\udfd7\ufe0f Ongoing Improvement\n\n\ud83d\udd11 **Identifier** : `IMPROVING`\n\n \n\n\n\n\n\n\n\n---\n\nRule is qualified functionally, but is undergoing refinment rounds\n",
                                "\n### \ud83d\udea7 Staging\n\n\ud83d\udd11 **Identifier** : `STAGING`\n\n \n\n\n\n\n\n\n\n---\n\nDeployed in staging environment for operational testing\n",
                                "\n### \ud83d\udce3 In Production\n\n\ud83d\udd11 **Identifier** : `PRODUCTION`\n\n \n\n\n\n\n\n\n\n---\n\nDeployed in active production environment, potentially raising alerts\n",
                                "\n### \u2696\ufe0f Acceptance Gate\n\n\ud83d\udd11 **Identifier** : `ACCEPTANCE`\n\n \n\n\n\n\n\n\n\n---\n\nA MDR is ready to go for PRODUCTION for CSIRC team. During ACCEPTANCE a CSIRC\nanalyst will handle the alert and will ensure the CSOC ticket and playbook are correct.\n\n",
                                "\n### \ud83d\uded1 Disabled Rule\n\n\ud83d\udd11 **Identifier** : `DISABLED`\n\n \n\n\n\n\n\n\n\n---\n\nRule is still accessible, but not active in any environment\n",
                                "\n### \ud83d\uddd1\ufe0f Removed from Platforms\n\n\ud83d\udd11 **Identifier** : `REMOVED`\n\n \n\n\n\n\n\n\n\n---\n\nRule is fully deprecated, and only flagged under this status for archival purposes\n"
                            ]
                        },
                        "contributors": {
                            "title": "\ud83d\udc65 Development Contributors",
                            "type": "array",
                            "description": "Individuals who supported creating, enriching or tuning the detection.",
                            "items": {
                                "type": "string",
                                "format": "email"
                            }
                        },
                        "trigger": {
                            "title": "\ud83d\udd2b Trigger Operator",
                            "type": "string",
                            "description": "The operation against the threshold that triggers alert rule.\n\n\u26a0\ufe0f If you create a NRT rule, this value must be removed or commented out (NRT rules trigger an alert on the first match)\n",
                            "default": "GreaterThan",
                            "icon": "\ud83d\udd2b",
                            "enum": [
                                "Equal",
                                "GreaterThan",
                                "LessThan",
                                "NotEqual"
                            ]
                        },
                        "threshold": {
                            "title": "\u2696\ufe0f Event threshold",
                            "type": "integer",
                            "description": "If amount of events is higher than threshold (during the timeframe) the alert is triggered. \n\n\u26a0\ufe0f If you create a NRT rule, this value must be removed or commented out (NRT rules trigger an alert on the first match)\n",
                            "example": 10,
                            "default": 0
                        },
                        "scheduling": {
                            "title": "\u23f2 Throttling parameters",
                            "type": "object",
                            "description": "Configuration for throttling incoming alerts",
                            "if": {
                                "properties": {
                                    "nrt": {
                                        "enum": [
                                            false
                                        ]
                                    }
                                }
                            },
                            "then": {
                                "allOf": [
                                    {
                                        "required": [
                                            "frequency"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "lookback"
                                        ]
                                    }
                                ]
                            },
                            "else": {
                                "allOf": [
                                    {
                                        "not": {
                                            "required": [
                                                "frequency"
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "required": [
                                                "lookback"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "properties": {
                                "nrt": {
                                    "title": "Near Real Time Rule",
                                    "type": "boolean",
                                    "default": false,
                                    "description": "NRT rules are hard-coded to run once every minute and capture events\ningested in the preceding minute, so as to be able to supply you with\ninformation as up-to-the-minute as possible.\n\n\u26a0\ufe0f You can not turn a ScheduledAlert into a NRT Rule or vice versa. Once\nthe MDR is deployed under this UUID, if it must be transformed into\na different type, a new UUID must be attributed and the previous rule\nmanually removed from Sentinel.\n"
                                },
                                "frequency": {
                                    "title": "\u23f1 Recurring Search Interval",
                                    "type": "string",
                                    "description": "Time intervals at which the scheduled search should be ran at, from 5m to up to 14days. Format is X d|h|m. If you create a NRT rule, this value must be removed or commented out.",
                                    "markdownDescription": "Time intervals at which the scheduled search should be ran at\n\n\ud83d\udca1 _You can use `d`, `h` or `m` to represent `days`, `hours` and `minutes` respectively_\n\nNote that Sentinel supports frequency intervals **from 5 minutes up to 14 days** only, translating to the\nmaximum values for lookback configuration : `14d`, `337h` or `20160m`\n\n\u26a0\ufe0f If you create a NRT rule, this value must be removed or commented out (NRT rules work on the smallest possible timeframe)\n",
                                    "example": "5m",
                                    "pattern": "^((([1-9]|1[0-4])d)|(([1-9]|[1-9][0-9]|[1-2][0-9][0-9]|3[0-2][0-9]|33[0-7])h)|(([5-9]|[1-9][0-9]{1,3}|1[0-9]{0,4}|200[0-9][0-9]|201[0-5][0-9]|20160)m))$"
                                },
                                "lookback": {
                                    "title": "\u231b Lookback Configuration",
                                    "type": "string",
                                    "description": "Duration of logs to search in, up to 14 days. Format is X d|h|m. If you create a NRT rule, this value must be removed or commented out.",
                                    "markdownDescription": "Duration of logs to search in. \n\n\ud83d\udca1 _You can use `d`, `h` or `m` to represent `days`, `hours` and `minutes` respectively_\n\nNote that Sentinel supports lookback periods **up to 14 days** only, translating to the\nmaximum values for lookback configuration : `14d`, `337h` or `20160m`\n\n\u26a0\ufe0f If you create a NRT rule, this value must be removed or commented out (NRT rules work on the smallest possible timeframe)\n",
                                    "example": "5m",
                                    "pattern": "^((([0-9]|1[0-4])d)|(([1-9]|[1-9][0-9]|[1-2][0-9][0-9]|3[0-2][0-9]|33[0-7])h)|(([1-9]|[1-9][0-9]{1,3}|1[0-9]{0,4}|200[0-9][0-9]|201[0-5][0-9]|20160)m))$"
                                }
                            },
                            "additionalProperties": false
                        },
                        "alert": {
                            "title": "\ud83d\udea8 Alert Configuration",
                            "icon": "\ud83d\udea8",
                            "description": "Alert Details allow analytic rules to have dynamic values for the Displayed name, Description, Tactics and Severity properties of the alert. By using dynamic alert details, the same rule can generate different incidents, for example with different severity. Also, the information displayed to the analyst can include variable information such as relevant entity names to  help the analyst understand the incident faster.",
                            "type": "object",
                            "anyOf": [
                                {
                                    "required": [
                                        "title"
                                    ]
                                },
                                {
                                    "required": [
                                        "description"
                                    ]
                                }
                            ],
                            "properties": {
                                "create_incident": {
                                    "title": "Create Incident",
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Create incidents from alerts triggered by this analytics rule"
                                },
                                "suppression": {
                                    "title": "Alert Suppression",
                                    "type": [
                                        "string",
                                        "boolean"
                                    ],
                                    "description": "The duration to wait since last time this alert rule been triggered. Set to \"false\" to disable all suppression.",
                                    "pattern": "^(((1d)|(([1-9]|1[0-9]|2[0-4])h)|(([5-9]|[1-9][0-9]{1,2}|1[0-3][0-9][0-9]|14[0-3][0-9]|1440)m)))|false$"
                                },
                                "title": {
                                    "title": "\ud83c\udfab Alert Display Name Format",
                                    "type": "string",
                                    "description": "Free text with field names embedded using the format {{columnName}}. Up to 256 chars and 3 placeholders.",
                                    "example": "rule {{columnName1}} display name"
                                },
                                "description": {
                                    "title": "\ud83d\udd2c Alert Description Format",
                                    "type": "string",
                                    "tide.template.multiline": true,
                                    "description": "Free text with field names embedded using the format {{columnName}}. Up to 5000 chars and 3 placeholders",
                                    "example": "rule {{columnName1}} display name"
                                },
                                "custom_details": {
                                    "title": "\ud83d\udcac Custom Details",
                                    "icon": "\ud83d\udcac",
                                    "type": "array",
                                    "description": "Surface particular event parameters and their values in alerts that comprise those events, by adding key-value pairs below.",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "key",
                                            "column"
                                        ],
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "icon": "\ud83d\udddd\ufe0f",
                                                "description": "Enter a name of your choosing that will appear as the field name in alerts.",
                                                "pattern": "^[^\\s]*$"
                                            },
                                            "column": {
                                                "icon": "\ud83d\udcbd",
                                                "description": "Choose the column which value should be added as a custom detail. Must exist in the result of the query.",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "dynamic_properties": {
                                    "title": "\ud83d\udcbd Alert Dynamic Properties",
                                    "icon": "\ud83d\udcbd",
                                    "type": "array",
                                    "description": "Override alert default properties, select an alert property from the Alert property drop-down list.",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "property",
                                            "column"
                                        ],
                                        "properties": {
                                            "property": {
                                                "icon": "\ud83d\udddd\ufe0f",
                                                "type": "string",
                                                "description": "The V3 Alert Property",
                                                "enum": [
                                                    "AlertLink",
                                                    "ConfidenceLevel",
                                                    "ConfidenceScore",
                                                    "ExtendedLinks",
                                                    "ProductComponentName",
                                                    "ProductName",
                                                    "ProviderName",
                                                    "RemediationSteps",
                                                    "Severity",
                                                    "Tactics",
                                                    "Techniques"
                                                ]
                                            },
                                            "column": {
                                                "icon": "\ud83d\udcbd",
                                                "description": "Choose the column which value should override the alert property. Must exist in the result of the query.",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        "grouping": {
                            "title": "\ud83d\udca0 Grouping Setup",
                            "type": "object",
                            "icon": "\ud83d\udca0",
                            "properties": {
                                "event": {
                                    "title": "\ud83d\udce3 Event Grouping Details",
                                    "icon": "\ud83d\udce3",
                                    "description": "Configure how rule query results are grouped into alerts.",
                                    "type": "string",
                                    "default": "SingleAlert",
                                    "anyOf": [
                                        {
                                            "const": "AlertPerResult",
                                            "description": "Trigger an alert for each event"
                                        },
                                        {
                                            "const": "SingleAlert",
                                            "description": "Group all events into a single alert"
                                        }
                                    ]
                                },
                                "alert": {
                                    "title": "\ud83d\udea8 Alert Grouping Details",
                                    "icon": "\ud83d\udea8",
                                    "type": "object",
                                    "description": "Set how the alerts that are triggered by this analytics rule, are grouped into incidents. Grouping alerts into incidents provides the context you need to respond and reduces the noise from single alerts.",
                                    "markdownDescription": "Set how the alerts that are triggered by this analytics rule, are grouped into incidents.\nGrouping alerts into incidents provides the context you need to respond and reduces the noise from single alerts.\n\n> \ud83d\udccc Up to 150 alerts can be grouped into a single incident. If more than 150 alerts are generated, a new incident\nwill be created with the same incident details as the original, and the excess alerts will be grouped into the\nnew incident.\n",
                                    "required": [
                                        "enabled"
                                    ],
                                    "allOf": [
                                        {
                                            "if": {
                                                "properties": {
                                                    "enabled": {
                                                        "const": true
                                                    }
                                                }
                                            },
                                            "then": {
                                                "required": [
                                                    "grouping_lookback",
                                                    "matching"
                                                ]
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "matching": {
                                                        "const": "Selected"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "anyOf": [
                                                    {
                                                        "required": [
                                                            "group_by_entities"
                                                        ]
                                                    },
                                                    {
                                                        "required": [
                                                            "group_by_alert_details"
                                                        ]
                                                    },
                                                    {
                                                        "required": [
                                                            "group_by_custom_details"
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "properties": {
                                        "enabled": {
                                            "title": "\ud83c\udf9a\ufe0f Enable Alert Grouping",
                                            "icon": "\ud83c\udf9a\ufe0f",
                                            "type": "boolean"
                                        },
                                        "reopen_closed_incidents": {
                                            "title": "\u26e9\ufe0f Re-Open Closed Incidents",
                                            "type": "boolean",
                                            "icon": "\u26e9\ufe0f",
                                            "description": "Re-open closed matching incidents"
                                        },
                                        "grouping_lookback": {
                                            "title": "\u23f3 Timeframe to Group Alerts",
                                            "icon": "\u23f3",
                                            "type": "string",
                                            "description": "Limit the group to alerts created within the selected time frame."
                                        },
                                        "matching": {
                                            "title": "\u2764\ufe0f\u200d\ud83d\udd25 Matching Method",
                                            "icon": "\u2764\ufe0f\u200d\ud83d\udd25",
                                            "type": "string",
                                            "default": "AllEntities",
                                            "description": "Group alerts triggered by this analytics rule into a single incident using defined methods.",
                                            "anyOf": [
                                                {
                                                    "const": "AllEntities",
                                                    "description": "Grouping alerts into a single incident if all the entities match (recommended)"
                                                },
                                                {
                                                    "const": "AnyAlert",
                                                    "description": "Grouping all alerts triggered by this rule into a single incident"
                                                },
                                                {
                                                    "const": "Selected",
                                                    "description": "Grouping alerts into a single incident if the selected entities, custom details and alert details match.\n\u26a0\ufe0f When using this option, ensure that the values you enter were already configured in the MDR.\n"
                                                }
                                            ]
                                        },
                                        "group_by_entities": {
                                            "title": "\ud83e\uddca Entity Alert Grouping",
                                            "icon": "\ud83e\uddca",
                                            "type": "array",
                                            "description": "A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.",
                                            "items": {
                                                "uniqueItems": true,
                                                "enum": [
                                                    "Account",
                                                    "AzureResource",
                                                    "CloudApplication",
                                                    "DNS",
                                                    "File",
                                                    "FileHas",
                                                    "Host",
                                                    "IP",
                                                    "MailCluster",
                                                    "MailMessage",
                                                    "Mailbox",
                                                    "Malware",
                                                    "Process",
                                                    "RegistryKey",
                                                    "RegistryValue",
                                                    "SecurityGroup",
                                                    "SubmissionMail",
                                                    "URL"
                                                ]
                                            }
                                        },
                                        "group_by_alert_details": {
                                            "title": "\ud83d\udcac Alert Details Alert Grouping",
                                            "description": "A list of alert details to group by (when matchingMethod is Selected)",
                                            "type": "array",
                                            "icon": "\ud83d\udcac",
                                            "items": {
                                                "uniqueItems": true,
                                                "enum": [
                                                    "DisplayName",
                                                    "Severity"
                                                ]
                                            }
                                        },
                                        "group_by_custom_details": {
                                            "title": "\ud83d\udcac Custom Details Alert Grouping",
                                            "description": "A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.",
                                            "type": "array",
                                            "icon": "\ud83d\udcac",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        "entities": {
                            "title": "\ud83e\uddca Entity Mappings",
                            "description": "Entity mapping is an integral part of the configuration of scheduled query analytics rules. It enriches the rules' output (alerts and incidents) with essential information that serves as the building blocks of any investigative processes and remedial actions that follow.",
                            "icon": "\ud83e\uddca",
                            "tide.mdr.parameter_nest": true,
                            "maxItems": 5,
                            "type": "array",
                            "items": {
                                "type": "object",
                                "required": [
                                    "entity",
                                    "mappings"
                                ],
                                "oneOf": [
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "Account"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Sid",
                                                                "Name",
                                                                "AadUserId",
                                                                "PUID",
                                                                "ObjectGuid"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Name",
                                                                    "description": "The name of the account. This field should hold only the name without any domain added to it.",
                                                                    "markdownDescription": "The name of the account. This field should hold only the name without any domain added to it.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "NTDomain",
                                                                    "description": "The NETBIOS domain name as it appears in the alert format \u2013 domain\\username. Examples: Finance, NT AUTHORITY",
                                                                    "markdownDescription": "The NETBIOS domain name as it appears in the alert format \u2013 domain\\username. Examples: Finance, NT AUTHORITY\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "DnsDomain",
                                                                    "description": "The fully qualified domain DNS name. Examples: finance.contoso.com",
                                                                    "markdownDescription": "The fully qualified domain DNS name. Examples: finance.contoso.com\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "UPNSuffix",
                                                                    "description": "The user principal name suffix for the account. In some cases this is also the domain name. Examples: contoso.com",
                                                                    "markdownDescription": "The user principal name suffix for the account. In some cases this is also the domain name. Examples: contoso.com\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Sid",
                                                                    "description": "The account security identifier, such as S-1-5-18.",
                                                                    "markdownDescription": "The account security identifier, such as S-1-5-18.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "AadTenantId",
                                                                    "description": "The Azure AD tenant ID, if known.",
                                                                    "markdownDescription": "The Azure AD tenant ID, if known.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "AadUserId",
                                                                    "description": "The Azure AD account object ID, if known.",
                                                                    "markdownDescription": "The Azure AD account object ID, if known.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "PUID",
                                                                    "description": "The Azure AD Passport User ID, if known.",
                                                                    "markdownDescription": "The Azure AD Passport User ID, if known.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "IsDomainJoined",
                                                                    "description": "Determines whether this is a domain account.",
                                                                    "markdownDescription": "Determines whether this is a domain account.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "DisplayName",
                                                                    "description": "The display name of the account.",
                                                                    "markdownDescription": "The display name of the account.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ObjectGuid",
                                                                    "description": "The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by Active Directory.",
                                                                    "markdownDescription": "The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by Active Directory.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "Host"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "HostName",
                                                                "NetBiosName",
                                                                "AzureID",
                                                                "OMSAgentID"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "DnsDomain",
                                                                    "description": "The DNS domain that this host belongs to. Should contain the complete DNS suffix for the domain, if known.",
                                                                    "markdownDescription": "The DNS domain that this host belongs to. Should contain the complete DNS suffix for the domain, if known.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "NTDomain",
                                                                    "description": "The NT domain that this host belongs to.",
                                                                    "markdownDescription": "The NT domain that this host belongs to.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "HostName",
                                                                    "description": "The hostname without the domain suffix.",
                                                                    "markdownDescription": "The hostname without the domain suffix.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "NetBiosName",
                                                                    "description": "The host name (pre-Windows 2000).",
                                                                    "markdownDescription": "The host name (pre-Windows 2000).\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "AzureID",
                                                                    "description": "The Azure resource ID of the VM, if known.",
                                                                    "markdownDescription": "The Azure resource ID of the VM, if known.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "OMSAgentID",
                                                                    "description": "The OMS agent ID, if the host has OMS agent installed.",
                                                                    "markdownDescription": "The OMS agent ID, if the host has OMS agent installed.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "OSFamily",
                                                                    "description": "One of the following values: Linux, Windows, Android, IOS",
                                                                    "markdownDescription": "One of the following values:\n- Linux\n- Windows\n- Android\n- IOS\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "OSVersion",
                                                                    "description": "A free-text representation of the operating system.",
                                                                    "markdownDescription": "A free-text representation of the operating system.\n\n_This field is meant to hold specific versions the are more fine-grained\nthan OSFamily, or future values not supported by OSFamily enumeration._\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "IsDomainJoined",
                                                                    "description": "Determines whether this host belongs to a domain.",
                                                                    "markdownDescription": "Determines whether this host belongs to a domain.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "IP"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 2,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Address"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Address",
                                                                    "description": "The IP address as string, e.g. 127.0.0.1 (either in IPv4 or IPv6).",
                                                                    "markdownDescription": "The IP address as string, e.g. 127.0.0.1 (either in IPv4 or IPv6).\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "AddressScope",
                                                                    "description": "CURRENTLY UNDOCUMENTED BY MICROSOFT, BUT ACCESSIBLE ON GUI",
                                                                    "markdownDescription": "\u26a0\ufe0f CURRENTLY UNDOCUMENTED BY MICROSOFT, BUT ACCESSIBLE ON GUI\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "Malware"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 2,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Name",
                                                                    "description": "The malware name by the vendor, such as Win32/Toga!rfn.",
                                                                    "markdownDescription": "The malware name by the vendor, such as `Win32/Toga!rfn`.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Category",
                                                                    "description": "The malware category by the vendor, e.g. Trojan.",
                                                                    "markdownDescription": "The malware category by the vendor, e.g. Trojan.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "File"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 2,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Name",
                                                                    "description": "The file name without the path (some alerts might not include path).",
                                                                    "markdownDescription": "The file name without the path (some alerts might not include path).\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Directory",
                                                                    "description": "The full path to the file.",
                                                                    "markdownDescription": "The full path to the file.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "Process"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "CommandLine",
                                                                "ProcessId"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "ProcessId",
                                                                    "description": "The process ID.",
                                                                    "markdownDescription": "The process ID.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "CommandLine",
                                                                    "description": "The command line used to create the process.",
                                                                    "markdownDescription": "The command line used to create the process.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "ElevationToken",
                                                                    "description": "The elevation token associated with the process.",
                                                                    "markdownDescription": "The elevation token associated with the process.\n\nPossible values:\n\n- TokenElevationTypeDefault                   \n- TokenElevationTypeFull\n- TokenElevationTypeLimited\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "CreationTimeUtc",
                                                                    "description": "The time when the process started to run.",
                                                                    "markdownDescription": "The time when the process started to run.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "CloudApplication"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "AppId",
                                                                "Name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "AppId",
                                                                    "description": "The technical identifier of the application. This should be one of the values defined in the list of cloud application identifiers. The value for AppId field is optional.",
                                                                    "markdownDescription": "The technical identifier of the application. This should be one of the values defined in the list of\n[cloud application identifiers](https://learn.microsoft.com/en-us/azure/sentinel/entities-reference#cloud-application-identifiers).\nThe value for AppId field is optional.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Name",
                                                                    "description": "The name of the related cloud application. The value of application name is optional.",
                                                                    "markdownDescription": "The name of the related cloud application. The value of application name is optional.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "InstanceName",
                                                                    "description": "The user-defined instance name of the cloud application. It is often used to distinguish between several applications of the same type that a customer has.",
                                                                    "markdownDescription": "The user-defined instance name of the cloud application. It is often used to distinguish between several\napplications of the same type that a customer has.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "DNS"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "DomainName"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "DomainName",
                                                                    "description": "The name of the DNS record associated with the alert.",
                                                                    "markdownDescription": "The name of the DNS record associated with the alert.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "AzureResource"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "ResourceId"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "ResourceId",
                                                                    "description": "The Azure resource ID of the resource.",
                                                                    "markdownDescription": "The Azure resource ID of the resource.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "FileHash"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 2,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Value"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Algorithm",
                                                                    "description": "The hash algorithm type",
                                                                    "markdownDescription": "The hash algorithm type. Possible values:\n- Unknown\n- MD5\n- SHA1\n- SHA256\n- SHA256AC\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Value",
                                                                    "description": "The hash value.",
                                                                    "markdownDescription": "The hash value.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "RegistryKey"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 2,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Hive",
                                                                "Key"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Hive",
                                                                    "description": "'One of the following values: HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT,\nHKEY_CURRENT_CONFIG, HKEY_USERS, HKEY_CURRENT_USER_LOCAL_SETTINGS,\nHKEY_PERFORMANCE_DATA, HKEY_PERFORMANCE_NLSTEXT, HKEY_PERFORMANCE_TEXT,\nHKEY_A, HKEY_CURRENT_USER'\n",
                                                                    "markdownDescription": "One of the following values:\n- HKEY_LOCAL_MACHINE\n- HKEY_CLASSES_ROOT\n- HKEY_CURRENT_CONFIG\n- HKEY_USERS\n- HKEY_CURRENT_USER_LOCAL_SETTINGS\n- HKEY_PERFORMANCE_DATA\n- HKEY_PERFORMANCE_NLSTEXT\n- HKEY_PERFORMANCE_TEXT\n- HKEY_A\n- HKEY_CURRENT_USER\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Key",
                                                                    "description": "The registry key path.",
                                                                    "markdownDescription": "The registry key path.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "RegistryValue"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Name",
                                                                    "description": "The registry value name.",
                                                                    "markdownDescription": "The registry value name.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Value",
                                                                    "description": "String-formatted representation of the value data.",
                                                                    "markdownDescription": "String-formatted representation of the value data.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ValueType",
                                                                    "description": "One of the following values: String, Binary, DWord, Qword, MultiString, ExpandString, None, Unknown",
                                                                    "markdownDescription": "One of the following values:\n- String\n- Binary\n- DWord\n- Qword\n- MultiString\n- ExpandString\n- None\n- Unknown\n\n_Values should conform to Microsoft.Win32.RegistryValueKind enumeration._\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "SecurityGroup"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "DistinguishedName",
                                                                "SID",
                                                                "ObjectGuid"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "DistinguishedName",
                                                                    "description": "The group distinguished name.",
                                                                    "markdownDescription": "The group distinguished name.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "SID",
                                                                    "description": "The SID attribute is a single-value attribute that specifies the security identifier (SID) of the group.",
                                                                    "markdownDescription": "The SID attribute is a single-value attribute that specifies the security identifier (SID) of the group.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "ObjectGuid",
                                                                    "description": "The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by Active Directory.",
                                                                    "markdownDescription": "The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by Active Directory.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "URL"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 1,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Url"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Url",
                                                                    "description": "A full URL the entity points to.",
                                                                    "markdownDescription": "A full URL the entity points to.\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "IoTDevice"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "DeviceId"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "DeviceId",
                                                                    "description": "The ID of the device in the context of the IoT Hub.",
                                                                    "markdownDescription": "The ID of the device in the context of the IoT Hub.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "DeviceName",
                                                                    "description": "The friendly name of the device.",
                                                                    "markdownDescription": "The friendly name of the device.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "IoTSecurityAgentId",
                                                                    "description": "The ID of the Defender for IoT agent running on the device.",
                                                                    "markdownDescription": "The ID of the _Defender for IoT_ agent running on the device.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "DeviceType",
                                                                    "description": "The type of the device ('temperature sensor', 'freezer', 'wind turbine' etc.).",
                                                                    "markdownDescription": "The type of the device ('temperature sensor', 'freezer', 'wind turbine' etc.).\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Source",
                                                                    "description": "The source (Microsoft/Vendor) of the device entity.",
                                                                    "markdownDescription": "The source (Microsoft/Vendor) of the device entity.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Manufacturer",
                                                                    "description": "The manufacturer of the device.",
                                                                    "markdownDescription": "The manufacturer of the device.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Model",
                                                                    "description": "The model of the device.",
                                                                    "markdownDescription": "The model of the device.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "OperatingSystem",
                                                                    "description": "The operating system the device is running.",
                                                                    "markdownDescription": "The operating system the device is running.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "MacAddress",
                                                                    "description": "The MAC address of the device.",
                                                                    "markdownDescription": "The MAC address of the device.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Protocols",
                                                                    "description": "A list of protocols that the device supports.",
                                                                    "markdownDescription": "A list of protocols that the device supports.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "SerialNumber",
                                                                    "description": "The MAC address of the device.",
                                                                    "markdownDescription": "The MAC address of the device.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "Mailbox"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "MailboxPrimaryAddress"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "MailboxPrimaryAddress",
                                                                    "description": "The mailbox's primary address.",
                                                                    "markdownDescription": "The mailbox's primary address.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "DisplayName",
                                                                    "description": "The mailbox's display name.",
                                                                    "markdownDescription": "Required: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Upn",
                                                                    "description": "The mailbox's UPN.",
                                                                    "markdownDescription": "The mailbox's UPN.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "RiskLevel",
                                                                    "description": "The risk level of this mailbox. Possible values: None, Low, Medium, High",
                                                                    "markdownDescription": "The risk level of this mailbox. Possible values:\n- None\n- Low\n- Medium\n- High\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ExternalDirectoryObjectId",
                                                                    "description": "The AzureAD identifier of mailbox. Similar to AadUserId in the Account entity, but this property is specific to mailbox object on the Office side.",
                                                                    "markdownDescription": "The AzureAD identifier of mailbox. Similar to AadUserId in the Account entity, but this property is specific to mailbox object on the Office side.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "MailCluster"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Query",
                                                                "Source"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "NetworkMessageIds",
                                                                    "description": "The mail message IDs that are part of the mail cluster.",
                                                                    "markdownDescription": "The mail message IDs that are part of the mail cluster.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "CountByDeliveryStatus",
                                                                    "description": "The mail message IDs that are part of the mail cluster.",
                                                                    "markdownDescription": "The mail message IDs that are part of the mail cluster.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "CountByThreatType",
                                                                    "description": "Count of mail messages by ThreatType string representation.",
                                                                    "markdownDescription": "Count of mail messages by ThreatType string representation.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "CountByProtectionStatus",
                                                                    "description": "Count of mail messages by Threat Protection status.",
                                                                    "markdownDescription": "Count of mail messages by Threat Protection status.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Threats",
                                                                    "description": "The threats of mail messages that are part of the mail cluster.",
                                                                    "markdownDescription": "The threats of mail messages that are part of the mail cluster.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Query",
                                                                    "description": "The query that was used to identify the messages of the mail cluster.",
                                                                    "markdownDescription": "The query that was used to identify the messages of the mail cluster.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "QueryTime",
                                                                    "description": "The query time.",
                                                                    "markdownDescription": "The query time.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "MailCount",
                                                                    "description": "The number of mail messages that are part of the mail cluster.",
                                                                    "markdownDescription": "The number of mail messages that are part of the mail cluster.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "IsVolumeAnomaly",
                                                                    "description": "Determines whether this is a volume anomaly mail cluster.",
                                                                    "markdownDescription": "Determines whether this is a volume anomaly mail cluster.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Source",
                                                                    "description": "The source of the mail cluster (default is 'O365 ATP').",
                                                                    "markdownDescription": "The source of the mail cluster (default is 'O365 ATP').\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "ClusterSourceIdentifier",
                                                                    "description": "The network message ID of the mail that is the source of this mail cluster.",
                                                                    "markdownDescription": "The network message ID of the mail that is the source of this mail cluster.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ClusterSourceType",
                                                                    "description": "The source type of the mail cluster. This maps to the MailClusterSourceType setting from Microsoft Defender for Office 365.",
                                                                    "markdownDescription": "The source type of the mail cluster. This maps to the MailClusterSourceType setting from Microsoft Defender for Office 365.\n\n> \ud83d\udc49 _Microsoft Defender for Office 365 was formerly known as Office 365 Advanced Threat Protection (O365 ATP)._\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ClusterQueryStartTime",
                                                                    "description": "Cluster start time - used as start time for cluster counts query. Usually dates to the End time minus DaysToLookBack setting from Microsoft Defender for Office 365.",
                                                                    "markdownDescription": "Cluster start time - used as start time for cluster counts query. Usually dates to the End time minus DaysToLookBack setting from Microsoft Defender for Office 365.\n\n> \ud83d\udc49 _Microsoft Defender for Office 365 was formerly known as Office 365 Advanced Threat Protection (O365 ATP)._\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ClusterQueryEndTime",
                                                                    "description": "Cluster end time - used as end time for cluster counts query. Usually the mail data's received time.",
                                                                    "markdownDescription": "Cluster end time - used as end time for cluster counts query. Usually the mail data's received time.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ClusterGroup",
                                                                    "description": "Corresponds to the Kusto query key used on Microsoft Defender for Office 365.",
                                                                    "markdownDescription": "Corresponds to the Kusto query key used on Microsoft Defender for Office 365.\n\n> \ud83d\udc49 _Microsoft Defender for Office 365 was formerly known as Office 365 Advanced Threat Protection (O365 ATP)._\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "MailMessage"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "NetworkMessageId",
                                                                "Recipient"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Recipient",
                                                                    "description": "The recipient of this mail message. In the case of multiple recipients, the mail message is copied, and each copy has one recipient.",
                                                                    "markdownDescription": "The recipient of this mail message. In the case of multiple recipients, the mail message is copied, and each copy has one recipient.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Urls",
                                                                    "description": "The URLs contained in this mail message.",
                                                                    "markdownDescription": "The URLs contained in this mail message.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Threats",
                                                                    "description": "The threats contained in this mail message.",
                                                                    "markdownDescription": "The threats contained in this mail message.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Sender",
                                                                    "description": "The sender's email address.",
                                                                    "markdownDescription": "The sender's email address.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "P1Sender",
                                                                    "description": "Email ID of (delegated) user who sent this mail \"on-behalf of P2 (primary) user\". If email not sent by delegate, this value is equal to P2Sender.",
                                                                    "markdownDescription": "Email ID of (delegated) user who sent this mail \"on-behalf of P2 (primary) user\".\nIf email not sent by delegate, this value is equal to P2Sender.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "P1SenderDisplayName",
                                                                    "description": "Display name of the (delegated) user who sent this mail \"on behalf of P2 (primary) user\". Represented in email header by \"OnbehalfofSenderDisplayName\" property.",
                                                                    "markdownDescription": "Display name of the (delegated) user who sent this mail \"on behalf of P2 (primary) user\".\nRepresented in email header by \"OnbehalfofSenderDisplayName\" property.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "P1SenderDomain",
                                                                    "description": "Email domain of the (delegated) user who sent this mail \"on behalf of P2 (primary) user\". If email not sent by delegate, this value is equal to P2SenderDomain.",
                                                                    "markdownDescription": "Email domain of the (delegated) user who sent this mail \"on behalf of P2 (primary) user\".\nIf email not sent by delegate, this value is equal to P2SenderDomain.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "P2Sender",
                                                                    "description": "Email of the (primary) user on behalf of whom this email was sent.",
                                                                    "markdownDescription": "Email of the (primary) user on behalf of whom this email was sent.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "P2SenderDisplayName",
                                                                    "description": "Display name of the (primary) user on behalf of whom this email was sent. If email not sent by delegate, this represents the display name of the sender.",
                                                                    "markdownDescription": "Display name of the (primary) user on behalf of whom this email was sent.\nIf email not sent by delegate, this represents the display name of the sender.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "P2SenderDomain",
                                                                    "description": "Email domain of the (primary) user on behalf of whom this email was sent. If email not sent by delegate, this represents the domain of the sender.",
                                                                    "markdownDescription": "Email domain of the (primary) user on behalf of whom this email was sent.\nIf email not sent by delegate, this represents the domain of the sender.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "SenderIP",
                                                                    "description": "The sender's IP address.",
                                                                    "markdownDescription": "The sender's IP address.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ReceivedDate",
                                                                    "description": "The received date of this message.",
                                                                    "markdownDescription": "The received date of this message.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "NetworkMessageId",
                                                                    "description": "The internet message ID of this mail message.",
                                                                    "markdownDescription": "The internet message ID of this mail message.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "InternetMessageId",
                                                                    "description": "The internet message ID of this mail message.",
                                                                    "markdownDescription": "The internet message ID of this mail message.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Subject",
                                                                    "description": "The subject of this mail message.",
                                                                    "markdownDescription": "The subject of this mail message.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "BodyFingerprintBin1",
                                                                    "description": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.",
                                                                    "markdownDescription": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "BodyFingerprintBin2",
                                                                    "description": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.",
                                                                    "markdownDescription": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "BodyFingerprintBin3",
                                                                    "description": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.",
                                                                    "markdownDescription": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "BodyFingerprintBin4",
                                                                    "description": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.",
                                                                    "markdownDescription": "Used by Microsoft Defender for Office 365 to find matching or similar mail messages.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "BodyFingerprintBin5",
                                                                    "description": "The directionality of this mail message.",
                                                                    "markdownDescription": "The directionality of this mail message. Possible values:\n- Unknown\n- Inbound\n- Outbound\n- Intraorg (internal)\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "AntispamDirection",
                                                                    "description": "The directionality of this mail message.",
                                                                    "markdownDescription": "The directionality of this mail message. Possible values:\n- Unknown\n- Inbound\n- Outbound\n- Intraorg (internal)\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "DeliveryAction",
                                                                    "description": "The delivery action of this mail message.",
                                                                    "markdownDescription": "The delivery action of this mail message. Possible values:\n- Unknown\n- DeliveredAsSpam\n- Delivered\n- Blocked\n- Replaced\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "DeliveryLocation",
                                                                    "description": "The delivery location of this mail message.",
                                                                    "markdownDescription": "The delivery location of this mail message. Possible values:\n- Unknown\n- Inbox\n- JunkFolder\n- DeletedFolder\n- Quarantine\n- External\n- Failed\n- Dropped\n- Forwarded\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Language",
                                                                    "description": "The language in which the contents of the mail are written.",
                                                                    "markdownDescription": "The language in which the contents of the mail are written.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ThreatDetectionMethods",
                                                                    "description": "The list of Threat Detection Methods applied on this mail.",
                                                                    "markdownDescription": "The list of Threat Detection Methods applied on this mail.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "SentinelEntities"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 1,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "Entities"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "Entities",
                                                                    "description": "A list of the entities identified in the alert.",
                                                                    "markdownDescription": "A list of the entities identified in the alert.\nThis list is the entities column from the SecurityAlert schema ([see documentation](https://learn.microsoft.com/en-us/azure/sentinel/security-alert-schema)).\n\nRequired: **Yes**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "entity": {
                                                "type": "string",
                                                "enum": [
                                                    "SubmissionMail"
                                                ]
                                            },
                                            "mappings": {
                                                "type": "array",
                                                "maxItems": 3,
                                                "contains": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "enum": [
                                                                "SubmissionId",
                                                                "NetworkMessageId",
                                                                "Recipient",
                                                                "Submitter"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "identifier": {
                                                            "anyOf": [
                                                                {
                                                                    "const": "SubmissionId",
                                                                    "description": "The Submission ID.",
                                                                    "markdownDescription": "The Submission ID.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "SubmissionDate",
                                                                    "description": "Reported Date time for this submission.",
                                                                    "markdownDescription": "Reported Date time for this submission.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Submitter",
                                                                    "description": "The submitter email address.",
                                                                    "markdownDescription": "The submitter email address.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "NetworkMessageId",
                                                                    "description": "The network message ID of email to which submission belongs.",
                                                                    "markdownDescription": "The network message ID of email to which submission belongs.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Timestamp",
                                                                    "description": "The Time stamp when the message is received (Mail).",
                                                                    "markdownDescription": "The Time stamp when the message is received (Mail).\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Recipient",
                                                                    "description": "The recipient of the mail.",
                                                                    "markdownDescription": "The recipient of the mail.\n\nRequired: **Yes**\n"
                                                                },
                                                                {
                                                                    "const": "Sender",
                                                                    "description": "The sender of the mail.",
                                                                    "markdownDescription": "The sender of the mail.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "SenderIp",
                                                                    "description": "The sender's IP.",
                                                                    "markdownDescription": "The sender's IP.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "Subject",
                                                                    "description": "The subject of submission mail.",
                                                                    "markdownDescription": "The subject of submission mail.\n\nRequired: **No**\n"
                                                                },
                                                                {
                                                                    "const": "ReportType",
                                                                    "description": "The submission type for the given instance. This maps to Junk, Phish, Malware or NotJunk.",
                                                                    "markdownDescription": "The submission type for the given instance. This maps to Junk, Phish, Malware or NotJunk.\n\nRequired: **No**\n"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                ],
                                "properties": {
                                    "entity": {
                                        "title": "\ud83e\uddca Sentinel Entity",
                                        "icon": "\ud83e\uddca",
                                        "description": "Entity Type for which attributes available as identifier are mapped to.",
                                        "markdownDescription": "Each mapped entity can identify **_up to ten entities._**\n\n- If an alert contains more than ten items that correspond to a single entity\nmapping, only the first ten will be recognized as entities and be able to be analyzed as such.\n- This limitation applies to actual mappings, not to entity types. So if you have three\ndifferent mapped entities for IP addresses (say, source, destination, and gateway), each of\nthose mappings can accommodate ten entities.\n",
                                        "type": "string",
                                        "anyOf": [
                                            {
                                                "const": "Account",
                                                "description": "User account entity type",
                                                "markdownDescription": "### \ud83d\udc64 Account\n\n_User account entity type_\n\nRequired identifiers : _Sid, Name, AadUserId, PUID, ObjectGuid_\n\n**Strong identifiers of an account entity:**\n\n- Name + UPNSuffix\n- AadUserId\n- Sid + Host (required for SIDs of builtin accounts)\n- Sid (except for SIDs of builtin accounts)\n- Name + NTDomain (unless NTDomain is a builtin domain, for example \"Workgroup\")\n- Name + Host (if NTDomain is a builtin domain, for example \"Workgroup\")\n- Name + DnsDomain\n- PUID\n- ObjectGuid\n\n**Weak identifiers of an account entity:**\n\n- Name\n"
                                            },
                                            {
                                                "const": "AzureResource",
                                                "description": "Azure resource entity type",
                                                "markdownDescription": "### \ud83d\udc8e Azure Resource\n\n_Azure resource entity type_\n\nRequired identifiers : _ResourceId_\n\n**Strong identifiers of an Azure resource entity:**\n\n- ResourceId\n"
                                            },
                                            {
                                                "const": "CloudApplication",
                                                "description": "Cloud app entity type",
                                                "markdownDescription": "### \u26c5 Cloud Application\n\n_Cloud app entity type_\n\nRequired identifiers : _AppId, Name_\n\n**Strong identifiers of a cloud application entity:**\n\n- AppId (without InstanceName)\n- Name (without InstanceName)\n- AppId + InstanceName\n- Name + InstanceName\n"
                                            },
                                            {
                                                "const": "DNS",
                                                "description": "DNS entity type",
                                                "markdownDescription": "### \ud83c\udf10 Domain Name\n\n_DNS entity type_\n\nRequired identifiers : _DomainName_\n\n**Strong identifiers of a DNS entity:**\n\n- DomainName + DnsServerIp + HostIpAddress\n\n**Weak identifiers of a DNS entity:**\n\n- DomainName + HostIpAddress\n"
                                            },
                                            {
                                                "const": "File",
                                                "description": "System file entity type",
                                                "markdownDescription": "### \ud83d\udcc4 File Entity\n\n_System file entity type_\n\nRequired identifiers : _Name_\n\n**Strong identifiers of a file entity:**\n\n- Name + Directory\n- Name + FileHash\n- Name + Directory + FileHash\n"
                                            },
                                            {
                                                "const": "FileHash",
                                                "description": "File-hash entity type",
                                                "markdownDescription": "### \ud83e\udde9 File Hash\n\n_File-hash entity type_\n\nRequired identifiers : _Algorithm + Value_\n\n**Strong identifiers of a file hash entity:**\n\n- Algorithm + Value\n"
                                            },
                                            {
                                                "const": "Host",
                                                "description": "Host entity type",
                                                "markdownDescription": "### \ud83d\udda5\ufe0f Host\n\n_Host entity type_\n\nRequired identifiers : _HostName, NetBiosName, AzureID, OMSAgentID_\n\n**Strong identifiers of a host entity:**\n\n- HostName + NTDomain\n- HostName + DnsDomain\n- NetBiosName + NTDomain\n- NetBiosName + DnsDomain\n- AzureID\n- OMSAgentID\n- IoTDevice (not supported for entity mapping)\n\n**Weak identifiers of a host entity:**\n\n- HostName\n- NetBiosName\n"
                                            },
                                            {
                                                "const": "IoTDevice",
                                                "description": "IoT device entity type",
                                                "markdownDescription": "### \ud83d\uddb2\ufe0f IoT device\n\n_IoT device entity type_\n\nRequired identifiers : _DeviceId_\n\n**Strong identifiers of an IoT device entity:**\n\n- IoTHub + DeviceId\n\n**Weak identifiers of a IoT device entity:** \n\n- DeviceId (without IoTHub)\n"
                                            },
                                            {
                                                "const": "IP",
                                                "description": "IP address entity type",
                                                "markdownDescription": "### \ud83c\udf10 IP Address\n\n_IP address entity type_\n\nRequired identifiers : _Address_\n\n**Strong identifiers of an IP entity:**\n\n- Address\n"
                                            },
                                            {
                                                "const": "MailCluster",
                                                "description": "Mail cluster entity type",
                                                "markdownDescription": "### \ud83d\udce9 Mail Cluster\n\n_Mail cluster entity type_\n\nRequired identifiers : _Query, Source_\n\n**Strong identifiers of a mail cluster entity:**\n\n- Query + Source\n"
                                            },
                                            {
                                                "const": "MailMessage",
                                                "description": "Mail message address entity type",
                                                "markdownDescription": "### \ud83d\udce7 Mail Message\n\n_Mail message entity type_\n\nRequired identifiers : _NetworkMessageId, Recipient_\n\n**Strong identifiers of a mail message entity:**\n\n- NetworkMessageId + Recipient\n"
                                            },
                                            {
                                                "const": "Mailbox",
                                                "description": "Mailbox entity type",
                                                "markdownDescription": "### \ud83d\udcec Mailbox\n\n_Mailbox entity type_\n\nRequired identifiers : _MailboxPrimaryAddress_\n\n**Strong identifiers of a mailbox entity:**\n\n- MailboxPrimaryAddress\n"
                                            },
                                            {
                                                "const": "Malware",
                                                "description": "Malware entity type",
                                                "markdownDescription": "### \u2623\ufe0f Malware\n\n_Malware entity type_\n\nRequired identifiers : _Name_\n\n**Strong identifiers of a malware entity:**\n\n- Name + Category\n"
                                            },
                                            {
                                                "const": "Process",
                                                "description": "Process entity type",
                                                "markdownDescription": "### \u2699\ufe0f Process\n\n_Process entity type_\n\nRequired identifiers : _CommandLine, ProcessId_\n\n**Strong identifiers of a process entity:**\n\n- Host + ProcessId + CreationTimeUtc\n- Host + ParentProcessId + CreationTimeUtc + CommandLine\n- Host + ProcessId + CreationTimeUtc + ImageFile\n- Host + ProcessId + CreationTimeUtc + ImageFile.FileHash\n\n**Weak identifiers of a process entity:**\n\n- ProcessId + CreationTimeUtc + CommandLine (and no Host)\n- ProcessId + CreationTimeUtc + ImageFile (and no Host)\n"
                                            },
                                            {
                                                "const": "RegistryKey",
                                                "description": "Registry key entity type",
                                                "markdownDescription": "### \ud83d\uddc4\ufe0f Registry Key\n\n_Registry key entity type_\n\nRequired identifiers : _Hive, Key_\n\n**Strong identifiers of a registry key entity:**\n\n- Hive + Key\n"
                                            },
                                            {
                                                "const": "RegistryValue",
                                                "description": "Registry value entity type",
                                                "markdownDescription": "### \ud83d\uddc3\ufe0f Registry Value\n\n_Registry value entity type_\n\nRequired identifiers : _Name_\n\n**Strong identifiers of a registry value entity:**\n\n- Key + Name\n\n**Weak identifiers of a registry value entity:**\n\n- Name (without Key)\n"
                                            },
                                            {
                                                "const": "SecurityGroup",
                                                "description": "Security group entity type",
                                                "markdownDescription": "### \ud83d\udd10 Security Group\n\n_Security group entity type_\n\nRequired identifiers : _DistinguishedName, SID, ObjectGuid_\n\n**Strong identifiers of a security group entity:**\n\n- DistinguishedName\n- SID\n- ObjectGuid\n"
                                            },
                                            {
                                                "const": "SubmissionMail",
                                                "description": "Sumission mail entity type",
                                                "markdownDescription": "### \ud83d\udce8 Submission Mail\n\n_Submission mail entity type_\n\nRequired identifiers : _SubmissionId, NetworkMessageId, Recipient, Submitter_\n\n**Strong identifiers of a submission mail entity:**\n\n- SubmissionId\n- Submitter\n- NetworkMessageId\n- Recipient\n"
                                            },
                                            {
                                                "const": "URL",
                                                "description": "URL entity type",
                                                "markdownDescription": "### \ud83d\udd17 URL\n\n_URL entity type_\n\nRequired identifiers : _Url_\n\n**Strong identifiers of a URL entity:**\n\n- Url (when an absolute URL)\n\n**Weak identifiers of a URL entity:** \n\n- Url (when a relative URL)\n"
                                            },
                                            {
                                                "const": "SentinelEntities",
                                                "description": "Sentinel Entities entity type",
                                                "markdownDescription": "### \ud83e\uddca Sentinel Entities\n\n_Sentinel Entities entity type_\n\nMaps against a list of the entities. This list can include a combination of entities of different types.\n\n> \u26a0\ufe0f This entity type is not well known or documented, and should be considered experimental. Make\nsure to test in the GUI to confirm the correct behaviour before using this feature.\n\nRequired identifiers : _Entities_\n"
                                            }
                                        ]
                                    },
                                    "mappings": {
                                        "title": "\ud83d\uddfa\ufe0f Entity Mappings",
                                        "type": "array",
                                        "icon": "\ud83d\uddfa\ufe0f",
                                        "description": "Identifier and Column combination for the chosen entity type",
                                        "items": {
                                            "type": "object",
                                            "required": [
                                                "identifier",
                                                "column"
                                            ],
                                            "properties": {
                                                "identifier": {
                                                    "title": "\ud83d\udccd Entity Identifier",
                                                    "icon": "\ud83d\udccd",
                                                    "description": "Identifier used to provide identification for the chosen entity.",
                                                    "markdownDescription": "Each one of the identifiers in the **required identifiers** column is minimally necessary to identify its entity.\nHowever, a required identifier might not, by itself, be sufficient to provide _unique_ identification.\nThe more identifiers used, the greater the likelihood of unique identification. You can use up to\nthree identifiers for a single entity mapping.\n\nFor best results - for guaranteed unique identification - you should use identifiers from the **strongest\nidentifiers** column whenever possible. The use of multiple strong identifiers enables correlation\nbetween strong identifiers from varying data sources and schemas. This in turn allows Microsoft\nSentinel to provide more comprehensive insights for a given entity.\n",
                                                    "type": "string"
                                                },
                                                "column": {
                                                    "title": "\ud83e\ude98 Data Table Column",
                                                    "icon": "\ud83e\ude98",
                                                    "type": "string",
                                                    "description": "The column name to be mapped to the identifier. Note that it must be a valid column name available in the query result from the KQL chosen."
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "query": {
                            "title": "\ud83d\udd0e Sentinel KQL Detection Rule",
                            "type": "string",
                            "tide.template.multiline": true,
                            "description": "Scheduled query in KQL language",
                            "example": "SignInLogs | evaluate bag_unpack(LocationDetails)"
                        }
                    },
                    "additionalProperties": false
                },
                "splunk": {
                    "title": "Splunk Enterprise",
                    "description": "Splunk Enterprise enables you to search, analyze and\nvisualize your data to quickly act on insights from across your technology landscape.",
                    "type": "object",
                    "required": [
                        "status",
                        "query",
                        "scheduling"
                    ],
                    "properties": {
                        "status": {
                            "title": "\u267b\ufe0f MDR Status",
                            "type": "string",
                            "description": "Define the status of the rule implementation according to use case development life cycle process.",
                            "example": "STAGING",
                            "default": "DEVELOPMENT",
                            "enum": [
                                "DESIGN",
                                "DEVELOPMENT",
                                "IMPROVING",
                                "STAGING",
                                "PRODUCTION",
                                "ACCEPTANCE",
                                "DISABLED",
                                "REMOVED"
                            ],
                            "markdownEnumDescriptions": [
                                "\n### \u270d In Design\n\n\ud83d\udd11 **Identifier** : `DESIGN`\n\n \n\n\n\n\n\n\n\n---\n\nUnder active functional design, without technical translation yet\n",
                                "\n### \ud83d\udc69\u200d\ud83d\udcbb Under Active Development\n\n\ud83d\udd11 **Identifier** : `DEVELOPMENT`\n\n \n\n\n\n\n\n\n\n---\n\nUnder active technical implementation, going in exploratory rounds\n",
                                "\n### \ud83c\udfd7\ufe0f Ongoing Improvement\n\n\ud83d\udd11 **Identifier** : `IMPROVING`\n\n \n\n\n\n\n\n\n\n---\n\nRule is qualified functionally, but is undergoing refinment rounds\n",
                                "\n### \ud83d\udea7 Staging\n\n\ud83d\udd11 **Identifier** : `STAGING`\n\n \n\n\n\n\n\n\n\n---\n\nDeployed in staging environment for operational testing\n",
                                "\n### \ud83d\udce3 In Production\n\n\ud83d\udd11 **Identifier** : `PRODUCTION`\n\n \n\n\n\n\n\n\n\n---\n\nDeployed in active production environment, potentially raising alerts\n",
                                "\n### \u2696\ufe0f Acceptance Gate\n\n\ud83d\udd11 **Identifier** : `ACCEPTANCE`\n\n \n\n\n\n\n\n\n\n---\n\nA MDR is ready to go for PRODUCTION for CSIRC team. During ACCEPTANCE a CSIRC\nanalyst will handle the alert and will ensure the CSOC ticket and playbook are correct.\n\n",
                                "\n### \ud83d\uded1 Disabled Rule\n\n\ud83d\udd11 **Identifier** : `DISABLED`\n\n \n\n\n\n\n\n\n\n---\n\nRule is still accessible, but not active in any environment\n",
                                "\n### \ud83d\uddd1\ufe0f Removed from Platforms\n\n\ud83d\udd11 **Identifier** : `REMOVED`\n\n \n\n\n\n\n\n\n\n---\n\nRule is fully deprecated, and only flagged under this status for archival purposes\n"
                            ]
                        },
                        "contributors": {
                            "title": "\ud83d\udc65 Development Contributors",
                            "type": "array",
                            "description": "Individuals who supported creating, enriching or tuning the detection.",
                            "items": {
                                "type": "string",
                                "format": "email"
                            }
                        },
                        "threshold": {
                            "title": "\u2696\ufe0f Event threshold",
                            "type": "integer",
                            "description": "If amount of events is higher than threshold (during the timeframe) the alert is triggered. Default = 0.",
                            "example": 10,
                            "default": 0
                        },
                        "throttling": {
                            "title": "\ud83d\udddc\ufe0f Throttling parameters",
                            "type": "object",
                            "description": "Configuration for throttling incoming alerts",
                            "required": [
                                "duration"
                            ],
                            "properties": {
                                "fields": {
                                    "title": "\ud83d\udd16 Throttling Fields",
                                    "type": "array",
                                    "description": "Fields to check for matching values in events. Events with the same value for these fields are suppressed.",
                                    "example": "dst",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "duration": {
                                    "title": "\u231b Throttling Period",
                                    "type": "string",
                                    "description": "How long do discard new alerts that have the same characteristics (duplicate alerts), based on the fields defined below in hours/days. Default same as scheduling (value = 1h).",
                                    "example": "5m",
                                    "default": "1h",
                                    "pattern": ".*(h|d|m)$"
                                }
                            },
                            "additionalProperties": false
                        },
                        "scheduling": {
                            "title": "\u23f2 Throttling parameters",
                            "type": "object",
                            "description": "Configuration for throttling incoming alerts",
                            "required": [
                                "lookback"
                            ],
                            "anyOf": [
                                {
                                    "required": [
                                        "frequency"
                                    ]
                                },
                                {
                                    "required": [
                                        "cron"
                                    ]
                                }
                            ],
                            "properties": {
                                "cron": {
                                    "title": "\u23f2 Scheduled search cron scheduling",
                                    "type": "string",
                                    "icon": "\u23f2",
                                    "description": "Cron Expression describing the scheduling for running the search.",
                                    "example": "0 4 8-14 * *",
                                    "pattern": "(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|\u00b5s|ms|s|m|h))+)|((((\\d+,)+\\d+|([\\d\\*]+(\\/|-)\\d+)|\\d+|\\*) ?){5,7})"
                                },
                                "frequency": {
                                    "title": "\u23f1 Recurring Search Interval",
                                    "type": "string",
                                    "description": "Time intervals at which the scheduled search should be ran at. Warning: due to implementation details, only the following intervals are allowed for Splunk : 1-59m , 1-23h , 1-30d . For more complex scheduling, use the cron option instead. \n",
                                    "markdownDescription": "Time intervals at which the scheduled search should be ran at. \u26a0\ufe0f **Warning :** due to implementation details, only the following intervals are allowed for Splunk : 1-59m , 1-23h , 1-30d .\n\nFrequency is translated into cron expressions.\n\n**Examples**\n- 15m is translated into `*/15 * * * *`, or _At every 15th minute_\n- 4h is translated into `MM */4 * * *`, or _At minute MM past every 4th hour_\n- 2d is translated into `MM HH */2 * *`, or _At HH:MM on every 2nd day-of-month_\n\n\ud83d\udc49 HH:MM is a timestamp we take to allow a correct cron setup. This timestamp has 2 default modes setup in Splunk's config.yaml entry: `random`, which takes random hours and minutes at each deployment,  which can be preferable for performances, and `current` which take the current time of the **latest** deployment.\n\nYou can override this behaviour with `custom_time`, hidden from the template but accessible with `Control+Space`. There you can setup a custom timestamp (note that hours only matter in the case for frequency with days, and that when the frequency is minutes it won't have an effect)\nFor more complex scheduling, use the cron option instead. ",
                                    "example": "5m",
                                    "pattern": "^((([1-5]?[0-9]|60)m)|((?:[1-9]|1[0-9]|2[0-3])h)|((?:[1-9]|1[0-9]|2[0-9]|30)d))$"
                                },
                                "custom_time": {
                                    "title": "Custom Frequency Setup",
                                    "type": "string",
                                    "description": "Customize the base time that the frequency takes as an anchor. Expects HHhmm format.\nSee frequency description for more explanation in how they interact.\n",
                                    "example": "12:30",
                                    "pattern": "^(0[0-9]|1[0-9]|2[0-3])h[0-5][0-9]$"
                                },
                                "lookback": {
                                    "title": "\u231b Lookback Configuration",
                                    "type": "string",
                                    "description": "Duration of logs to search in",
                                    "example": "5m",
                                    "pattern": "^[1-9][0-9]*(m{1}|h{1}|d{1})$"
                                }
                            },
                            "additionalProperties": false
                        },
                        "notable": {
                            "title": "\ud83c\udf96\ufe0f Notable Event Settings",
                            "icon": "\ud83c\udf96\ufe0f",
                            "type": "object",
                            "description": "Configuration for notable events generated by the alert",
                            "properties": {
                                "event": {
                                    "title": "\ud83d\udce3 Notable Event Configuration",
                                    "icon": "\ud83d\udce3",
                                    "type": "object",
                                    "description": "Describes attributes related to the notable event",
                                    "anyOf": [
                                        {
                                            "required": [
                                                "title"
                                            ]
                                        },
                                        {
                                            "required": [
                                                "description"
                                            ]
                                        }
                                    ],
                                    "properties": {
                                        "title": {
                                            "title": "\ud83e\udeaa Notable Event Name",
                                            "icon": "\ud83e\udeaa",
                                            "type": "string",
                                            "description": "Supporting $token usage",
                                            "example": "New Abnormal Credentials added to Azure AD from user $logonuser"
                                        },
                                        "description": {
                                            "title": "\ud83d\udd2c Notable Event Description",
                                            "type": "string",
                                            "tide.template.multiline": true,
                                            "description": "Supporting $token usage",
                                            "example": "<insert example>"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "drilldown": {
                                    "title": "\ud83d\udd75 Drilldown search configuration",
                                    "icon": "\ud83d\udd75",
                                    "type": "object",
                                    "description": "Describes attributes related to drilldown search accompanying the notable event.",
                                    "required": [
                                        "name",
                                        "search"
                                    ],
                                    "properties": {
                                        "name": {
                                            "title": "\ud83c\udfab Drilldown Search Name",
                                            "type": "string",
                                            "description": "Name of the secondary search"
                                        },
                                        "search": {
                                            "title": "\u2753 Drilldown Search",
                                            "type": "string",
                                            "icon": "\u2753",
                                            "tide.template.multiline": true,
                                            "description": "A custom secondary search."
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        "security_domain": {
                            "title": "\ud83d\udee1\ufe0f Security Domain",
                            "icon": "\ud83d\udee1\ufe0f",
                            "type": "string",
                            "description": "Categorization of the notable event",
                            "example": "Threat",
                            "enum": [
                                "Access",
                                "Endpoint",
                                "Network",
                                "Threat",
                                "Identity",
                                "Audit"
                            ]
                        },
                        "risk": {
                            "title": "Splunk Risk Analysis",
                            "description": "Risk notables are automatically generated when you run a risk incident rule,\nwhich associates risk scores with a system, user, or other risk objects.\n",
                            "type": "object",
                            "link": "https://docs.splunk.com/Documentation/ES/7.1.0/User/RiskScoring",
                            "required": [
                                "message"
                            ],
                            "anyOf": [
                                {
                                    "required": [
                                        "risk_objects"
                                    ]
                                },
                                {
                                    "required": [
                                        "threat_objects"
                                    ]
                                }
                            ],
                            "properties": {
                                "message": {
                                    "title": "\ud83d\udcac Risk Message",
                                    "icon": "\ud83d\udcac",
                                    "description": "A unique message to describe the risk activity, which can use fields\nfrom the risk event surrounded by \"$\". \n",
                                    "type": "string",
                                    "example": "Suspicious Activity to $domain$"
                                },
                                "risk_objects": {
                                    "title": "\ud83d\udca3 Risk Objects",
                                    "icon": "\ud83d\udca3",
                                    "description": "A unique message to describe the risk activity, which can use\nfields from the risk event surrounded by \"$\". For example:\nSuspicious Activity to $domain$\n",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "field",
                                            "type",
                                            "score"
                                        ],
                                        "properties": {
                                            "field": {
                                                "type": "string",
                                                "icon": "\ud83c\udff7\ufe0f",
                                                "description": "Splunk field containing the risk object\n"
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The risk object identifier",
                                                "icon": "\u2753",
                                                "enum": [
                                                    "user",
                                                    "system",
                                                    "other"
                                                ]
                                            },
                                            "score": {
                                                "type": "integer",
                                                "icon": "\ud83e\uddee",
                                                "maximum": 100000,
                                                "description": "A number that represents the risk level of a\nspecific risk object. Risk events have a default score\nthat you can modify using risk factors.\t\n"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "threat_objects": {
                                    "title": "\ud83d\udd2a Risk Objects",
                                    "description": "Deviant behavior patterns of a risk object or entity,\nwhich indicate a security breach. For example: The Domain\nthreat object tracks the behavior of the domain across all risk objects.\n",
                                    "icon": "\ud83d\udd2a",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "field",
                                            "type"
                                        ],
                                        "properties": {
                                            "field": {
                                                "type": "string",
                                                "icon": "\ud83c\udff7\ufe0f",
                                                "description": "Splunk field containing the threat object\n"
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Identification of the threat object",
                                                "icon": "\u2753",
                                                "enum": [
                                                    "domain",
                                                    "url",
                                                    "ip",
                                                    "asn",
                                                    "user_agent",
                                                    "location",
                                                    "file_hash",
                                                    "file_name",
                                                    "command_line",
                                                    "process_name",
                                                    "certificate",
                                                    "registry",
                                                    "email_sender",
                                                    "email_subject",
                                                    "other"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        "query": {
                            "title": "\ud83d\udd0d Splunk SPL Detection Query",
                            "icon": "\ud83d\udd0d",
                            "type": "string",
                            "tide.template.multiline": true,
                            "description": "Correlation search in spl language",
                            "example": "| search (code=10 OR code=29 OR code=43) host!=\"localhost\" xqp>5"
                        },
                        "advanced": {
                            "title": "\ud83e\uddbe Advanced Edit custom parameters",
                            "icon": "\ud83e\uddbe",
                            "description": "Support for any parameter able to edited through Advanced Edit. Ensure that the naming and data inputed is as expected from Splunk.",
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "example": "parameter_to_set",
                                "additionalProperties": false
                            }
                        }
                    },
                    "additionalProperties": false
                }
            }
        }
    }
}