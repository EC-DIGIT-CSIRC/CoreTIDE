##### Configuration file for scripts #####
#~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=#
## *How to use this config :             #
##   1. Make sure that keys are the same##
##      across a common object to allow ##
##      association at runtime          ##
##   2. At the start of scripts, read   ##
##      this file and extract keys from ##
##      dictionaries, which should be   ##
##      directly loopable               ##
##   3. Update and extend file as the   ##
##      framework evolves               ##
##########################################

#Relative path from scripts subfolders to target directories
paths:
  tam : '../../../Models Library/Threat Actor Models/'
  tvm : '../../../Models Library/Threat Vector Models/'
  cdm : '../../../Models Library/Cyber Detection Models/'
  mdr : '../../../Models Library/Managed Detection Rules/'
  mdrv2 : '../../../Models Library/TIDeMEC Detection Rules/'
  #ram : '../../../Models Library/Response Action Models/'
  #vmm : '../../../Models Library/Vector Mitigation Models/' # Archiving VMM spec as focus is fully on detection engineering. May still be very relevant to TIDeMEC organizations.
  bdr : '../../../Models Library/Business Detection Requests/'
  #logsources: '../../../Data Model/Log Sources/'
  reports: '../../../Data Model/Reports/'
  vocab: '../../../Data Model/Vocabulary/'
  configurations : '../../configurations/'
  metaschemas : '../../../Data Model/Meta Schemas/'
  subschemas: '../../../Data Model/Meta Schemas/Sub Schemas/'
  definitions: '../../../Data Model/Meta Schemas/Definitions/'
  jsonschemas : '../../../Data Model/JSON Schemas/'
  lookups : '../../../Data Model/Lookups/'
  templates: '../../../Data Model/Templates/'
  docs : '../../../Documentation/'
  knowledgegraphdocs: '../Knowledge Graph/' # Currently, made to work after copying scripts to wiki subfolder and executing there. It solves reconciliations issue for staging doc, but should be made more flexible in future 
  lookup_docs : '../Lookups/'
  specsdocs: '../Specifications/' # As above
  vocabdocs: '../Vocabularies/' # As above
  docsuploads: '../../../Documentation/uploads/'
  vscode : '../../../.vscode/'
  jupyter : '../../../Jupyter Notebook/'
  resources : '../../Resources/'
  att&ck: '../../Resources/attack/'
  d3fend: '../../Resources/d3fend/'

resources:
  attack:
    enterprise: enterprise-attack-v14.1.xlsx
    mobile: mobile-attack-v14.1.xlsx
    ics: ics-attack-v14.1.xlsx
  
  d3fend:
    ontology: d3fend-ontology.json
    countermeasures: d3fend.csv

# TODO when migrating to TOML, have a more unified way to associate models
# and non models with their artifacts, and keys to flag models.
models:
  - tam
  - tvm
  - cdm
  - bdr
  - mdr

#Variable regarding the files generated by automation scripts
artifacts:
  
  #Metaschema file names
  metaschemas:
    tam : 'TAM Meta Schema.yaml'
    tvm : 'TVM Meta Schema.yaml'
    cdm : 'CDM Meta Schema.yaml'
    #ram : 'RAM Meta Schema.yaml'
    #vmm : 'VMM Meta Schema.yaml'
    #logsources : 'Log Source Meta Schema.yaml'
    mdr : 'MDR Meta Schema.yaml'
    mdrv2 : 'MDRv2 Meta Schema.yaml'
    bdr : 'BDR Meta Schema.yaml'
    lookup_metadata: 'Lookup Metadata Meta Schema.yaml'

  # Sub Schema Folder location
  recomposition:
    systems: MDR Systems Deployment

  #JSON Schema file names for each metaschema
  jsonschemas:
    tam : 'TAM Schema.json'
    tvm : 'TVM Schema.json'
    cdm : 'CDM Schema.json'
    #ram : 'RAM Schema.json'
    #vmm : 'VMM Schema.json'
    #logsources : 'Log Source Schema.json'
    mdr : 'MDR Schema.json'
    bdr : 'BDR Schema.json'
    lookup_metadata: 'Lookup Metadata Schema.json'

  #All tidemec objects contain model specific data under a datafield key, unique to each model
  datafields:
    tam : actor
    tvm : threat
    cdm : detection
    #ram :
    #vmm : 
    #logsources : 
    mdr : rule
    bdr : request


  #File Name for the template file in repository
  templates:
    tam : 'TAM TEMPLATE.yaml'
    tvm : 'TVM TEMPLATE.yaml'
    cdm : 'CDM TEMPLATE.yaml'
    #ram : 'RAM0000 - TEMPLATE.yaml'
    #vmm : 'VMM0000 - TEMPLATE.yaml'
    #logsources : 'LOG0000 - Log Source TEMPLATE.yaml'
    mdr : 'MDR TEMPLATE.yaml'
    bdr : 'BDR TEMPLATE.yaml'
    lookup_metadata: 'LOOKUP METADATA TEMPLATE.yaml'

  #Variable to create snippets from templates
  snippets :
    #Output file for snippets
    file : 'Model Templates.code-snippets'
    #Particular required snippet attributes  
    models: 
      tam :
        keyword : 'TAM template'
        description : 'Generates TAM template'
      tvm :
        keyword : 'TVM template'
        description : 'Generates TVM template'
      cdm :
        keyword : 'Generate CDM template'
        description : 'Generates CDM template'
      #vmm :
      #  keyword : 'Generate VMM template'
      #  description : 'Generates a compliant VMM template'
      #logsources :
      #  keyword : 'Generate Log Source template'
      #  description : 'Generates a compliant Log Source template'
      mdr :
        keyword : 'Generate MDR template'
        description : 'Generates MDR template'
      bdr :
        keyword : 'Generate BDR template'
        description : 'Generates BDR template'
      lookup_metadata:
        keyword: 'Generate Lookup Metadata'
        description: 'Create a lookup metadata companion file'

  #Vocabulary files related variables
  vocab :
    #Vocabulary entries for models, used to validate possible relationships between existing models
    models:
      tam : 'Threat Actors.yaml'
      tvm : 'Threat Vectors.yaml'
      cdm : 'Detection Models.yaml'
      #vmm : 'Mitigation Models.yaml'
      bdr : 'Detection Models.yaml'

    #Libraries which shouldn't be documented but still exist as yaml
    skip :
      - mitigation
      - logsources
      - nist
      - att&ck
      
  #Documentation page entries for programatically generated documentation
  docs :
    #subfolder for each model markdown
    object_name:
      tam : 'Threat Actors'
      tvm : 'Threat Vectors'
      cdm : 'Detection Models'
      mdr : 'Detection Rules'
      bdr : 'Business Requests'
      rpt : 'Intelligence Reports'
      logcollection : 'Log Collections'
    
    #vocab: 'Vocabulary Definitions.md'
    #specs: 'Schema Reference.md'
    #Header 1 of the generated markdowns
    titles:
      tam : 'Threat Actor Models Data Model Reference'
      tvm : 'Threat Vector Models Data Model Reference'
      cdm : 'Cyber Detection Models Data Model Reference'
      mdr : 'Managed Detection Rules Data Model Reference'
      bdr : 'Business Detection Rules Data Model Reference'
      #ram : 'Response Actions Data Model Reference'
      #logsources : 'Logsource Data Model Reference'

    # Emojis used to generate more visible log entries or enrich documentation
    icons:
      tam: 👺
      tvm: ☣️
      cdm: 🛡️
      #ram : 
      #vmm : 
      #logsources : 
      mdr: 🚨
      bdr: 🏛️
      vocab: 📒
      metaschema: 🏗️
      lookups: 🔎
      lookup_metadata: 🔣
      
      #Common entries for metaschema related icons which are not in vocab
      id: 🔑
      uuid: 🪪
      name: 🪪
      title: 🪪
      references: 🔗
      meta: ✍
      version: 🏷️
      created: 🗓️
      modified: 🗓️
      author: 👩‍💻
      priority: ❗

      #Body Fields to models
      actor: 👹
      threat: ☣️
      detection: 🛡️
      alert: 🚨
      request: 🏛️

      #Freeform fields
      description: 🔬
      affiliations: 👥
      aliases: 🥷
      guidelines: 🧪
      tuning: 🔧
      terrain: 🖥️
      playbook: 👣


      #Misceleneaous
      home: 🪬
      misp: 🌌
      stix: ☢️
      cve: ❤️‍🩹
      link: 🔗
      logsources: 📑
      fields: 🔖
      atomics: ⚛️
      systems: 🔩
      subschemas: 🧩

      #MDR Specifics
      tags: 🏷️
      contributors: 👥
      scheduling: ⏲
      timeframe: ⏱️
      frequency: ⏱
      lookback: ⌛
      duration: ⌛
      throttling: 🗜️
      threshold: ⚖️
      query: 🔎


    #Not currently used, instead we use global search and show that on the homepage
    #In future, can be used if we wish separate navigation indexes - notably if
    #Gitlab supports markdown links in json tables
    indexes:
      tam: 'Threat Actors Navigation Index'
      tvm: 'Threat Vectors Navigation Index'
      cdm: 'Detection Models Navigation Index'
      bdr: 'Business Detection Requests Navigation Index'
      mdr: 'Detection Rules Navigation Index'

    # List of model types to generate documentation for
    scope:
      - tam
      - tvm
      - cdm
      - bdr
      #- mdr #Separate documentation script
      # - logsources
      # - ram
      # - vmm 

  
#Data regarding the purpose of the scripts
scripts :
  #Atomic data manipulation pipelines which programatically generate key files, in the correct order of execution
  #All relational paths from toolchain

  artifacts:
    index: '../index.json'
    #In pipeline execution, generated and used to load into memory all TIDeMEC data, alongside other dependencies. Allows to accelerate execution due to slow down of IOPS at the small block sizes accessed.

  mutation:
    - name: File Name and ID Aligner
      file: '../Data Mutation/id_name_aligner_assigner.py'
      description: Aligns the file name with the YAML Content and assigns ID if missing (non-MDR objects only)
    - name: Reports ID/TLP Assigner
      file: '../Data Mutation/report_id_assign.py'
      description: Assigns an ID and a default TLP if not done manually
    - name : MDRv3 Migration # Temporary Usage, until MR Flush
      file : '../Data Mutation/mdrv3_migration.py'
      description : Maps MDR on the v2 data model on v3 and updates file content
    - name: CDM Validation Block Removal
      file: '../Data Mutation/cdm_validation_removal.py'
      description: Remove unused validation block from CDM
    - name: New References migration
      file: '../Data Mutation/new_references_migration.py'
      description: Migrates the reference block to the new schema, and also upgrade meta to metadata

  validation:
    # Verifying using the standard library is safer than a regex as there is more complexity to the uuid internals
    # Json Schema by default do not support a uuid validation, even though the type exists in the specification.
    - name: ID Duplication Checks
      file : '../Validators/id_duplications_checks.py'
      description: Check if ID used in TIDeMEC are uniquely assigned
    - name: MDR UUIDv4 Validation 
      file : '../Validators/mdr_uuid_v4.py' 
      description : Validates UUID against v4 specification using the standard library 
    - name :  JSON Schema Validation
      file : '../Validators/json_schema_checker.py'
      description : Validates all tidemec objects against their respective json schemas
    - name: CVE Validation
      file: '../Validators/cve_validity_check.py'
      description: Checks whether the CVE in TVM cve fields exist in the NVD
      proxy: True #To allow going through proxy to NVD

  synthesis :
    - name : Models Vocabulary Generator 
      file : '../Artifacts Assemblers/models_vocab_builder.py'
      description : Creates Vocabulary entries for TIDeMEC models, so they can be used within JSON Schema for validation.
    - name : Reports Vocabulary Generator
      file : '../Artifacts Assemblers/report_vocab_builder.py'
      description : Indexes reports and builds vocabulary of reports
    - name : Metaschema to JSON Schema Assembler
      file : '../Artifacts Assemblers/json_schema_builder.py'
      description : Generates JSON Schemas from metaschema files, dynamically looking up Vocabulary values. JSON Schemas allow to validate the models as per the TIDeMEC schema. 
    - name : Metaschema to Model Templates
      file : '../Artifacts Assemblers/template_builder.py'
      description : Converts the metaschema into a template that can be reused for documentation, snippets etc. and make correct model creation easier. 
    - name : VSCode Snippet Generator
      file : '../Artifacts Assemblers/vscode_snippet_builder.py'
      description : Converts the templates into vscode formatted snippets in project level settings, where keywords are used to generate the template.
    # Deprecating ATT&CK Layer generator for now due to performance limitations

    #- name : ATT&CK Navigator Layer Generator
    #  file  : '../Artifacts Assemblers/attack_layer_builder.py'
    #  description : Generates an attack layer of the modelled content, showing coverage of the different models and how they combine. 

  #Important : the documentation toolchain is expected to run in the presence of the index, made by the /Misc/global_indexer.py script.
  documentation:
    - name : Staging Index Reconcilier
      file : '../Knowledge Management/stg_index_reconcilier.py'
      description : Loads a version of the index which adds data from mdr in staging.
    - name : Vocabulary Documentation Generator
      file  : '../Knowledge Management/vocab_doc_builder.py'
      description : Generates the markdown documentation for the Vocabulary file in the documentation. 
    - name : Metaschema Documentation Generator
      file : '../Knowledge Management/metaschema_doc_builder.py'
      description : Creates the markdown documentation for the metaschemas.
    - name : Lookups Documentation
      file: '../Knowledge Management/lookup_docs.py'
      description: Create the documentation for lookups
    - name : Models Documentation Generator
      file : '../Knowledge Management/model_docs.py'
      description : Generates the markdown documentation for the models in a single file per model type, for the documentation.
      proxy: True #To allow going through proxy to NVD
    - name: MDR Documentation
      file: '../Knowledge Management/mdr_docs.py'
      description: Generates markdown documentation for Managed Detection Rules v3.
    - name: Legacy MDRv2 Documentation
      file: '../Knowledge Management/mdrv2_doc_builder.py'
      description: Generates markdown documentation for legacy MDRv2 files. Will be deprecated.
    - name : Wiki Navigation Index Maker
      file : '../Knowledge Management/nav_index_builder.py'
      description :  Assembles tables exposing tidemec data to make the dataset easier to navigate.
    - name : Wiki Sidebar Creator
      file : '../Knowledge Management/sidebar_builder.py'
      description : Generates a sidebar in markdown to make wiki navigation easier. 

  # Supporting scripts which should run in production plan before final deployment plan
  pre_deployment:
      - name : Splunk MDR Promotion 
        file : '../Data Mutation/mdr_status_promotion.py'
        description : Identifies if the modified MDRs must receive a status promotion

  deployments:
    #- name : Index Generator
    #  file : '../Misc/global_indexer.py'
    # description : Generates a complete dataset of TIDeMEC in json format, used to enrich deployment data
    - name : Splunk MDR Lookup Builder 
      file : '../Deployment Modules/splunk_mdr_metadata_updater.py'
      description : Updates the lookup with the latest data from the MDR scoped in pipeline.
      system: splunk
      always: True #Splunk lookup should always deploy
      proxy : True
    - name : Splunk Deployer
      file : '../Deployment Modules/splunk_mdr_deployer.py'
      description : Connects to a Splunk instance and exports MDR as alerting rules.
      system: splunk
      proxy : True
    - name : Sentinel Deployer
      file : '../Deployment Modules/sentinel_mdr_deployer.py'
      description : Exports rule as an ARM json package into a github for ingestion in Sentinel pipeline.
      system: sentinel
      proxy :  True
    - name : Carbon Black Cloud Deployer
      file : '../Deployment Modules/carbon-black-cloud_mdr_deployer.py'
      description : Connects to a CB Cloud Endpoint and exports MDR as alerting rules.
      system: carbon_black_cloud
      proxy : True
  
  lookups_deployments:
    - name: Splunk Lookup Deployer
      file: '../Deployment Modules/splunk_lookup_deployer.py'
      description: Overrides existing lookups with the newly modified one from TIDeMEC
      system: splunk
      proxy: True 

  #TODO : Automate imports from external git sources - unclear as may not be possible for airgapped environments
  imports:
    - name: D3FEND Artifacts Vocabulary Importer
      file: ../Import Modules/d3fend_artifacts_extractor.py
      description: Parses the D3FEND ontology to extract all artifacts into a structured vocabulary.
    - name: D3FEND Countermeasures Vocabulary Importer
      file: ../Import Modules/d3fend_countermeasures_import.py
      description: |
        Converts the D3FEND Spreadsheet published at https://d3fend.mitre.org/resources/ into a vocabulary.
        This spreadsheet is imperfect as it lacks information for top-level countermeasures, but the ontology
        is too complex to parse for countermeasure as everything is connected to another higher level object. 
    - name: ATT&CK Framework Import
      file: ../Import Modules/mitre_attack_extractor.py
      description: Uses the Excel files published by attack at https://attack.mitre.org/resources/working-with-attack/ for ICS, Enterprise and Mobile to extract Techniques, Data Sources and Mitigations into their distinct vocabs.

organization:
  # Kept for backward doc compatibility
  default_alert_handlers: ""
  # New key from MDRv3 onward
  default_responder: ""

infrastructure:
  instance: #For testing purposes, can use CI variables as well
    project: "https://git.s.cec.eu.int/catch/ec-tide/"
    gitlab_wiki: "/-/wikis/"
  
documentation:
  cve:
    default_db_link: https://nvd.nist.gov/vuln/detail/ #Change to any other root url to change the website the links will direct to, i.e. https://cve.mitre.org/cgi-bin/cvename.cgi?name=
    retrieve_details: True #Leave to false to not retrieve remote details from cve databases, e.g. for fully airgapped deployments.

# Allows to set particular attributes related to deployment orchestration
deployment:
  # Defines status attributes which impact workflows
  status:
    # Production status can only be deployed from main workflow
    production:
      - PRODUCTION
      - DISABLED
      - REMOVED
    # Safe status never deploy the configuration toward the target system
    safe:
      - DESIGN
    
    # MDR Promotion modifies MDR File on the fly to upgrade their status to a 
    # target when the status(es) under configurations is/are not production statuses.
    # This makes workflow smoother and avoid having to manually toggle the status
    # in the file before merging, which can be forgotten.
    promotion:
      enabled: True # Toggle to false to never promote
      promotion_target: PRODUCTION # Must be a valid status under the status vocabulary.

lookups:
  enforce_metadata: true # Sets whether we always require metadata files, or if they are optional
  naming_convention: (TIDE)\_LD\_\d{3}\_[^ ]+ # Regex pattern to validate the lookups name. Comment out if not needed.
  
  booleans: # Accepted values for columns with type boolean. We recommend to set a standard across your team, and use this config to stick to it.
    # Important to keep the double quotes, else python and yaml may interpret booleans in a different way
    true_values:
      - "True"
      - "TRUE"
      - "true"
      - "1"
    false_values:
      - "False"
      - "FALSE"
      - "false"
      - "0"
