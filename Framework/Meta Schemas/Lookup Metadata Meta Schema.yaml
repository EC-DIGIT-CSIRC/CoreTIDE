title: Lookup Metadata Meta Schema
description: Specification for Lookup Metadata companion file

filename: Lookup_Name.csv
modeldoc: Lookup Metadata are accompanying files that help documenting and validating their lookups

$schema: http://json-schema.org/draft-07/schema#
additionalProperties: false

required:
  - name
  - tlp
  - description
  - owners

properties:

  name:
    title: Display name
    type: string
    description: Verbose Name of the lookup, where the file name may be more technical
    example: Legitimate domain admins
  
  tlp:
    title: Traffic Light Protocol
    type: string
    tide.vocab: true
    description: Rate the lookup sharability. Take particular notice of its content and source of information. 
    example: green    

  description:
    title: Lookup Description
    type: string
    tide.template.multiline : True
    description: Describe lookup purpose and context
  
  owners:
    title: Lookup Owners
    type: array
    description: Key point of contacts maintaining the lookup file
    items:
      type: string
      format: email
  
  sentinel:
    title: Sentinel Watchlist Configuration
    description: Additional Sentinel Specific Settings
    type: object
    required:
      - search_key
      - watchlist_alias
    properties:

      search_key:
        title: Watchlist Search Key
        markdownDescription: | 
          Name of a column in your watchlist that you expect to use as a join with
          other data or as a frequent object of searches.

          ---

          **Updating an existing watchlist search key**

          💡 Ensure readiness of existing queries before updating as they use the search key as a reference. 

          ⚠️ Changing the search key will result in a deletion and recreation of the watchlist
          in a synchroneous manner leaving a small period of time where the lookup won't be complete. 
        type: string
        icon: 🗝️
      
      watchlist_alias:
        title: Watchlist Alias
        markdownDescription: |
          Aliases can be used as a more friendly name to consume the watchlist in queries.
          By default, the aliases and the watchlist name are the same as the lookup csv file name.
          
          💬 3 to 64 characters long : 

          - First character must be a letter
          - Last character can be a letter or a number
          - Other characters can be letters, numbers, underscores `_` or hyphens `-`
          
          ---

          **Updating an existing watchlist alias**

          💡 Ensure readiness of existing queries before updating as they use the alias as a reference. 

          ⚡ When updating the alias of a watchlist, the deployer will only delete the previous
          watchlist once the new one with the updated alias was created, leaving no gaps.
        type: string
        pattern: ^[a-zA-Z]{1}[a-zA-Z0-9_-]{1,62}[a-zA-Z0-9]{1}$

  columns:
    title: Column Setup
    description: Metadata around columns and their expected content.
    tide.template.spacer: true
    icon: 🧮
    type: array
    items:
      type: object
      required:
        - name
        - type
        - description
        - nullable
      
      allOf:
        - if:
            properties:
              type:
                const: regex
          then:
            required:
              - regex.expression
        - if:
            properties:
              type:
                const: list
          then:
            required:
              - list.values

      properties:

        name:
          title: Column Name
          type: string
      
        regex.expression:
          tide.template.hide: True
          description: Regular Expression used when validating the column
          type: string     

        list.values:
          tide.template.hide: True
          description: | 
            Defined list of values that the values in the lookup column must match.
          type: array     

        type:
          title: Data Type
          description: Describe the expected data format of the column
          type: string
          anyOf:
            - const: any
              description: Generic validation, everything will pass.
              markdownDescription: |
                ### 🤷‍♂️ Any type

                Generic validation, everything will pass.
                
                ⚠️ _This type is not recommended as it bypasses validation, and should only be used
                in exceptional scenario where other types won't apply._
              
                💡 Use the `regex` type if you require a custom validation type or contact CoreTIDE Governance.

            - const: string
              description: Will explicitely check for string, and reject other format that can be converted to a string.
              markdownDescription: |
                ### 🧵 Strings

                Will check for `strings`, and reject other format that
                can be converted to a `integer`, `float` or `boolean`.

                **✅ Accepted Values**
                - NameSurname
                - Name Surname
                - Word 19 Word 1.234

                **❌ Rejected Values**
                - 10,230
                - 11
                - 1.1
                - TRUE _Accepted boolean True value, use boolean type instead_

            - const: integer
              description: | 
                Expects an integer with no separators such as "," or "." (12,000,000 is not accepted, use 12000000).
                For values with a decimal point, use the float type
              markdownDescription: |
                ### 🔢 Integers

                Accepts an integer (whole number). 💡For numbers with a decimal point, use the _float_ type.
                
                ⚠️ **Thousands separators are not accepted**
                
                ⚠️ .0 decimal points are tolerated, as many tools will treat it as an integer. 

                - ❌ `19,000,000` is invalid, `19000000` is expected
                - ✅ `1.00` is a float, but is tolerated
                - ✅ `19` is a valid integer

            - const: float
              description: |
                Expects a number with a floating point OR an integer.
                If only expecting integer, use the integer type instead.
              markdownDescription: |
                ### 🛟 Floating point values

                Expects a number with a floating point OR an integer.
                
                💡If only expecting integer, use the _integer_ type instead.
                
                ⚠️ **Thousands separators are not accepted**

                ⚠️ `.` is expected as a decimal separator, not `,`

                - ❌ `19,000.1` is invalid, `19000.1` is expected
                - ❌ `19,6` is invalid, `19.6` is expected
                - ✅ `19` is an integer, and also a valid float
                - ✅ `19.01` is a valid float

            - const: boolean
              description: Accepts a value representing a [true | True | TRUE | 1] or [false | False | FALSE | 0] state. 
              markdownDescription: |
                ### ✅ Boolean Values 
                Accepts a value represented a true or false state. 

                | **✅ Accepted "True" Values** | **❌ Accepted "False" Values** |
                |-------------------------------|---------------------------------|
                | true                          | false                           |
                | True                          | False                           |
                | TRUE                          | FALSE                           |
                | 1                             | 0                               | 

            - const: regex
              description: Custom regex validation
              markdownDescription: |
                ### 🔎 Regular Expression

                Leverage a regular expression to provide a custom validation.

                💡 It is strongly suggested to test your regex on a playground such as
                [🔗Regex 101](https://regex101.com) and toggle the `Python` Flavor for maximum compatibility.

                👉 You will have to enter the regex using the required `regex.expression` keyword

                ⚠️ CoreTIDE does not vet for any third party site to test regular expression,
                we recommend to **not upload any critical data on a third-party controlled site**.

            - const: list
              description: Check whether the input value belongs to a predefined list
              markdownDescription: |
                ### 📃 Predefined List

                👉 You will have to input the required value with `list.values`

                ⚠️ Leading and trailing whitespaces will be ignored during validation, as the overall data pipeline
                will remove them as well

            - const: email
              description: |
                Standard email format, such as coretide@tide.com. IP addresses within the email
                address are not expected. 
              markdownDescription: |
                ### 📧 Email Address
                Standard email format, such as described in [🔗 RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
                
                - ✅ coretide@tide.com
                - ✅ tide.governance@tide.babel
                - ❌ coretide@10.0.0.19
                                
                💡 Any Top-Level Domain (`tld`) is accepted, as long as the `user@domain.tld` format is respected.

            - const: url
              description: |
                Standard url format, such as http://www.example.com/index.html.
                For simple FQDN validation with no URI, use the domain type instead.
              markdownDescription: |
                ### 🔗 URL Address
                Standard URL format, such as described in [🔗 URL Living Standard](https://url.spec.whatwg.org/)
                
                💡 For simple domain validation with no URI, use the _domain_ instead.
                
                👉 Expects the standard pattern `FQDN/URI`, meaning `[ftp | http | https]://(subdomain.)domain.tld/resource`

            - const: domain
              description: |
                Standard domain name format, such as (subdomain.)domain@tld.
                A full FQDN (containing protocol) is not expected. 
              markdownDescription: |
                ### 🌐 Domain Name

                Standard domain name format, such as described in [🔗 RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)

                💡A full FQDN (containing protocol) is not expected. For full `FQDN` + `URI`, use _url_ instead

                👉 Expects the standard pattern `FQDN/URI`, meaning `[ftp | http | https]://(subdomain.)domain.tld/resource`

            - const: ip
              description: IP version 4 format, such as 10.0.0.19
              markdownDescription: |
                ### 🌐 IP Address

                IPv4 addresses, such as described in [🔗 Wikipedia | IP Address](https://en.wikipedia.org/wiki/IP_address)

                💡 For IPv6 validation, use _ip::v6_ instead.

                👉 Expects the common 32 bit (4 bytes) decimal format `(0->253).(0->253).(0->253).(0->253)`

            - const: ip::v6
              description: IP version 6 format, such as 2001:db8:3333:4444:5555:6666:7777:8888
              markdownDescription: |
                ### 🌐 IP version 6 Address

                IPv6 addresses, such as descripbed in [🔗 Wikipedia | IPv6 Address](https://en.wikipedia.org/wiki/IPv6_address)

                👉 Accepts both upper and lower case hexadecimal values, such as
                `2001:db8:3333:4444:5555:6666:7777:8888` and `2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF`
          
            - const: uuid
              description: Universal Unique Identifier as a 128 bit value
              markdownDescription: |
                ### 🆔 Universal Unique Identifier

                UUIDs such as described in [🔗 Wikipedia | Universal Unique Identifider](https://en.wikipedia.org/wiki/Universally_unique_identifier)

                👉 Accepts any version of UUID, as the only difference is the generation
                method and not the format.
          
            - const: hash::md5
              description: MD5 Hashes
              markdownDescription: |
                ### #️⃣ MD5 Hash

                Valid MD5 Hash values, such as described in [🔗 Wikipedia | MD5](https://en.wikipedia.org/wiki/MD5)

            - const: hash::sha1
              description: SHA-1 Hashes
              markdownDescription: |
                ### #️⃣ Secure Hash Algorithm 1 Hash

                Valid SHA-1 Hash values, such as described in [🔗 Wikipedia | MD5](https://en.wikipedia.org/wiki/SHA-1)

            - const: hash::sha256
              description: SHA-256 Hashes
              markdownDescription: |
                ### #️⃣ Secure Hash Algorithm 2 [256 bit digest] Hash

                Valid SHA256 Hash values, such as described in [🔗 Wikipedia | SHA-2](https://en.wikipedia.org/wiki/SHA-2)

        nullable:
          title: If true, the value is allowed to be empty. If False, must always be filled in.
          type: boolean
          default: False
        
        description:
          title: Column Description
          type: string
      
